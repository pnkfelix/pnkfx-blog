<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2015-10-21T14:17:33+02:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vis-a-vis, part 1: Visualizing Graphs via viz.js]]></title>
    <link href="http://blog.pnkfx.org/blog/2015/10/12/viz-a-viz-js/"/>
    <updated>2015-10-12T14:10:00+02:00</updated>
    <id>http://blog.pnkfx.org/blog/2015/10/12/viz-a-viz-js</id>
    <content type="html"><![CDATA[<p>This is a post discussing a couple different ways to draw pictures,
mostly those of graphs (nodes and edges, i.e. circles or boxes, and
lines between them).</p>

<p>The technology covered by this post is <a href="https://github.com/mdaines/viz.js/">viz.js</a>, a Javascript
library for rendering graphs specified via the <a href="http://www.graphviz.org/content/dot-language">DOT</a> language.</p>

<!-- more -->


<p>Its meant both as a reference for me to use when I want to remind
myself of my options here, and as a demo of some interesting web
technologies.</p>

<p>I hope in later posts to cover SVG (&ldquo;Scalable Vector Graphics&rdquo;)
itself, and perhaps higher level Javascript libraries such as <a href="http://d3js.org/">D3</a>.</p>

<p>I will focus in these posts on client-side rendering technologies.
Another entirely reasonable option is to render the content to an
image (or SVG, or a JS script that renders into a canvas, et cetera).
However, one of my goals with my documents is to embed all of the
source text into the markdown content; a separate rendering tool would
require some sort of pre-process step, and I am loathe to try to
incoporate that into the <code>Rakefile</code> that Octopress uses.</p>

<h2>viz.js</h2>

<p>The first item we will cover, since it amongst the simplest to adopt,
is <code>vis.js</code>, a javascript library that provides
<a href="http://www.graphviz.org/">graphviz-style</a> rendering in the browser client.</p>

<p>(<a href="http://www.graphviz.org/">Graphviz</a> is a tool for automatically laying out and
rendering graphs; it is coupled with <a href="http://www.graphviz.org/content/dot-language">DOT</a>, a simple domain-specific
language for describing graph structures by defining the nodes, edges,
and various attributes attached to them, like labels.)</p>

<h3>Hooking up the JS source</h3>

<p>Since this is using (heavy duty) javascript, you are not likely to
want to put the supporting source code inline in your web page.
Instead, you will need to load it up, either:</p>

<ol>
<li><p>from the original <a href="src=" title="https://github.com/mdaines/viz.js/releases/download/0.0.3/viz.js">source site</a>, or</p></li>
<li><p>in a server-side local copy of the file that you deploy alongside
your content
(e.g. put it into the <code>_source/javascripts/</code> directory,
if you are using Octopress for a blog like this one).</p></li>
</ol>


<p>I recommend the latter route, since the linked github repository is
outside of your control, and if it dissapears, you lose the rendering
and your page is broken.</p>

<p>After you have selected your source for the code, you need to
make your page load it up, via a <code>script</code> tag invocation,
like: <code>&lt;script src="http://blog.pnkfx.org/javascripts/viz.js" charset="utf-8"&gt;&lt;/script&gt;;</code></p>

<p>This script can take a while to load. You may want to insert a warning,
like this one, before the <code>script</code> invocation.</p>

<script src="http://blog.pnkfx.org/javascripts/viz.js" charset="utf-8"></script>


<h3>Injecting generated SVG into the document</h3>

<p>Once the script is loaded, you can start using inline Javascript to
render graphviz-style descriptions of directed graphs to SVG within
the page.</p>

<p>The smallest example of this given in the <code>viz.js</code> documentation
does this by dynamically adding to the <code>innerHTML</code> property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">&quot;&lt;p&gt;Sample addition.&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="nx">Viz</span><span class="p">(</span><span class="s2">&quot;digraph { a -&gt; b; }&quot;</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above &ldquo;works&rdquo; (even in the context of an Octopress blog post), but
it is a rather brute-force approach. Plus, the resulting composition
of the blog text with the graphics added at the end is not likely to
please you nor your audience.</p>

<p>We can do better: Add a content-less <code>div</code> tag (or <code>p</code> tag, et
cetera), and then search for that element in a <code>script</code> block that
will add our picture to the inner HTML for that tag.</p>

<p>Here is a concrete illustration of the idea (that does not use
Graphviz or <code>viz.js</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;target_anchor0&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;This text was injected.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div id="target_anchor0"></div>


<script>
    var elem = document.getElementById("target_anchor0");
    elem.innerHTML = "This text was injected.";
</script>


<p>So, now that we know how to insert HTML into our document (even in the
context of the markdown source for a blog post), let us dive into how
to combine that with Graphviz, via <code>viz.js</code>.</p>

<h3><code>dot_source</code> holds DOT source</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;target_anchor1&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dot_source</span> <span class="o">=</span> <span class="s1">&#39;digraph { rankdir=&quot;LR&quot;; bgcolor=&quot;transparent&quot;; a -&gt; b -&gt; c; }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Viz</span><span class="p">(</span><span class="nx">dot_source</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The contents of <code>dot_source</code> make up a DOT program:</p>

<ul>
<li><p><code>digraph</code> means we are making a directed graph,</p></li>
<li><p><code>rankdir="LR"</code> means we want the nodes to prefer horizontal left-to-right layout (the default is to have them vertically stacked top-to-bottom),</p></li>
<li><p><code>bgcolor="transparent"</code> means we want a transparent background (the default is white, which is fine but a little offputting for this site),</p></li>
<li><p><code>a -&gt; b</code> means &ldquo;I want an edge coming out of <code>a</code> and into <code>b</code>&rdquo;; you can chain them together as shown in <code>a -&gt; b -&gt; c</code>.</p></li>
</ul>


<p>Here is how that ends up rendering:</p>

<div id="target_anchor1"></div>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent"; a -> b -> c; }';
    var elem = document.getElementById("target_anchor1");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>It turns out that the generated SVG is actually pretty readable.  That
is, I am able to use &ldquo;Inspect Element&rdquo; in my web browser, and I see
there that the SVG element is actually made up of many <code>g</code> elements
that have each had their <code>class</code> attribute set according to their
role: the whole graph has <code>class="graph"</code>, and then each node and edge
is assigned <code>"node1"</code>, <code>"node2"</code>, <code>"edge1"</code>, <code>"node3"</code>, <code>"edge2"</code>.
(There are also comments embedded in the generated SVG above each
element, so that one can map the element back to the node or edge
in the original <code>dot_source</code> text.)</p>

<p>That is how to use <code>viz.js</code> to embed graphs described via <a href="http://www.graphviz.org/content/dot-language">DOT</a>.</p>

<p>This can be especially useful if you are making a dynamic page where
the user can inject their own graph descriptions, and you want <code>viz.js</code>
to do the heavy lifting of deciding how to lay out the nodes.</p>

<h3>Controlling node layout</h3>

<p>But what if we want more control over the layout of the picture
elements?</p>

<p>For example, one might want more control over layout to
ensure that there is a easy-to-see correspondence between a series of
pictures, or if there is a structural symmetry that is easier to see
if the layout is also symmetrical.</p>

<p>Consider the following example graph:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;target_anchor2&quot;</span><span class="nt">&gt;</span>Symmetric structure but asymmetric layout: <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dot_source</span> <span class="o">=</span> <span class="s1">&#39;digraph { rankdir=&quot;LR&quot;; bgcolor=&quot;transparent&quot;; a -&gt; b -&gt; c -&gt; e; b -&gt; d -&gt; e -&gt; a; }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor2&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Viz</span><span class="p">(</span><span class="nx">dot_source</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p id="target_anchor2">Symmetric structure but asymmetric layout: </p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent"; a -> b -> c -> e; b -> d -> e -> a; }';
    var elem = document.getElementById("target_anchor2");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>There are a number of options at this point. We could abandon Graphviz (and <code>viz.js</code>),
and do our diagrams directly in SVG. But, assuming we want to stay within the confines
of <code>viz.js</code>, there are a few things we <em>can</em> do.</p>

<p>First, we can specify initial node positions by adding a <code>pos</code> attribute to
each node that needs it. The default layout engine (called <code>dot</code>) just
ignores such attributes, but other engines, such as the <code>neato</code> layout,
will incorporate such information.</p>

<p>One can switch the layout engine via an argument to the <code>Viz</code> function, but I will instead do it
by setting an attribute in the graph itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;target_anchor3&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dot_source</span> <span class="o">=</span> <span class="s1">&#39;digraph { rankdir=&quot;LR&quot;; bgcolor=&quot;transparent&quot;;&#39;</span>
</span><span class='line'>    <span class="c1">// Start of the layout selection code</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;layout=&quot;neato&quot;; inputscale=72;&#39;</span> <span class="c1">// specifying &quot;neato&quot; layout to allow init position specification</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;overlap=&quot;false&quot;;&#39;</span> <span class="c1">// if you leave this out, the engine may put nodes in overlapping spots</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;start=0;&#39;</span> <span class="c1">// seed the RNG (to ensure consistent results)</span>
</span><span class='line'>    <span class="c1">// End of the layout selection code</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;a -&gt; b -&gt; c -&gt; e; b -&gt; d -&gt; e -&gt; a;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39; }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor3&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Viz</span><span class="p">(</span><span class="nx">dot_source</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p id="target_anchor3"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    // Start of the layout selection code
    dot_source += 'layout="neato"; inputscale=72;' // specifying "neato" layout to allow init position specification
    dot_source += 'overlap="false";' // if you leave this out, the engine may put nodes in overlapping spots
    dot_source += 'start=0;' // seed the RNG (to ensure consistent results)
    // End of the layout selection code
    dot_source += 'a -> b -> c -> e; b -> d -> e -> a;';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor3");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>As you can see, we definitely have a different node layout. It is not
yet directly illustrating the mirror symmetry of the graph structure,
though. To achieve that, we could put the <code>a</code> node inside of a
diamond shape formed by { <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code> }.</p>

<p>We can specify node positions by adding separate declarations for
each of the individual nodes, and then adding <code>pos</code> attributes
for each.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dot_source += &#39;b [pos=&quot;0,40&quot;]; a [pos=&quot;100,40&quot;]; c [pos=&quot;160,80&quot;];&#39;
</span><span class='line'>dot_source += &#39;d [pos=&quot;160,0&quot;]; e [pos=&quot;220,40&quot;];&#39;
</span></code></pre></td></tr></table></div></figure>




<p id="target_anchor4"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    // Start of the layout selection code
    dot_source += 'layout="neato"; inputscale=72;' // specifying "neato" layout to allow init position specification
    dot_source += 'overlap="false";' // if you leave this out, the engine may put nodes in overlapping spots
    dot_source += 'start=0;' // seed the RNG (to ensure consistent results)
    // End of the layout selection code
    // Start of the node positioning code
    dot_source += 'b [pos="0,40"]; a [pos="100,40"]; c [pos="160,80"];'
    dot_source += 'd [pos="160,0"]; e [pos="220,40"];'
    // End of the node positioning code
    dot_source += 'a -> b -> c -> e; b -> d -> e -> a;';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor4");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p><em>That</em> shows the mirror symmetry of the graph.</p>

<p>The careful reader may have noticed an oddity in the above rendering: I had specified
that <code>a</code> have an x-coordinate of 100, while the corresponding x-coordinate for <code>c</code> and <code>d</code> is 160; but
in the rendering, all three of the nodes fall on a vertical line sharing the same x-coordinate.
What happened?</p>

<p>The answer is that the input node positions are by default only as
<em>initial</em> values; the layout engine may still choose to adjust them in
order to &ldquo;improve&rdquo; the layout according to its internal heuristics.</p>

<p>We can override this by <em>pinning</em> the nodes in place. An individual node can be pinned by
putting an exclamation point after the coordinate in its <code>pos</code> attribute, or equivalently by
setting the nodes <code>pin</code> attribute to <code>true</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dot_source += &#39;b [pos=&quot;0,40&quot;]; a [pos=&quot;100,40!&quot;]; c [pos=&quot;160,80!&quot;];&#39;
</span><span class='line'>dot_source += &#39;d [pos=&quot;160,0!&quot;]; e [pos=&quot;220,40&quot;];&#39;
</span></code></pre></td></tr></table></div></figure>




<p id="target_anchor5"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    // Start of the layout selection code
    dot_source += 'layout="neato"; inputscale=72;' // specifying "neato" layout to allow init position specification
    dot_source += 'overlap="false";' // if you leave this out, the engine may put nodes in overlapping spots
    dot_source += 'start=0;' // seed the RNG (to ensure consistent results)
    // End of the layout selection code
    // Start of the node positioning code
    dot_source += 'b [pos="0,40"]; a [pos="100,40!"]; c [pos="160,80!"];'
    dot_source += 'd [pos="160,0!"]; e [pos="220,40"];'
    // End of the node positioning code
    dot_source += 'a -> b -> c -> e; b -> d -> e -> a;';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor5");
    elem.innerHTML = Viz(dot_source,"svg");
</script>


<p>Now we can see that <code>a</code>, <code>c</code>, and <code>d</code> are all pinned in place, and the resulting layout
is perhaps not as nice.</p>

<p>In particular, the <code>a -&gt; b</code> edge does not even have enough room
for its arrow head. We could fix this by pinning the <code>b</code> node in place as well,
but an alternative is to encourage graphviz to put more space between the nodes
via the <code>sep</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dot_source += &#39;sep=0.2;&#39; // treat each node as 1.2 times larger than it is
</span></code></pre></td></tr></table></div></figure>




<p id="target_anchor6"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    // Start of the layout selection code
    dot_source += 'layout="neato"; inputscale=72;' // specifying "neato" layout to allow init position specification
    dot_source += 'overlap="false";' // if you leave this out, the engine may put nodes in overlapping spots
    dot_source += 'sep=0.2;' // treat each node as 1.2 times larger than it is
    dot_source += 'start=0;' // seed the RNG (to ensure consistent results)
    // End of the layout selection code
    // Start of the node positioning code
    dot_source += 'b [pos="0,40"]; a [pos="100,40!"]; c [pos="160,80!"];'
    dot_source += 'd [pos="160,0!"]; e [pos="220,40"];'
    // End of the node positioning code
    dot_source += 'a -> b -> c -> e; b -> d -> e -> a;';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor6");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>That is a pretty legible graph. Of course, the code to describe it is
quite a bit more complex than our <a href="#target_anchor2">original code</a>;
hopefully I will not feel the need to specify node placement too
often.</p>

<h3>Edge attributes</h3>

<p>Above we saw examples of node attributes, which can be used to adjust the
node placement and rendering. (The <a href="http://www.graphviz.org/doc/info/attrs.html">family of attributes</a> is much larger,
and includes ways to specify shapes, color, label text, et cetera.)</p>

<p>Graphviz also offers the ability to customize attributes for each
<em>edge</em>.  This can also be useful for influencing layout.
In particular, the <code>len</code> attribute can specify a preferred edge length
(ignored by the <code>dot</code> layout), and the <code>weight</code> attribute can be
increased to encourage the edge to be shorter (or, when <code>len</code> is
specified and relevant, to encourage that edge length to more closely
approximate <code>len</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;target_anchor7a&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dot_source</span> <span class="o">=</span> <span class="s1">&#39;digraph { rankdir=&quot;LR&quot;; bgcolor=&quot;transparent&quot;;&#39;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;edge [weight=2];&#39;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;a -&gt; b -&gt; c -&gt; e; b -&gt; d -&gt; e -&gt; a [weight=1];&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39; }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor7a&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Viz</span><span class="p">(</span><span class="nx">dot_source</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have used <code>edge [weight=2]</code> to specify a default weight of 2 for all edges,
and then we override that weight for the <code>e -&gt; a</code> edge (and just that edge).
(Note: The <code>dot</code> layout requires integral values for <code>weight</code>.)</p>

<p>Here is the effect of this:</p>

<p id="target_anchor7a"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    dot_source += 'edge [weight=2];'
    dot_source += 'a -> b -> c -> e; b -> d -> e -> a [weight=1];';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor7a");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>Look at that! We can see the mirror symmetry of the graph (depending on
how much we are willing to squint with regards to that <code>e -&gt; a</code> edge),
but we did not have to do any layout hacking.</p>

<p>Unsurprisingly, a different weight-assignment may yield a different layout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dot_source += &#39;   { edge [weight=10]; a -&gt; b; e -&gt; a; }&#39;
</span><span class='line'>dot_source += &#39;   { edge [weight=1]; b -&gt; c -&gt; e; b -&gt; d -&gt; e; }&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Here we have moved a portion of the edges into a subgraph, so that we
can override their default <code>weight</code> as a group.</p>

<p id="target_anchor7b"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    dot_source += '   { edge [weight=10]; a -> b; e -> a; }'
    dot_source += '   { edge [weight=1]; b -> c -> e; b -> d -> e; }'
    dot_source += ' }';
    var elem = document.getElementById("target_anchor7b");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>Perhaps more surprising, changing node introduction order in the
source can also affect the layout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>dot_source += &#39;   b -&gt; a [dir=&quot;back&quot;]; a -&gt; e [dir=&quot;back&quot;];&#39;
</span><span class='line'>dot_source += &#39;   b -&gt; c -&gt; e; b -&gt; d -&gt; e;&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Here, we introduce the nodes <code>b</code> then <code>a</code> then <code>e</code> to encourage them
to be laid out horizontally in that order, then apply the <code>dir</code>
attribute so that the edge between them has its direction reversed.</p>

<p id="target_anchor7c"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    dot_source += '   b -> a [dir="back"]; a -> e [dir="back"];'
    dot_source += '   b -> c -> e; b -> d -> e;'
    dot_source += ' }';
    var elem = document.getElementById("target_anchor7c");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>Finally, if you want to describe a path through the graph, you can
highlight the edges of the path by overriding their <code>color</code> and
<code>penwidth</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;target_anchor8&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dot_source</span> <span class="o">=</span> <span class="s1">&#39;digraph { rankdir=&quot;LR&quot;; bgcolor=&quot;transparent&quot;;&#39;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;edge [weight=2];&#39;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;a -&gt; b -&gt; d;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39;{ edge [color=&quot;red&quot;,penwidth=&quot;3.0&quot;]; b -&gt; c -&gt; e -&gt; a [weight=1] }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dot_source</span> <span class="o">+=</span> <span class="s1">&#39; }&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target_anchor8&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Viz</span><span class="p">(</span><span class="nx">dot_source</span><span class="p">,</span> <span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here again we have used a subgraph to reduce the annotation burden.</p>

<p id="target_anchor8"></p>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent";'
    dot_source += 'edge [weight=2];'
    dot_source += 'a -> b -> d -> e;';
    dot_source += '{ edge [color="red",penwidth="3.0"]; b -> c -> e -> a [weight=1] }';
    dot_source += ' }';
    var elem = document.getElementById("target_anchor8");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>(One can use subgraphs for a number of other tricks, such as forcing all
nodes in the subgraph to fall into the same <code>rank</code>, which can be another
useful technique for encouraging particular layouts.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An insight regarding DST grammar for Rust]]></title>
    <link href="http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust/"/>
    <updated>2014-03-13T07:04:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust</id>
    <content type="html"><![CDATA[<p>Executive summary: <code>type</code> = <code>unsized</code> ⊎ <code>sized</code>, so we should use
<code>type</code> as our generalization marker, not <code>unsized</code>.</p>

<ul>
<li><a href="#background_dst">Background: Dynamically Sized Types (DST)</a></li>
<li><a href="#the_insight">The Insight: <code>type</code> is a better generalization marker</a></li>
<li><a href="#the_examples">Examples ported from DST, Take 5</a></li>
</ul>


<h2><a id="background_dst">Background: Dynamically Sized Types (DST)</a></h2>

<p>The Rust team has been discussing incorporating &ldquo;dynamically-sized
types&rdquo; into the static semantics for Rust.  Essentially the idea is to
allow code to describe and name static types whose size is only known
at Runtime.  E.g. the integer vector <code>[int, ..5]</code> is known at compile
time to have five elements, and is considered (statically) sized,
while the vector <code>[int]</code> has unknown size at compile time, and so that
type is called unsized.</p>

<p><a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">There</a>
is <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">a</a>
series <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/26/thoughts-on-dst-1/">of</a>
blog <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-2">posts</a>
about <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-3/">dynamically</a>
sized <a href="http://smallcultfollowing.com/babysteps/blog/2013/12/02/thoughts-on-dst-4/">types</a>
on <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">niko&rsquo;s</a>
blog.
So I will not dive into the details too much here</p>

<p>The main points are that the compiler wants to know whether a type is
meant to always have a static size, or if it can potentially be
unsized.  In a language without type polymorphism, this might be easy
to determine directly from the parsed type expression (such as in the
vector examples I gave at the outset).  But once you add polymorphism,
things get a litle harder for the compiler.</p>

<p>Anyway, the plan drafted in Niko&rsquo;s
<a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">&ldquo;DST, Take 5&rdquo;</a>
is to add an <code>unsized</code> keyword, and then use it as a marker to make
certain spots more general than they are by default.  The reasoning
here is that in the common case, you want a type parameter to
represent a sized type.  (Since there are certain operations you
cannot do with a value of an unsized type, such copying the value into
some other location, the compiler needs to know its size statically so
that it can allocate an appopriate amount of space for it.)</p>

<p>So under that scheme, to write type parameter of most general type,
e.g. for a <code>struct</code> definition that ends with an unsized field,
you need to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Named</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span><span class="o">:</span> <span class="o">~</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>    <span class="n">payload</span><span class="o">:</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Accepts solely *sized* Named&lt;T&gt;.</span>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Accepts both sized and *unsized* Named&lt;T&gt;</span>
</span><span class='line'><span class="k">fn</span> <span class="n">bar</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, you need to use what I will call a &ldquo;generalization&rdquo; marker at
the spot where you bind a type variable, to indicate that the domain of
that type variable is more general than the common-case default of
a sized type.</p>

<p>For defining a trait that can be implemented on any possible type,
including unsized ones, you would need to use the <code>unsized</code> keyword
somewhere there as well.  &ldquo;DST, Take 5&rdquo; proposed
<code>trait Foo&lt;unsized Self&gt; : NormalBounds { ... }</code>
(or <code>trait Foo : unsized + NormalBounds { ... }</code>, but this is broken for
various reasons).
I had been suggesting <code>unsized trait Foo : NormalBounds { ... }</code>,
which Niko rightly objected to (since it is not the trait that is
unsized, but rather potentially its Self type).
Over the Rust work week last week I suggested
<code>trait Foo for unsized : NormalBounds</code> { &hellip; }, which I think is the first
suggestion that Niko and myself could both stomach.  (The reasoning
behind the latter suggestion is that we write <code>impl Trait for
SelfType</code>, so it makes sense to put the generalization marker into the
same position, i.e. filling the placeholder in: <code>Trait for _</code>.)</p>

<h2><a id="the_insight">The Insight: <code>type</code> is a better generalization marker</a></h2>

<p>One of the concerns that Niko has pointed out to me is that it is easy
to (mis)read <code>unsized T</code> as saying &ldquo;<code>T</code> must be unsized&rdquo;.  But that is not
what it is saying; it is saying &ldquo;<code>T</code> <em>can</em> be unsized&rdquo;; you can still pass in
a sized type for <code>T</code>.</p>

<p>I was reflecting on that this morning, and I realized something:
The whole point of DST is to partition the type universe into (Sized ⊎ Unsized).
So if you want this construct to be more self-documenting, the
generalization marker should be using some name to describe that union
(Sized ⊎ Unsized), rather than the name <code>unsized</code>.</p>

<p>But we already have a very appropriate name for that union: <code>type</code>!</p>

<p>So that started me thinking: Why don&rsquo;t we use <code>type</code> as our generalization marker?
So the definition of <code>bar</code> in the example above would be written</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">bar</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, this can have a very simple explanation: If we keep the <code>Sized</code> trait bound,
then you can just say that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="p">...){</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>desugars to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">:</span><span class="nb">Sized</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="p">...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in general, any type variable formal binding <code>&lt;T:Bounds&gt;</code> desugars
to <code>&lt;type T:Sized+Bounds&gt;</code></p>

<p>I admit, when I first wrote this, I said &ldquo;hmm, this looks a bit like
C++, is that a problem?&rdquo;  But I&rsquo;m coming to like it.  The biggest
problem I can foresee is that a developer might be confused about when
they are suppposed to write <code>foo&lt;type T&gt;</code> versus <code>foo&lt;T&gt;</code>.  But chances
are that someone who does not understand the distinction will <em>not</em>
suffer if they just guess the answer; if they over-generalize, either:</p>

<ul>
<li><p>the code will compile successfully anyway, in which case there is
no harm, except perhaps w.r.t. forward-compatibility of their
library when they may have wished they had imposed the <code>Sized</code>
bound, or</p></li>
<li><p>the compiler will flag a problem in their code, in which case
hopefully our error messages will suggest to add a <code>:Sized</code> bound
or to just not use <code>type</code> in the binding for <code>T</code>.</p></li>
</ul>


<p>If they under-generalize, then they (or their library&rsquo;s clients) will
discover the problem when they apply <code>foo</code>.</p>

<p>For the trait case, it is a little less obvious what to do.
I think we could likewise write:
<code>trait Foo for type : NormalBounds</code>
for the maximally general case.
<code>trait Foo : NormalBounds</code> would then desugar to
<code>trait Foo for type : Sized + NormalBounds</code></p>

<p>So the point is that you would only use the <code>type</code> keyword when you
wanted to explicitly say &ldquo;I am generalizing over <em>all</em> types, not just
sized ones&rdquo;, and thus are opting into the additional constraints that
that scenario presents.</p>

<p>This approach wouldn&rsquo;t be so palatable under earlier envisioned
designs for DST where e.g. you were restricted to write explicitly
<code>unsized struct S { ... }</code> for structs that could end up being
unsized.  But at this point I think we have collectively decided that
such a restriction is unnecessary and undesired, so there is no worry
that someone might end up having to write <code>type struct S { ... }</code>,
which definitely looks nonsensical.</p>

<p>There is another potential advantage to this approach that I have not
explored much yet: we could also add an <code>Unsized</code> trait bound, and
allow people to write <code>&lt;type X:Unsized&gt;</code> for when they want to
restrict <code>X</code> to unsized types alone.  I am not sure whether this is
actual value in this, but it does not seem absurd to put in a special
case in the coherence checker to allow one to write
<code>impl&lt;X:Sized&gt; SomeTrait for X { ... }</code>
and
<code>impl&lt;X:Unsized&gt; SomeTrait for X { ... }</code>
in order to get full coverage of <code>SomeTrait</code> for all types.</p>

<p>Finally, another obvious (though obviously post Rust 1.0) direction
that this approach suggests is that if we decide to add
parameterization over constants, we can likewise use the <code>const</code>
keyword in the spot where I have written the generalization marker
<code>type</code>, e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="kr">const</span> <span class="n">N</span><span class="o">:</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">nums</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">f64</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">])</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(In this case <code>const</code> would not be a generalization marker but instead
a <em>kind</em> marker, since it is changing the domain of the parameter from
being that of a type to being some value within a type.)</p>

<h2><a id="the_examples">Examples ported from DST, Take 5</a></h2>

<p>Here are the ported definitions of <code>Rc</code> and <code>RcData</code>.
(Update: had to turn off syntax highlighting to work-around a rendering bug on <code>*</code>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>struct Rc&lt;type T&gt; {
</span><span class='line'>    ptr: \*RcData&lt;T&gt;,
</span><span class='line'>    // (a dummy field, just for illustrative purposes)
</span><span class='line'>    dummy: uint,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct RcData&lt;type T&gt; {
</span><span class='line'>    ref_count: uint,
</span><span class='line'>
</span><span class='line'>    #[max_alignment]
</span><span class='line'>    data: T
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>impl&lt;type T&gt; Drop for Rc&lt;T&gt; {
</span><span class='line'>    fn drop&lt;&#39;a&gt;(&amp;&#39;a mut self) {
</span><span class='line'>        unsafe {
</span><span class='line'>            intrinsics::drop(&amp;mut (*self.ptr).data);
</span><span class='line'>            libc::free(self.ptr);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Here is the <code>ImmDeref</code> example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Rc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">ptr</span><span class="p">).</span><span class="n">data</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I think I need a wider variety of examples, but this is good enough for now.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Octopress post-Mavericks upgrade.]]></title>
    <link href="http://blog.pnkfx.org/blog/2014/03/13/meta-updating-octopress-post-mavericks-upgrade/"/>
    <updated>2014-03-13T06:18:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2014/03/13/meta-updating-octopress-post-mavericks-upgrade</id>
    <content type="html"><![CDATA[<p>I decided this morning to write a blog post related to Rust.  I have
not posted to this blog in months, and in the meantime I had upgraded
this computer at home to Mac OS X Mavericks (10.9.2).</p>

<p>So of course my existing set of commands for Octopress workflow did
not work.</p>

<p>At first there were dependencies like <code>chunky_png-1.2.7</code> that had to
be satisfied (re-installed, I assume; I am pretty sure I blew away my
previous Homebrew setup during the upgrade; I do not know how much
that overlaps with Ruby&rsquo;s package management system).</p>

<p>The few step was just blind following of the suggestions made by my
tools: <code>rake</code> suggests to run <code>bundle install</code>, and I comply.  And the results
seem promising:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% rake generate
</span><span class='line'>Could not find chunky_png-1.2.7 in any of the sources
</span><span class='line'>Run \`bundle install\` to install missing gems.
</span><span class='line'>% bundle install
</span><span class='line'>Fetching gem metadata from http://rubygems.org/.......
</span><span class='line'>Fetching gem metadata from http://rubygems.org/..
</span><span class='line'>Using rake (0.9.6)
</span><span class='line'>Using RedCloth (4.2.9)
</span><span class='line'>Installing chunky_png (1.2.7)
</span><span class='line'>Using fast-stemmer (1.0.2)
</span><span class='line'>Using classifier (1.3.3)
</span><span class='line'>Using fssm (0.2.10)
</span><span class='line'>Installing sass (3.2.5)
</span><span class='line'>Using compass (0.12.2)
</span><span class='line'>Using directory_watcher (1.4.1)
</span><span class='line'>Installing haml (3.1.8)
</span><span class='line'>Installing kramdown (0.13.8)
</span><span class='line'>Installing liquid (2.3.0)
</span><span class='line'>Using syntax (1.0.0)
</span><span class='line'>Using maruku (0.6.1)
</span><span class='line'>Using posix-spawn (0.3.6)
</span><span class='line'>Using yajl-ruby (1.1.0)
</span><span class='line'>Installing pygments.rb (0.3.7)
</span><span class='line'>Installing jekyll (0.12.0)
</span><span class='line'>Installing rack (1.4.5)
</span><span class='line'>Installing rack-protection (1.3.2)
</span><span class='line'>Using rb-fsevent (0.9.3)
</span><span class='line'>Using rdiscount (1.6.8)
</span><span class='line'>Using redcarpet (2.2.2)
</span><span class='line'>Using rubypants (0.2.0)
</span><span class='line'>Installing tilt (1.3.3)
</span><span class='line'>Installing sinatra (1.3.4)
</span><span class='line'>Installing stringex (1.4.0)
</span><span class='line'>Using bundler (1.3.5)
</span><span class='line'>Your bundle is complete!
</span><span class='line'>Use \`bundle show [gemname]\` to see where a bundled gem is installed.
</span></code></pre></td></tr></table></div></figure>


<p>But I
balked on the second step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% rake generate
</span><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
</span><span class='line'>/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:2:in \`&lt;top (required)&gt;&#39;
</span><span class='line'>(See full trace by running task with --trace)
</span><span class='line'>% bundle exec
</span><span class='line'>bundler: exec needs a command to run
</span></code></pre></td></tr></table></div></figure>


<p>I did not understand what <code>bundle exec</code> meant here, so I did not do the &ldquo;obvious thing&rdquo;, which apparently is to re-run generate but within bundle, like so:
<code>% bundle exec rake generate</code></p>

<p>Instead I fumbled around trying to figure out what my situation was
with respect to <code>rake:</code> do I need to downgrade to a previous version?
Or do I need to upgraade its subcomponents, and/or my whole site
configuration?</p>

<p>The first things I learned from a couple web interactions:</p>

<p>From <a href="http://stackoverflow.com/questions/17474969/you-have-already-activated-rake-0-9-6-but-your-gemfile-requires-rake-10-1-0-us">stackoverflow</a>
I learned:</p>

<ul>
<li>You can find out what version(s) of a gem you have install, with
the relatively obvious <code>gem list</code> command:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% gem list rake
</span><span class='line'>
</span><span class='line'>*** LOCAL GEMS ***
</span><span class='line'>
</span><span class='line'>rake (10.1.0, 0.9.6)
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can also remove particular versions of a gem, with the <code>gem
uninstall</code> command:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% gem uninstall rake
</span><span class='line'>
</span><span class='line'>Select gem to uninstall:
</span><span class='line'> 1. rake-0.9.6
</span><span class='line'> 2. rake-10.1.0
</span><span class='line'> 3. All versions
</span><span class='line'>&gt; 1
</span><span class='line'>Successfully uninstalled rake-0.9.6
</span></code></pre></td></tr></table></div></figure>


<p>But these facts and this process did not actually help, because I
still needed <code>rake-0.9.6</code> for my site configuration, for some reason I
have not yet determined (mostly due to lack of trying).</p>

<p>I then did some more guessing and followed some false paths, like
reinstalling the <code>bundler</code> gem, uninstalling and reinstalling rake
(which effectively led to me replacing rake-10.1.0 with rake-10.1.1).</p>

<p>At some point I ran this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% bundle update rake
</span><span class='line'>Fetching gem metadata from http://rubygems.org/........
</span><span class='line'>Fetching gem metadata from http://rubygems.org/..
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Installing rake (0.9.6)
</span><span class='line'>Using RedCloth (4.2.9)
</span><span class='line'>Using chunky_png (1.2.7)
</span><span class='line'>Using fast-stemmer (1.0.2)
</span><span class='line'>Using classifier (1.3.3)
</span><span class='line'>Using fssm (0.2.10)
</span><span class='line'>Using sass (3.2.5)
</span><span class='line'>Using compass (0.12.2)
</span><span class='line'>Using directory_watcher (1.4.1)
</span><span class='line'>Using haml (3.1.8)
</span><span class='line'>Using kramdown (0.13.8)
</span><span class='line'>Using liquid (2.3.0)
</span><span class='line'>Using syntax (1.0.0)
</span><span class='line'>Using maruku (0.6.1)
</span><span class='line'>Using posix-spawn (0.3.6)
</span><span class='line'>Using yajl-ruby (1.1.0)
</span><span class='line'>Using pygments.rb (0.3.7)
</span><span class='line'>Using jekyll (0.12.0)
</span><span class='line'>Using rack (1.4.5)
</span><span class='line'>Using rack-protection (1.3.2)
</span><span class='line'>Using rb-fsevent (0.9.3)
</span><span class='line'>Using rdiscount (1.6.8)
</span><span class='line'>Using redcarpet (2.2.2)
</span><span class='line'>Using rubypants (0.2.0)
</span><span class='line'>Using tilt (1.3.3)
</span><span class='line'>Using sinatra (1.3.4)
</span><span class='line'>Using stringex (1.4.0)
</span><span class='line'>Using bundler (1.3.5)
</span><span class='line'>Your bundle is updated!
</span></code></pre></td></tr></table></div></figure>


<p>but I still got the error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% rake generate
</span><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.1, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
</span><span class='line'>/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:2:in \`&lt;top (required)&gt;&#39;
</span><span class='line'>(See full trace by running task with --trace)
</span></code></pre></td></tr></table></div></figure>


<p>and this is when I finally saw that I had to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% bundle exec rake generate
</span></code></pre></td></tr></table></div></figure>


<p>Except that this did not solve everything:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration from /Users/pnkfelix/Dev/Sites/pnkfx-blog/_config.yml
</span><span class='line'>Building site: source -&gt; public
</span><span class='line'>YAML Exception reading 2013-04-12-better-command-completion-in-bash-aka-resolving-zsh-envy.markdown: invalid byte sequence in US-ASCII
</span><span class='line'>/Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/backtick_code_block.rb:13:in \`gsub&#39;: invalid byte sequence in US-ASCII (ArgumentError)
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/backtick_code_block.rb:13:in \`render_code_block\&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/octopress_filters.rb:12:in \`pre_filter&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/octopress_filters.rb:28:in \`pre_render&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:112:in \`block in pre_render&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:111:in \`each&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:111:in \`pre_render&#39;
</span><span class='line'>  from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:166:in \`do_layout&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in \`render&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in \`block in render&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in \`each&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in \`render&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in \`process&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/bin/jekyll:264:in \`&lt;top (required)&gt;&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/bin/jekyll:23:in \`load&#39;
</span><span class='line'>  from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/bin/jekyll:23:in \`&lt;main&gt;&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Another web search brought me to a <a href="http://otfusion.org/blog/2013/10/27/os-x-mavericks/">post by a fellow Mavericks user</a> who seems to have a similar attitude to my own about ruby development.
And from that I found the full command I needed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% LANG=en_US.utf-8 bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration from /Users/pnkfelix/Dev/Sites/pnkfx-blog/_config.yml
</span><span class='line'>Building site: source -&gt; public
</span><span class='line'>Successfully generated site: source -&gt; public
</span></code></pre></td></tr></table></div></figure>


<p>And here we are!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detective Work on Rust Closures]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/"/>
    <updated>2013-06-07T10:17:00+02:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#background_fns">Background: Closures (recurring and otherwise)</a></li>
<li><a href="#background_dst">Background: DST</a></li>
<li><a href="#the_problem">The Problem: DST and Closures</a>

<ul>
<li><a href="#is_fn_too_ugly">Is fn~ too ugly?</a></li>
<li><a href="#leveraging_proc">Leveraging a proc keyword/expression</a></li>
<li><a href="#other_ways_to_proc">Other ways to express proc</a>

<ul>
<li><a href="#digression_on_macros">A Personal Digression on Macros</a></li>
</ul>
</li>
<li><a href="#more_followup_on_procs_and_fns">More followups on procs and fns</a></li>
</ul>
</li>
<li><a href="#where_are_we">So where are we?</a></li>
</ul>


<p>I have recently been trying to keep myself abreast of a flurry of
discussion about reforming the design of Rust closures.  Niko has a
series of blog posts (<a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">2</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/">3</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/">4</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">5</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/">6</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">7</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">8</a>); the
content of some of those posts were further discussed at Rust team
meetings (<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-04-30">11</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-07">12</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-14">13</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-21">14</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-28">15</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04">16</a>), and there have been some
more formalized proposals with their own set of discussions: (<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform">9</a>,
<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform-%28specific%29">10</a>).</p>

<p>There are also associated github issues (<a href="https://github.com/mozilla/rust/issues/2202">17</a>, <a href="https://github.com/mozilla/rust/issues/3569">18</a>, <a href="https://github.com/mozilla/rust/issues/6308">19</a>), though
without sufficient context the discussion in the github issues may not
always be intelligible.</p>

<p>Some of the links above are more about &ldquo;Dynamically Sized Types&rdquo;
(DST), a related topic, as we shall see.</p>

<p>This post is my attempt to condense all of this information down into
something where I can see all the pieces at once, and discard the
red herrings along the way.</p>

<h2><a id="background_fns">Background: Closures (recurring and otherwise)</a></h2>

<p>In Rust circa version 0.6, closures have three categories according to
the type system (<code>&amp;fn</code>, <code>@fn</code>, and <code>~fn</code>), but <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">as Niko describes</a>,
they can be divided into two kinds: by-reference closures and copying
closures.  By-reference closures are also referred to as
stack-allocated closures or sometimes &ldquo;stack closure.&rdquo;
(There is also a orthogonal division of <code>once</code> closures, versus
closures that can be invoked more than once; some of these things are,
to my knowledge, only part of planned future implementation.  Niko
discusses them in the blog posts but I&rsquo;m mostly sidestep them here.)</p>

<p>As Niko states in the first paragraph of <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, a stack closure is
allocated on the stack, and can refer to and manipulate the local
variables of the enclosing stack frame (by reference).</p>

<p>In Rust (as of version 0.6), one creates a stack-allocated closure by
writing an expression <code>|x ...| { ... }</code> within an expression context
dictating that it wants a closure of <code>&amp;fn</code> type.  Analogously, a
closure allocated on the exchange-heap is expressed by putting the
expression into a context of <code>~fn</code> type, et cetera.  Since a
stack-allocated closure is currently expressed solely by use of <code>&amp;fn</code>
type, Niko often uses the term <code>&amp;fn</code> closure synonymously with
stack-allocated closure.</p>

<p>(However, Niko also points out (first section of
<a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">&ldquo;Procedures, Continued&rdquo;</a>) that one can borrow a <code>@fn</code> or <code>~fn</code> to
a <code>&amp;fn</code>, so the type does <em>not</em> tell you whether you actually have a
by-reference or a copying-closure.)</p>

<p>Here is the example of an unsound function that Niko described in
his <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">Case of the Recurring Closure</a> post from 2013-04-30,
making use of higher-order functions to express a fixed-point
combinator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">R</span><span class="o">&lt;</span><span class="nl">&#39;self</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This struct is needed to create the</span>
</span><span class='line'>    <span class="c1">// otherwise infinite type of a fn that</span>
</span><span class='line'>    <span class="c1">// accepts itself as argument:</span>
</span><span class='line'>    <span class="n">c</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;self</span> <span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">R</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">innocent_looking_victim</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">vec</span> <span class="o">=</span> <span class="o">~</span><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">conspirator</span><span class="p">(</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&lt;</span> <span class="m">100</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">vec</span><span class="p">.</span><span class="n">each</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">f</span><span class="p">.</span><span class="n">c</span><span class="p">(</span><span class="o">&amp;</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">conspirator</span><span class="p">(</span><span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">R</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">R</span> <span class="p">{</span><span class="n">c</span><span class="o">:</span> <span class="n">f</span><span class="p">};</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As Niko explains, the vector <code>vec</code> is mutated while being traversed by
an iterator; this is illegal.  The closure <code>|f| { ... }</code> captures
a reference to <code>vec</code>, and Rust&rsquo;s borrow checker is not treating the argument
<code>f</code> as a potential source of aliases to <code>vec</code>, even though it does alias
<code>vec</code> because <code>f</code> ends up being bound to the closure <code>|f| { ... }</code>.</p>

<p>An important detail here is that the closure in question is
a stack-allocated closure.</p>

<p>Niko has described his solution to this problem in <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>; it would
entail adding some new rules about how <code>&amp;fn</code> closures are invoked
and passed as parameters.  One of the main changes imposed by his
solution was that <code>&amp;fn</code> closures would become non-aliasable;
this would ensure that one could not express the Y-combinator.
The restriction to ensure <code>&amp;fn</code> closures are unaliasable interacts
with other proposals, as we shall see.
(Note that Rust does have a way of expressing a non-aliasable pointer
to <code>T</code> for any <code>T</code>: <code>&amp;mut T</code>.)</p>

<h2><a id="background_dst">Background: DST</a></h2>

<p>The heart of the Dynamically Sized Types proposal is the discrepancy
described in Niko&rsquo;s <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">DST, Revisited</a> post from 2013-04-30
(published contemporaneously with <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">Case of the Recurring Closure</a>).
Niko has been wrestling with the idea for a while, as one can see on
his posts from <a href="http://smallcultfollowing.com/babysteps/blog/2012/04/23/vectors-strings-and-slices/">2012-04-23</a> and <a href="http://smallcultfollowing.com/babysteps/blog/2012/04/27/in-favor-of-types-of-unknown-size/">2012-04-27</a>.</p>

<p>In Rust, vectors (and strings, which we will treat as a special case
of vectors) come in the following forms:</p>

<ul>
<li>dynamic-length: heap-allocated, carries its length N as part of its
record structure.  Consists of some amount of meta-data, including
the length word, followed by the inline-allocated array of N
elements.  Expressed as <code>~[T]</code> and <code>@[T]</code> in Rust.</li>
<li>slice: represents a substring of a vector; consists of two words: a
pointer to the payload, and a length bound.  Expressed as <code>&amp;[T]</code> in Rust.</li>
<li>fixed-length: represents exactly N elements, where N is statically
tracked at compile-time.  Consists of just the array of elements,
<code>T[N]</code>, and nothing more.  Expressed as <code>[T, ..N]</code> in Rust.</li>
</ul>


<p>Niko points out that a slice&rsquo;s two-word representation is quite
different from the representations of the other variants.  His
proposal is to unify the first two representations, by laying out
<code>~[T]</code> and <code>@[T]</code> as pairs of words (a pointer to the boxed elements
array, and a length).
(Niko claimed that this makes a <code>~[T]</code> and <code>@[T]</code> valid slices, &ldquo;apart
from the box header&rdquo;; it seems to me like the box header is quite
relevant here, unless the idea is that when you coerce a <code>@[T]</code> to a
slice, you increment the pointer value accordingly&hellip;)</p>

<p>Then, Niko classifies the types of Rust into two categories: Sized and
Unsized; i.e., size is statically known, versus size is tracked at
runtime (maybe the letters S and R would have been more appropriate
than S and U&hellip;).  The &ldquo;unsized types&rdquo; cannot themselves be assigned
as types of local variables, and you cannot have vectors of elements
of unsized type; this all stems from the fact that &ldquo;unsized types&rdquo; do
not have a static size.
(The &ldquo;unsized types&rdquo; are arguably not actually types; we might be
well-served by referring to them as &ldquo;pretypes&rdquo; or something).
But pointers to unsized types are valid types.  Such pointers are the
pairs of words discussed above, aka &ldquo;fat pointers&rdquo;: <code>(payload, meta)</code>,
where <code>payload</code> is the pointer to the data, and <code>meta</code> is the
descriptor that includes some way to determine the size of the payload
(to support runtime bounds checks).</p>

<p>The fact that &ldquo;unsized types&rdquo; need to be treated specially leads to a
complication, discussed further in the post; how to differentiate
between type-parameterized code that works on both kinds of types,
versus typed-parameterized code that solely operates on sized types.
The method proposed in the post is to express the distinction via a
trait bound: the <code>Sized</code> bound would restrict the type parameter to
one of statically-known size; you would not be able to express
types like <code>[X, ..3]</code> (a fixed-length vector of 3 X'es), unless you
include the bound <code>X:Sized</code>.  (There is more on this restriction
and ways to ease it further down.)</p>

<p>One of the benefits of DST that Niko proposes early on is that
Traits and closures are other instances of unsized types, so that
Rust&rsquo;s type hierarchy could be presented uniformly like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>            <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>            <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">&#39;r</span> <span class="n">T</span>        <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>           <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>           <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>     <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>         <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">...</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>          <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>          <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>        <span class="c1">// existential (&quot;exists S:Trait.S&quot;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">S</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note that the actual types assigned to expressions would be instances
of <code>S</code> according to this grammar.)</p>

<h2><a id="the_problem">The Problem: DST and Closures</a></h2>

<p>So, from the &ldquo;Case of the Recurring Closure&rdquo;, we saw that
<code>&amp;fn</code> closures were to become non-copyable.
But under the DST proposal, generic code should be able to treat <code>&amp;T</code>
the same for all <code>T</code>, <em>including</em> when <code>T</code> is some <code>fn(S*) -&gt; S</code>.
These two criteria are not compatible; Niko has lots more explanation
in his corresponding post:
<a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/">&ldquo;Recurring Closures and Dynamically Sized Types&rdquo;</a>,
from 2013-05-13.</p>

<p>Niko&rsquo;s immediate proposals to resolve this were either:</p>

<ul>
<li>we write <code>&amp;mut fn</code> instead of <code>&amp;fn</code>.  <code>&amp;mut T</code> for all <code>T</code>
(including <code>fn (S ...) -&gt; S</code>) is forced to be unaliasable by the
borrow-checker, and so the hole goes away, or,</li>
<li>we change notation, and move the sigils for closures <em>after</em> the fn,
side-stepping the special treatment of <code>&amp;fn</code> versus <code>&amp;T</code> by getting
rid of <code>&amp;fn</code> and replacing it with <code>fn&amp;</code>.</li>
</ul>


<h3><a id="is_fn_too_ugly">Is fn~ too ugly?</a></h3>

<p>Niko at first favored the latter, then he wrote a second post,
<a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/">&ldquo;Mutable Fn Alternatives&rdquo;</a> on 2013-05-13,
which reconsidered whether <code>fn~</code> is too ugly, and included
new survey of the options:</p>

<ul>
<li>Maybe <code>&amp;mut fn</code> is not that bad, or</li>
<li>Maybe make <em>all</em> closures borrowed (i.e. stack-allocated), removing
the need for any sigil, or</li>
<li>Make <code>fn</code> denote stack-allocated closures,
and replace <code>fn~</code> with a new keyword, like <code>proc</code>.  (This is a variation
on the previous bullet.)</li>
</ul>


<p>For the second and third bullets, the main point is: If you need to
capture state in a manner that cannot be expressed via the available
options (stack-allocated closure, or a <code>proc</code>, if present), then you
have to use an trait instead (i.e. an object or a record).
(I personally am not thrilled about losing the option of using
closures to express combinator libraries, a use case for <code>fn@</code>.)</p>

<h3><a id="leveraging_proc">Leveraging a proc keyword/expression</a></h3>

<p>Then a third post, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">&ldquo;Procedures, Continued&rdquo;</a> from
2013-05-15, refined the <code>proc</code> proposal a bit further.  As stated in
the background on closures, Rust has by-reference closures and copying
closures; the choice of which variant to construct is based on the
type expected by the context of the <code>|x ...| { ... }</code> expression.
In this post, Niko proposed that the distinction here deserves a
starker line between the two forms.  (In that post, he proposed both a
revision to English jargon and also to the Rust syntax; I&rsquo;m going to
focus solely on the Rust syntax changes, and let those guide the
changes to my own jargon here.)</p>

<p>So Niko proposes distinguishing a by-reference closure from a copying
closure via keywords.  A stack-allocated closure would be constructed
solely via <code>fn</code>, and a copying closure would be constructed solely via
<code>proc</code>.  While discussing this proposal henceforth, I will refer to a
by-reference closure as an <code>fn</code>-closure and a copying closure as a
<code>proc</code>-closure.</p>

<p>The type hierarchy that Niko then provides for this is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>               <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>               <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">S</span>     <span class="c1">// closures (*)</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">&amp;</span><span class="n">&#39;r</span> <span class="n">T</span>           <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>              <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>              <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>        <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>            <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">...</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>             <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>             <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>           <span class="c1">// existential (&quot;exists S:Trait.S&quot;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">proc</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">S</span>   <span class="c1">// procedures (*)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, <code>fn</code>-closures are considered <em>sized types</em>, because they are
always represented by two words: a (borrowed) environment pointer (to
the stack in Niko&rsquo;s proposal, though perhaps it could be generalized
to point elsewhere) and a function pointer.  <code>proc</code>-closures are
<em>unsized types</em>, because their copied lexical environment is of some
dynamically-determined size that they must carry in their record
structure.</p>

<p>In this version of the proposal, <code>proc</code> can now be allocated to either
the exchange heap (<code>~proc</code>) or the task heap (<code>@proc</code>).  So this
brings back the ability to express combinator libraries.</p>

<p>Niko&rsquo;s post provides further detail, such as dissection of the <code>fn</code>
and <code>proc</code> closure types (which include important details like the
lifetime and trait <em>bounds</em> for the closed-over variables; this is
important since with a separate keyword, it is now reasonable for
different defaults to be chosen for two cases; useful for making the
common case succinct).  He also describes a couple variations on the
theme, including modeling <code>proc</code> closures via traits (i.e. boxed
traits are objects carrying virtual method dispatch tables), and then
expressing them via a <code>proc!</code> macro (which means they could be left
out of the core language).</p>

<h3><a id="other_ways_to_proc">Other ways to express proc</a></h3>

<p>In his next post, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/">&ldquo;Removing Procs&rdquo;</a>, Niko elaborates further
on the idea that <code>proc</code> need not be supported in the language at all.
Stack-allocated <code>fn</code>-closures would remain, expressed via <code>fn(S ...) -&gt; T</code>,
and the language already supports raw (environment-less) function
pointers via <code>extern "ABI" fn(S ...) -&gt; T</code>.
Niko points out two ways to re-express copying closures:</p>

<ol>
<li>One could pass around function pointers along with
records that carry the captured environment; this is basically
<a href="http://matt.might.net/articles/closure-conversion/">lambda-lifting</a> (the variant that turns the free variables
into fields of a single environment structure, rather than passing each
variable as a separate parameter), or</li>
<li>As stated earlier, (boxed) traits can used to express copying
closures.</li>
</ol>


<p>Niko surveyed how these patterns would look in his post, by considered
existing use cases of <code>@fn</code> and <code>~fn</code> in the standard libraries,
namely task spawning and futures.  Without more language support, the
lambda-lifting transformation requires that one list the captures
variables (at least once, though further repetitions can be avoided
via appropriate macro definitions).  I am personally hesistant to
approve of removing non stack-allocated closures wholesale, though
<em>if</em> it turns out that capture clauses are essentially unavoidable (or
if understanding behavior without them is unworkable), then my main
problem with the <code>proc!</code> macros (the explicit list of free variables)
would go away.</p>

<p>Alternatively, if the macro system were somehow extended to allow a
macro to query an expression for its free variables, then that might
help.</p>

<h4><a id="digression_on_macros">A Personal Digression on Macros</a></h4>

<p>Actually, this latter idea brings up a problem with the explicit list
of captured variables that I had not thought of before: some macros
may intentionally inject references to free variables, where the
injected free variables are not meant to be part of the public
interface of the macro (i.e., the macro is enforcing some protocol of
usage, and the variable is meant to be otherwise private to the module
where the macro is defined).  I know we do not currently have macros
exported from modules, but I thought it was supposed to be part of the
long term plans for Rust.</p>

<ul>
<li><p>Do we intend to disallow the use of such macros within copying closures?</p></li>
<li><p>Will we require the modules to expose those variable names, solely
so that they can be included on the lists of free variables?</p></li>
<li><p>Or, if a macro could query an expression for its free variables
(where even module-private identifiers might be included on such
a list), that might help impose a usage discipline that would
support a <code>proc!</code> macro,</p></li>
<li><p>Or, this whole example might serve as an argument for keeping
copying closures as a primitive linguistic construct.</p></li>
</ul>


<p>Okay, end of digression.</p>

<h3><a id="more_followup_on_procs_and_fns">More followups on procs and fns</a></h3>

<p>A few days passed, then Niko had a fourth post,
<a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">&ldquo;More on Fns&rdquo;</a>, from 2013-06-03.
This proposal renamed of a proposed <code>Task</code> trait to <code>Thunk</code>, since
Niko felt that the concept at hand (an encapsulated function and the
parameters it needs) is better reflected by that name.</p>

<p>More importantly, given the immediately preceding digression, the form
<code>thunk { ... }</code> would automatically determine the captured variables
instead of requiring an explicit list; this sidesteps the whole question
of how to handle macros that inject new free variable references.</p>

<p>There is then much discussion of whether or not to support <code>once fn</code>s,
which I won&rsquo;t summarize here.  The important detail of the post is
that we do not necessarily have to list the captured variables
explicitly.</p>

<p>After a few more days, Niko had a followup on the related topic of
dynamically sized types (DST), <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">&ldquo;Reducing DST Annotation&rdquo;</a>, from
2013-06-06.  It took into account an <a href="https://github.com/mozilla/rust/issues/6308#issuecomment-18880575">investigation</a> by Ben Blum
on the implications of a <code>Sized</code> trait bound.  This led to Niko
exploring some alternatives to adopting DST with a <code>Sized</code> bound:</p>

<ul>
<li>Abandon DST altogether: Niko summarizes what DST still buys us, but
also points out where it does not live up to its original promises.</li>
<li>Make type parameters default to <code>Sized</code>, and adopt a different
syntactic mechanism to distinguish <code>Sized</code> from <code>Unsized</code> (such as
a keyword).</li>
<li>Use some sort of inference: the type-checker can use properties
of a function&rsquo;s parameter list to provide feedback
on whether the type parameter has an implicit <code>Sized</code> bound.
(Niko wonders if this approach is too clever; I am inclined to
 affirm that it is.)</li>
</ul>


<h2><a id="where_are_we">So where are we?</a></h2>

<p>The above summarizes the series of blog posts from Niko.  I had hoped
to get through the actual proposals (and maybe also the team meeting
notes), but at this point, it is late enough in the day and this post
is long enough that I think I will stop here.</p>

<p>The language is young, and I am a Rust novice.  So, grains of salt
for everyone:</p>

<ul>
<li>My intuition is that we should leave in copying closures in some form.</li>
<li>The <code>thunk { ... }</code> expression might suffice, but &hellip; I am not yet
convinced that I would be satisfied using boxed traits
to express the cases that need input arguments (like combinator
libraries).</li>
<li>I am not thrilled by the idea of writing out lists of free
variables.  Of course, this is a systems programming language,
and such a list may simply be the simplest way to accomplish
certain goals (e.g. to indicate whether a referenced value
is moved or copied).</li>
<li>If we do require a list of free variables in our copying
<code>proc</code>/<code>thunk</code>/etc, please ensure that the question of free
variables injected by macro invocations is addressed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing syntax for associated items in Rust]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust/"/>
    <updated>2013-04-22T14:37:00+02:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#background">Background</a>

<ul>
<li><a href="#encodingunpalatable">Encoding via parameters is unpalatable</a></li>
</ul>
</li>
<li><a href="#rustspec">Rust-specific issues</a>

<ul>
<li><a href="#nikoposts">Niko&rsquo;s blog posts</a></li>
<li><a href="#thinkbinding">Simpler syntax: What about binding?</a></li>
</ul>
</li>
<li><a href="#insight">Insight</a></li>
<li><a href="#proposal">The proposed syntax for associated items in Rust</a></li>
<li><a href="#futurework">What the proposal does not cover</a></li>
</ul>


<p>Executive summary: if you don&rsquo;t want or need the background information
or the discussion motivating the proposal, then just jump
straight to the <a href="#proposal">proposal</a> itself.</p>

<h2><a id="background">Background</a></h2>

<p>Early in my experimentation with Rust, I thought a reasonable exercise
would be to take the simple C++ programs from
<a href="http://www.elementsofprogramming.com/">Elements of Programming</a> (Stepanov and McJones), which make heavy yet
disciplined use of abstraction and C++ templates to encode various
mathematical concepts.  The early chapters of the book use templates
rather than classes as the means of code reuse, so translating those
examples seemed like a good way to exercise Rust&rsquo;s generic type and
trait systems.</p>

<p>However, almost immediately after starting the experiment, I encountered
a problem: code that makes heavy use of C++ templates is quite likely
to use particular features of C++ templates that are not a universal
part of another language&rsquo;s generic type system.</p>

<p>In particular, the code from Elements of Programming (hereby
abbreviated &ldquo;EOP&rdquo; in this post) almost immediately makes use of
&ldquo;associated types&rdquo;, such as in the following definition for <code>distance</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">distance</span><span class="p">(</span><span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">x</span><span class="p">,</span> <span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Precondition: $y$ is reachable from $x$ under $f$</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">N</span> <span class="nf">n</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">N</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting thing about the above code is that it is parameterized
over one type: <nobr><code>F</code>,</nobr> but it uses other type expressions within the body
of the procedure, namely:</p>

<ul>
<li><p><code>Domain(F)</code>: this is a <code>type -&gt; type</code> operator that, given a
Transformation (which we can think of as some type classifying a
set of <code>T -&gt; T</code> functions for some type <code>T</code>), returns <code>T</code>.</p></li>
<li><p><code>DistanceType(F)</code>: this is a <code>type -&gt; type</code> operator that, given a
Transformation, returns a numeric type (think <code>uint8_t</code>,
<code>uint32_t</code>, <code>uintptr_t</code>, <code>BigNum</code>, etc) suitable for counting the
minimum number of applications of the transformation necessary to
get from any particular <code>T</code> value to some other <code>T</code> value.</p></li>
</ul>


<p>(Operators like <code>DistanceType</code>, to my mind, only makes sense when you
 look at things simultaneously in terms of bytes of memory in the
 machine and also in terms of pure abstract mathematical values.  If
 you omit either perspective, then the operator appears either
 pointless or nonsensical.)</p>

<p>It also requires that <code>F</code> obeys a constraint, specified in the
<code>requires</code> clause; I am going to conveniently ignore this detail for
now.  (The C++ code for EOP even macro-expands <code>requires(..)</code> into whitespace,
so treating them as helpful comments for the time being is not absurd.)</p>

<p>Type expressions like <code>triple&lt;A, B, C&gt;</code> (assuming three type expressions
<code>A</code>, <code>B</code>, and <code>C</code>), are the bread-and-butter of any generic type
system.  But these <code>type -&gt; type</code> operators are interesting.  How are
they implemented?  Here is a snippet from <code>type_functions.h</code> in the
EOP source code distribution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If all transformations on a type T have the same distance type,</span>
</span><span class='line'><span class="c1">// then DistanceType(T) is defined and returns that type.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For any fixed-size type T, there is an integral type of the same</span>
</span><span class='line'><span class="c1">// size that is a valid distance type for T.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define DistanceType(T) typename distance_type&lt; T &gt;::type</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is making use of a C-style macro to define a easy-to-read
interface for the <code>DistanceType</code> operator (the subset of C++ used
for EOP&rsquo;s textbook examples is meant to be LL(1)), but the implementation
of the operator is using C++&rsquo;s template system to define a partial
mapping from types to (integral) types.  One can add new entries to
this mapping by defining a new template instantiation of
<code>struct distance_type&lt;F&gt;</code>, as illustrated in <code>tests.h</code> for the following
transformation <code>gen_orbit</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">I</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">gen_orbit</span> <span class="c1">// transformation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gen_orbit_predicate</span><span class="o">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gen_orbit</span><span class="p">(</span><span class="n">I</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">N</span> <span class="n">h</span><span class="p">,</span> <span class="n">N</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Precondition: h &lt; N(MaximumValue(I)) &amp;&amp; c &lt; N(MaximumValue(I))</span>
</span><span class='line'>        <span class="c1">// Precondition: !negative(h) &amp;&amp; !negative(c)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">I</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="n">I</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">successor</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">c</span><span class="p">))</span> <span class="n">x</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">I</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="o">&lt;</span> <span class="n">gen_orbit</span><span class="o">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">N</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, the definition of <code>gen_orbit</code> (including its instantiation of
<code>distance_type</code>) collaborates with the definition of <code>DistanceType</code> to
indicate that <code>DistanceType(gen_orbit&lt;I, N&gt;)</code> is <code>N</code>.  As one adds new
structs (classes) representing other transformations, one is expected
to instantiate <code>distance_type</code> (as well as a host of other
template-abstracted structs) accordingly.</p>

<hr />

<p>So, what&rsquo;s the problem here?  Well, Rust, much like Java, does not
provide a way to define general <code>type -&gt; type</code> mappings like
<code>DistanceType(F)</code>.</p>

<p>One can try to work around this via a code transformation and lift any
type of interest up to a generic class&rsquo;s parameter list, like this
example in Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">Transformation</span><span class="o">&lt;</span><span class="n">DISTANCETYPE</span><span class="p">,</span> <span class="n">DOMAIN</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">apply</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">elem</span><span class="o">:</span> <span class="n">DOMAIN</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DOMAIN</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or if you prefer Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Transformation</span><span class="o">&lt;</span><span class="n">DISTANCETYPE</span><span class="o">,</span> <span class="n">DOMAIN</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DOMAIN</span> <span class="n">apply</span><span class="o">(</span><span class="n">DOMAIN</span> <span class="n">elem</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, one might think this does not look so bad; after all,
the <code>gen_orbit</code> struct similarly was parameterized over a domain <code>I</code>
and a distance type <code>N</code>.  However, the problem comes when one
then attempts to write a function like distance:</p>

<p>Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&lt;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">???</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">F</span> <span class="kd">extends</span> <span class="n">Transformation</span><span class="o">&lt;</span><span class="n">DT</span><span class="o">,</span> <span class="n">DOM</span><span class="o">&gt;</span> <span class="o">???</span> <span class="n">distance</span><span class="o">(???</span> <span class="n">x</span><span class="o">,</span> <span class="o">???</span> <span class="n">y</span><span class="o">,</span> <span class="n">F</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do we put in for the <code>???</code> portions?  We already established that
we do not have general <code>type -&gt; type</code> operators, so we cannot just
derive it form <code>F</code>.  And for that matter, where did <code>DT</code> and <code>DOM</code>
come from?  In Rust and Java, we cannot just make up fresh type
variables and then add constraints upon them after the fact.  The only
option is to make any type we wish to use an additional type parameter
to the generic method.</p>

<p>Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&lt;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DT</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">DT</span><span class="o">,</span> <span class="n">DOM</span><span class="o">,</span> <span class="n">F</span> <span class="kd">extends</span> <span class="n">Transformation</span><span class="o">&lt;</span><span class="n">DT</span><span class="o">,</span> <span class="n">DOM</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>    <span class="n">DT</span> <span class="n">distance</span><span class="o">(</span><span class="n">DOM</span> <span class="n">x</span><span class="o">,</span> <span class="n">DOM</span> <span class="n">y</span><span class="o">,</span> <span class="n">F</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="encodingunpalatable">Encoding via parameters is unpalatable</a></h3>

<p>The Rust and Java results above are made barely readable by using
short (obscure) parameter names.  More troubling is the fact that this
pollution of the parameter list will bubble transitively backwards
through the callers of <code>distance</code> until we reach the point where <code>F</code>
is instantiated.  Any use of <code>Transformation</code> needs to be
parameterized in the same manner.</p>

<p>It also makes explicit instantiation of a parameterized method or
class quite painful.  (This pain is somewhat alleviated in the
presence of type-inference, at least in terms of what text ends up in
the final code, but I argue that that in this case the pain has in
fact been <em>shifted</em>: instead of having pain while reading the code,
one instead suffers when trying to wade through type-errors that
inevitably arise during the compile-edit cycle.)</p>

<p>If anything, the above presentation <em>understates</em> the problem, since:</p>

<ol>
<li><code>Transformation</code> has only one argument in its domain, and its codomain
 is the same as its domain; many real traits with associated types
 are each likely to require multiple parameters.</li>
<li>The above example has direct uses of <code>DOM</code> and <code>DT</code> in the domain
 and codomain, respectively, of <code>distance</code>.  However, <em>every</em> client
 of <code>Transformation</code> will be forced to be parameterized over <code>DOM</code>
 and <code>DT</code>; while it is likely that any client of <code>Transformation</code> is likely
 to need to refer to the type <code>DOM</code>, many are likely to not require
 use of the distance type <code>DT</code> in their public interface or even in
 the internals of their code.  Thus, our abstraction is not very abstract
 at all.</li>
<li>As a follow-on to the previous point: We are only illustrating
 <em>one</em> added concept: <code>DistanceType</code>; each additional concept
 would require a new type parameter to be threaded through the
 parameter lists of all methods and classes.  This blows up to an
 unmaintainable mess fairly quickly, discouraging use of generics
 to define these abstractions (and instead relying on
 e.g. separate class-hierarchies).</li>
</ol>


<hr />

<h2><a id="rustspec">Rust-specific issues</a></h2>

<p>I encountered this problem while porting EOP code to Rust.  After
wrestling with the type parameter lists for a while, I eventually
wised up and asked on the #rust IRC channel if there was a better
option.  Tim Chevalier informed me of the relevant terminology:
the feature I want is called &ldquo;associated types access&rdquo; (or often just
&ldquo;associated types&rdquo;).
An associated type specifies a mapping from some type to another type.</p>

<p>&ldquo;Associated type access&rdquo; is listed as one of eight properties considered important in
&ldquo;<a href="http://osl.iu.edu/publications/prints/2003/comparing_generic_programming03.pdf">A comparative study of language support for generic programming</a>&rdquo;
(Garcia et al., 2003 <a href="http://dl.acm.org/citation.cfm?id=949317">ACM</a>).
If you found <a href="#encodingunpalatable">the argument above</a> unconvincing,
you should read the Garcia paper for a completely different example motivated by
a Graph abstraction.</p>

<p>After I read the Garcia paper, I promptly filed <a href="https://github.com/mozilla/rust/issues/5033">an RFC</a> on the
Rust github repository requesting support for Associated Type
Synonyms.  After this, I had several discussions with Niko Matsakis,
both over IRC and in person, on the problems that associated types
present for Rust.</p>

<h3><a id="nikoposts">Niko&rsquo;s blog posts</a></h3>

<p>You can see Niko&rsquo;s thorough overview of the matter,
including his natural generalization of the topic from &ldquo;associated
types&rdquo; to &ldquo;associated <em>items</em>&rdquo;, on his pair of blog posts (<a href="http://www.smallcultfollowing.com/babysteps/blog/2013/04/02/associated-items/">part
I</a>, <a href="http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/">part II</a>).  The generalization to &ldquo;associated items&rdquo;
enables one to define, in addition to <code>type -&gt; type</code> mappings as
illustrated <a href="#background">above</a>, also <code>type -&gt; function</code>
mappings (called in some languages &ldquo;static&rdquo; functions) and <code>type -&gt;
(constant) value</code> mappings, which may enable certain interesting
coding patterns, such as allowing a type representing a vector in a
multi-dimensional space to state, statically, how many dimensions
it carries.</p>

<p>The following are the specific points that Niko makes in his posts (some of
are just pointing out artifacts of current Rust language syntax).</p>

<h3>Current Rust syntax focuses on deriving associated functions from traits</h3>

<p>Rust does not currently offer general associated items, but it does
offer a kind of associated function access.</p>

<p>If a trait <code>T</code> defines a function <code>f</code> that returns <code>Self</code> (which means
that implementations of <code>T</code> are obligated to provide an implementation
of <code>f</code>), and one has a type <code>X</code> implementing that trait, then one can
derive <code>f</code>.</p>

<p>But in current Rust syntax, one does not write this derivation of <code>f</code>
as something attached to the type <code>X</code>; instead, one writes <code>T::f(..)</code>,
and the compiler is responsible for inferring which implementation of
the function <code>f</code> one is referring to, by using type-inference on the
context of the invocation <code>T::f(..)</code> to determine that the return type
of <code>f</code> must be <code>X</code> (and thus the <code>f</code> in question must be the one that
the type <code>X</code> implements to satisfy the obligation established by the
trait <code>T</code>).</p>

<h4><a id="nikoenctt1">Resolving ambiguities in general implies you need both the trait and type</a></h4>

<p>The choice of deriving a function&rsquo;s implementation from the trait
rather than the type is understandable when one considers that a
software system may have multiple traits <code>T</code>, <code>U</code>, <code>V</code>, &hellip; that all
define a function of the same name (say <code>f</code>), and a type may be
specified as implementing more than one of these traits in a single
piece of code.  (It would be anti-modular to require every trait to
choose globally unique names for its set of associated functions).  So
to handle this case, one must provide some way to disambiguate which
<code>f</code> is being referenced.  Rust did so by making the trait expression
part of the invocation syntax.  Niko points out that if one switches
to a syntax where one derives <code>f</code> from the type
<code>X</code> (e.g. <nobr>&ldquo;<code>X::f</code>&rdquo;</nobr>) then one must tackle this problem in
some manner; in his first blog post, he suggests doing so by allowing
one to encode both the type and the trait in the referencing syntax
(e.g. <nobr>&ldquo;<code>X::(T::f)</code>&rdquo;</nobr> or <nobr>&ldquo;<code>X::(U::f)</code>&rdquo;</nobr>.</p>

<p>I dislike this syntax because I think it
would be confusing for a reader to comprehend the distinct roles of
the <nobr>&ldquo;<code>::</code>&rdquo;</nobr> path operator, both when learning the language
and when casually skimming Rust code in general.</p>

<h4>Rust type expressions do not naturally fit into Rust path expressions</h4>

<p>Niko also points out that when one wants to write <code>X::f</code> where <code>X</code> is
a type, it is not always the case that <code>X</code> is a type parameter; it
could be a concrete type known to the programmer, such as the type of
owned vecs of ints, denoted by the type expression</p>

<nobr>`~[int]`.</nobr>


<p> So it seems natural to want to substitute such
a type expression for (the meta-variable) <code>X</code>.</p>

<p>But the syntax <code>~[int]::f</code> is not legal, because <code>~[int]</code> is
not a legitimate path component.  Niko describes a couple of
work-arounds, e.g. allowing one to wrap a type expression that appears
in a path expression with brackets, yielding: <code>&lt;~[int]&gt;::f</code>.</p>

<p>All of the work-arounds presented by Niko do require allowing
arbitrary type-expressions in some form to appear as a sub-expression,
which would complicate the parser in the Rust compiler (there has been
a slight push to try to <em>simplify</em> the path expression syntax, which
this would conflict with).</p>

<h4>Further syntactic exploration of encoding trait and type</h4>

<p>In his second blog post, Niko provides some alternative syntactic forms
for resolution:</p>

<ul>
<li><p><code>X::(T::f)</code>, as described <a href="#nikoenctt1">above</a>.</p></li>
<li><p><code>T::f::&lt;X&gt;</code> (from &ldquo;Functional-style name resolution (take 1)&rdquo;); here
<code>X</code> is a synthetic type parameter added to the type parameter list
(if any) of <code>f</code>; so now we get to retain syntactic backwards
compatibility.  Since Rust allows one to omit the explicit type
instantiation <code>::&lt;X, ...&gt;</code> when the compiler is able to infer
the instantiation, this would be a natural way to continue
doing return-type based inference of the desired type, the way
it does already.</p></li>
<li><p><code>T::f::&lt;for X&gt;</code> as a way of distinguishing the synthetic parameter
from other entries on the parameter list.</p></li>
</ul>


<p>I have already stated my problems with the first option.</p>

<p>For the second option, I anticipate being personally confused by the
synthetic type parameter being injected into the type parameter list.
I understand the appeal of enabling the compiler to continue doing
heavy lifting and lighten the programmers syntactic load.  <a href="http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/">Niko&rsquo;s
post</a> does a good job of laying out some of the unexpected
interactions of the synthetic type parameter with the other forms of
generic type parameterization.</p>

<p>The third option would reduce confusion somewhat, since the
synthetic parameter would receive special attention at points of type
instantiation, but I still think it is an abuse of the parameter list.</p>

<h3><a id="thinkbinding">Simpler syntax: What about binding?</a></h3>

<p>So I set about trying to come up with another syntactic form
for associated item access.  My primary focus initially was:
all of these examples would be so much simpler, to my mind,
if we were able to go back to using a single identifier
for the relevant path component in the referencing form,
the way that C++ uses <nobr><code>C::f</code>.</nobr>
How can Rust make its own analogous <nobr><code>R::f</code></nobr> (the &ldquo;R&rdquo; is for Rust).</p>

<p>Of course, we have already covered that this will be ambiguous if
<code>R</code> is a mere type (and it is of course ambiguous if <code>R</code> is just a trait).</p>

<p>But what if <code>R</code> is a way of referring to the type <code>X</code> and the trait <code>T</code>
together: the (type, trait) pairing (X,T)?  Clearly once one specifies the
pair, then it is easy to tell what items are associated with the pair.
Even a human without a sophisticated IDE would know in that case to try
invoking <code>grep</code>, searching for <code>impl T.* for X.*</code>; a compiler can do even better.</p>

<p>Another way of looking at this: What if we could introduce local names
for the impl that corresponds to the (type, trait) pairing.</p>

<p>So I started working on ideas all centering around a declaration
form like <code>let R = trait T for type X;</code> or <code>use impl R = T for X</code>
and other variations (I think Patrick Walton actually deserves credit
for that last one; we will revisit it later).  But Niko quickly pointed
the huge failing of all of these declaration forms: a very common
use case for associated <em>types</em> (remember, that was our original goal)
is for function signatures, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">),</span> <span class="n">y</span><span class="o">:</span> <span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">),</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">remove_edge</span><span class="o">&lt;</span><span class="n">G</span><span class="o">:</span> <span class="n">IncidenceGraph</span> <span class="o">+</span> <span class="n">EdgeCollection</span><span class="o">&gt;</span><span class="p">(</span><span class="n">g</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">G</span><span class="p">,</span> <span class="n">e</span><span class="o">:</span> <span class="n">Edge</span><span class="p">(</span><span class="n">G</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>Domain(F)</code>, <code>DistanceType(F)</code>, and <code>Edge(G)</code> are replaced
with appropriately Rust-friendly syntactic forms.  There is no <em>place</em>
there to put a declaration form <code>let ...</code> or <code>use ...</code> that refers to
<code>F</code>.  The same applies for other parameterized forms, such as structs,
enums, and traits.</p>

<p>So, back to the drawing board.</p>

<hr />

<h2><a id="insight">An Insight</a></h2>

<p>Even though my attempt to solve this problem via a declaration form had
failed, I continued to focus on the fact that associated item access
is all about the (type, trait) pairing.  So how could I surmount the
parameterized signature wall?</p>

<p>After reflecting on the parameterized signature itself, I said, &ldquo;where
is a natural place to put a binding from an identifier to a (type,
trait) pair?&rdquo;  And this reduced to &ldquo;where does the (type, trait) pair
come from?&rdquo;  This was my insight: The parameterized signature</p>

<nobr>`<X: T>`</nobr>


<p> <em>itself</em> is where the pairing is defined;
(or in the case of <nobr><code>&lt;X: T + U&gt;</code></nobr>: <em>pairings</em>).</p>

<p>My only problem was to put the identifier binding in there.  Once I
saw the pairing waiting right in the parameter list, the place for the
identifier became clear: in-between the type and the trait:</p>

<nobr>`<X: R=T>`</nobr>


<p> binds <code>R</code> to the <code>impl T for X</code>;
for multiple traits, we have <nobr><code>&lt;X: R=T + R2=U&gt;</code></nobr>,
where <code>R</code> is bound as above, and <code>R2</code> is bound to the <code>impl U for X</code>.</p>

<p>And now we can consider writing our examples like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">F</span><span class="o">:</span> <span class="n">T</span><span class="o">=</span><span class="n">Transformation</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">::</span><span class="n">DistanceType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">remove_edge</span><span class="o">&lt;</span><span class="n">G</span><span class="o">:</span> <span class="n">IncidenceGraph</span> <span class="o">+</span> <span class="n">EC</span><span class="o">=</span><span class="n">EdgeCollection</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">g</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">G</span><span class="p">,</span> <span class="n">e</span><span class="o">:</span> <span class="n">EC</span><span class="o">::</span><span class="n">Edge</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other cute insight is this: the only time we need to add these
identifiers explicitly is when there are multiple trait bounds.
When there is a single trait bound <nobr><code>&lt;X:R=T&gt;</code></nobr>, the
identifier <code>X</code> is just as reasonable (or at least unambiguous) as <code>R</code>
is as a way to reference the impl.  So why not treat</p>

<nobr>`<X:T>`</nobr>


<p> as an abbreviation for <nobr><code>&lt;X:X=T&gt;</code></nobr>:
boom!  The biggest potential complaint with this extension (namely,
the notational complexity of making people pepper their code with
explicit bindings of the impls) goes away!  And our first example becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&lt;</span><span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">F</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">F</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">F</span><span class="o">::</span><span class="n">DistanceType</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(our second example remains unchanged, since <code>G</code> has two trait bounds there, and
so <code>G</code> alone cannot unambiguously denote a (type, trait) pair.</p>

<p>Note also that this binding form does not suffice on its own; in
particular, if one wants to introduce a binding for a (type,trait)
pairing that does not appear in the generic parameter bounds of the
signature.  But the latter is exactly the case that <em>is</em> handled by a
declaration form such as those <a href="#thinkbinding">proposed earlier</a>!</p>

<p>So neither solution suffices on its own, but the two together cover
many use cases of interest.</p>

<hr />

<h2><a id="proposal">The proposed syntax for associated items in Rust</a></h2>

<p>So, with that insight explained, here is my proposal for associated items:</p>

<ol>
<li><p>A trait can now declare names for things besides methods.
 In terms of the grammar that John has been working on:</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_method* RBRACE ;
</code></pre>

<p> is replaced with</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_item* RBRACE ;
 trait_item: trait_method | trait_constant | trait_type
 trait_type: TYPE ident (generic_decls)? SEMI
           | TYPE ident (generic_decls)? COLON boundseq SEMI ;
 trait_const: STATIC ident COLON ty SEMI ;
</code></pre></li>
<li><p>The identifier bound by a trait types is in scope of its enclosing
 trait; trait method declarations and trait const declarations
 can reference it.</p></li>
<li><p>Extend the Rust grammar to allow an optional binding of
 an identifier to a (type, trait) pair in a type parameter bound.
 In terms of the grammar:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | obsoletekind ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | ident = trait | obsoletekind ;
</code></pre></li>
<li><p>Extend the Rust grammar to allow a declaration binding
 an identifier to a (type, trait) pair.
 In terms of the grammar, I <em>think</em> this is close to what I want:</p>

<pre><code class="`"> view_item : attrs_vis use ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> view_item : attrs_vis use | USE impl ident = trait for ty ;
</code></pre>

<p> Of potential interest, we do not allow visibility attributes
 on <code>use impl R = T for X;</code>, because these definitions are always
 local shorthands and thus private to the module.  (Maybe in
 the future we will see motivation to allow the bindings to
 be exposed, but I have not yet seen a motivation for this.)</p>

<p> I am not attached to the particulars of the syntax above;
 in particular, if someone wants to throw in the <code>trait</code>
 and/or <code>type</code> keywords into the above to make the purpose
 all the more clear, I will not object.  More so if it is
 somehow <em>necessary</em> for disambiguation, but I do not
 anticipate that being the case.</p></li>
<li><p>A bound of the form <code>R=T</code> (<code>ident = ty</code>) in the context of a <code>ty_param</code>
 production <code>X : ... [] ...</code> (<code>ident COLON bound + ... + [] + ... + bound</code>)
 (where <code>[]</code> denotes the contextual hole that the <code>R=T</code> is plugged into)
 is treated as binding <code>R</code> to the code defined by the <code>impl T for X</code>.
 The scope of the binding for <code>R</code> encompasses: the rest of the boundseq
 (to the right of the <nobr><code>"R=T"</code></nobr>) and the remainder of this decl
 that follows the generic_decls within which the <nobr><code>R=T</code></nobr> bound appears.</p></li>
<li><p>This binding of <code>R</code> can shadow earlier bindings of the same identifier
 (either other impl-bindings, or module names).  It seems like this
 should be a reasonable thing to signal via a lint-warning.</p></li>
<li><p>A path identifier component can now be an <code>R</code>, binding an <code>impl T for X</code>.</p>

<p>So one can access trait items (see trait_item above) as R::item.
 Associated items can be type-parametric whenever the corresponding
 item could be type-parameteric when exported from a module.</p></li>
<li><p>A boundseq with a single bound of variant <code>ty</code> above, where ty is
 itself of the form <code>ident</code> (i.e. the <code>&lt;X:T&gt;</code> case) is implicitly
 expanded into <code>&lt;X:X=T&gt;</code>.</p></li>
</ol>


<hr />

<h2><a id="futurework">What the proposal does not cover</a></h2>

<p>There are cases of interest that are not covered by the above proposal.</p>

<p>Most obvious to me are situations where one wants to describe mutual
constraints <em>between</em> the items associated with type parameters.
(An example of this is provided by the <code>gen_orbit</code> example with
the constraint <code>DistanceType(I) = N</code>, and more generally much of the
content of the <code>requires(..)</code> clauses from EOP that I deliberately
ignored).  For the examples from EOP, C++ handles this by doing the
template instantiation blindly and applying the type checker to
code after concrete types have been substituted for the parameters;
this approach is not compatible with Rust&rsquo;s design where we want to
type-check a generic body of code in terms of the guarantees provided
by the trait-bounds, <em>not</em> delaying those checks until after
the concrete types have been plugged in.</p>

<p>Also, in the changes I proposed above to the Rust grammar (and
somewhat implicitly to its semantics), I deliberately constrained my
focus to the cases Niko described in his blog posts: types, functions,
and constants.  But one might consider further extensions, such as
allowing traits to define <em>other</em> traits.  (I found that subject hard
to wrap one&rsquo;s mind around, and I wanted to keep the focus limited for
Rust 1.0; we can leave generalizations of this approach for after Rust
1.0.)</p>

<p>Also, I&rsquo;m not sure whether there is need and/or utility in further
generalizing this topic to <a href="http://www.haskell.org/haskellwiki/GHC/Type_families#An_associated_data_type_example">associated data families</a>.  Again,
I want to limit the scope of the work to something we believe we can
accomplish for Rust 1.0.</p>

<p>What else have I missed?  Let me know, leave a comment.  (Or look
for me in the #rust irc channel.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better command completion in bash on OS X]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/04/12/better-command-completion-in-bash-aka-resolving-zsh-envy/"/>
    <updated>2013-04-12T07:57:00+02:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/04/12/better-command-completion-in-bash-aka-resolving-zsh-envy</id>
    <content type="html"><![CDATA[<p>(This post started as a personal e-mail to Niko, and then I figured it
was blog worthy.)</p>

<p>There&rsquo;s plenty of problems when working atop &ldquo;OS X&rdquo;;
but no need to be jealous of Shu&rsquo;s zsh setup
(at least not for its tab-completion on git stuff),
at least not if you are already using Homebrew.
Just install
<a href="http://blog.jeffterrace.com/2012/09/bash-completion-for-mac-os-x.html">brew&rsquo;s bash completion package</a>!</p>

<p>Executive summary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% brew install bash-completion
</span><span class='line'>
</span><span class='line'>% <span class="nb">echo</span> &gt;&gt; ~/.bash_profile <span class="s">&lt;&lt;END</span>
</span><span class='line'><span class="s">  if [ -f $(brew --prefix)/etc/bash_completion ]; then</span>
</span><span class='line'><span class="s">    . $(brew --prefix)/etc/bash_completion</span>
</span><span class='line'><span class="s">  fi</span>
</span><span class='line'><span class="s">END</span>
</span></code></pre></td></tr></table></div></figure>


<p>And voilà!</p>

<p>See also potentially related topics from <a href="http://superuser.com/questions/288438/bash-completion-for-commands-in-mac-os">super user</a>, <a href="http://stackoverflow.com/questions/14970728/homebrews-git-not-using-completion">stack overflow</a>, <a href="http://milkbox.net/note/brace-completion-in-snow-leopard-upgrading-bash/">milkbox blog</a>.</p>

<hr />

<p>Note also that I did burn myself by trying to get too smart: In
particular, after reading <a href="http://stackoverflow.com/questions/14970728/homebrews-git-not-using-completion">stack overflow</a>, I over-eagerly
attempted to address a purported problem by installing the homebrew
newer git instead of the default (older) built-in git installed by
Apple.</p>

<p>This was a little more painful than I expected, because there were a
bunch of git-related commands already in my <code>/usr/local/bin</code>, probably
I had likely already copied git to there once before by hand, and so
brew kept aborting the installation because it did not want to
overwrite the binaries that it was not already managing.  I think brew
was aborting the install in a sound transactional manner, but I am not
100% sure of that, because at least one point the command completion
stopped working and at that point I just</p>

<ol>
<li>gave up on understanding where everything came from,</li>
<li>moved the non-brew git-related material
in <code>/usr/local/bin/</code> out of the way, and</li>
<li>redid the <code>brew install git</code></li>
</ol>


<hr />

<p>Anyway, I should also give a shout-out to Axel Hecht; his post
on Mozilla&rsquo;s Yammer instance is what got me to the point of even
attempting to install this piece of marvelousness.</p>

<p>(Also, further posts on yammer are lightly pushing for readers to consider
zsh as an alternative to bash.  I do not think I am ready to switch to zsh,
but I can at least link to the <a href="http://friedcpu.wordpress.com/2007/07/24/zsh-the-last-shell-youll-ever-need/">blog post arguing for zsh</a>.)</p>

<hr />

<p>Update (written 2013 april 16): Now that I have decent command/context
sensitive completion in bash in my terminal, of <em>course</em> I
want to have it in my Emacs <code>M-x shell</code> as well.  At first I
was dismayed that I did not just get that &ldquo;out of the box&rdquo;;
then I was happy after some googling to discover:
<a href="https://github.com/szermatt/emacs-bash-completion">bash-completion.el</a>, which forwards the completion
requests onto a separate bash process, so that one inherits
the same completions that bash provides in the terminal,
with no Emacs hacking.</p>

<p>Well, at least, not very much Emacs hacking.</p>

<p>It turns out that I had to do a little bit of Emacs hacking
in order to get the setup working, at least for my idiosyncratic
bash setup.  In particular, it seems like the Elisp code
for bash-complete.el assumes that one is setting one&rsquo;s
prompt via the <code>PS1</code> environment variable, while mine is often
set via the <code>PROMPT_COMMAND</code> environment variable.
After determining what is going on, it is easy enough to fix this (and
the corresponding solution has even been filed as a <a href="https://github.com/szermatt/emacs-bash-completion/pull/2">pull request in
the github repo</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rusty Chain Puzzle 1.]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/03/26/rusty-chain-puzzle-1/"/>
    <updated>2013-03-26T10:28:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/03/26/rusty-chain-puzzle-1</id>
    <content type="html"><![CDATA[<p>I have been trying to get my feet wet programming in
<a href="http://www.rust-lang.org/">Rust</a>.</p>

<p>A month and a half ago, I thought &ldquo;Maybe I will hack up an Earley
parser in a variety of languages, including Rust.&rdquo;  That sent me down
a long path of learning about how Earley parsing works; I have not yet
written up my results from that investigation, and I still have not
written the Rust version of the code.</p>

<p>Last weekend, I sat down and said, &ldquo;Let&rsquo;s try a simpler goal: A couple
simple exercies, maybe taken from Knuth&rsquo;s
<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html">TAOCP</a>&rdquo;
This was indeed a much simpler goal, but it was more difficult than
I had expected.</p>

<p>So, here is a Rust hacking puzzle that I struggled with.</p>

<p>I am representing piles of playing cards via linked structures.
Here are the data structure declarations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">card_suit</span> <span class="p">{</span> <span class="n">clubs</span><span class="p">,</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">hearts</span><span class="p">,</span> <span class="n">spades</span> <span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">card_suit</span><span class="p">,</span>
</span><span class='line'>              <span class="n">rank</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span> <span class="c1">// 1..13</span>
</span><span class='line'>              <span class="n">next</span><span class="o">:</span> <span class="nb">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>next</code> field is an (optional) <em>owned</em> pointer to the
next card in the pile.  <code>Option&lt;~card&gt;</code> will be generally used to
represent a potentially empty pile (or &ldquo;stack&rdquo;, &ldquo;deck&rdquo; or &ldquo;hand&rdquo;, as
the context dictates), while <code>~card</code> is a non-empty pile (or, when its
<code>next</code> is <code>None</code>, a single card, again as context dictates)</p>

<h2>The goal</h2>

<p>I want to write four functions: <code>place_top</code>, <code>place_bot</code>, <code>pop_top</code>,
and <code>pop_bot</code>, which respectively:</p>

<ul>
<li><p><code>place_top(stack, c)</code> pushes a card <code>c</code> onto the top of the stack,
represented by return the new top of the stack.</p></li>
<li><p><code>place_bot(stack, c)</code> places a card beneath the stack.  For an empty
stack, the placed card is returned as the top of the newly formed
stack; otherwise, the old stack top is returned (since the stack is
imperatively modified).</p></li>
<li><p><code>pop_top(stack)</code> pops the top of the stack, returning a tuple of the
popped card and the remaining, potentially empty stack.</p></li>
<li><p><code>pop_bot(stack)</code> removes the bottom of the stack (i.e. &ldquo;deals from
the bottom of the deck&rdquo;), returning a tuple of the removed card and
the new, potentially empty stack.</p></li>
</ul>


<p>In code, here are the signatures for the desired functions,
as well as one-line reminders of the behavior for each.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// [c1, ..., cN], cX -&gt; [cX, c1, ..., cN]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">place_top</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="nb">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">newcard</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [c1, ..., cN], cX -&gt; [c1, ..., cN, cX]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">place_bot</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="nb">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">newcard</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [c1, c2, ..., cN] -&gt; (c1, [c2, ..., cN])</span>
</span><span class='line'><span class="k">fn</span> <span class="n">pop_top</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">~</span><span class="n">card</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [c1, ..., cN-1, cN] -&gt; (Some(cN), [c1, ..., cN-1])</span>
</span><span class='line'><span class="k">fn</span> <span class="n">pop_bot</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">~</span><span class="n">card</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(Some non-critical helper infrastructure follows, showing off Rust as language)</h2>

<p>Here is some example code that puts together a hand and does
a few manipulations using the above operations (as well as
some printing routines to make looking at these cards nicer
in the terminal output)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">make_hand</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">clubs</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">10</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="nb">None</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">spades</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="nb">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="nb">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">hand</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">:</span> <span class="o">~</span><span class="n">card</span> <span class="o">=</span> <span class="n">make_hand</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;initial hand: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">AceD</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span><span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="nb">None</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">AceD</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;place top: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">place_top</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="n">AceD</span><span class="p">);</span>
</span><span class='line'>    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">SixD</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span><span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">6</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="nb">None</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">SixD</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;place bot: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">place_bot</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="n">SixD</span><span class="p">);</span>
</span><span class='line'>    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">top</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="o">=</span> <span class="n">pop_top</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span>
</span><span class='line'>    <span class="n">top</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;popped top: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">rest</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">bot</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="o">=</span> <span class="n">pop_bot</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bot</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;popped bot: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">rest</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Below are &quot;just&quot; some notation niceties that should not effect</span>
</span><span class='line'><span class="c1">// the semantics of the code + algorithms above.</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="nb">ToStr</span> <span class="k">for</span> <span class="n">card_suit</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="kt">str</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="bp">self</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">spades</span>   <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2664</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hearts</span>   <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2665</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="o">&amp;</span><span class="n">diamonds</span> <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2666</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clubs</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2667</span><span class="s">&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="n">r</span><span class="o">:</span><span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="kt">str</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">r</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">1</span>     <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;A&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="m">2.</span><span class="p">.</span><span class="m">10</span> <span class="o">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">to_str</span><span class="p">(),</span>
</span><span class='line'>        <span class="m">11</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;J&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="m">12</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;Q&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="m">13</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;K&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">_</span>     <span class="o">=&gt;</span> <span class="n">fail</span><span class="o">!</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">card</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="kt">str</span> <span class="p">{</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">report</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">prefix</span><span class="o">:</span> <span class="o">~</span><span class="kt">str</span><span class="p">)</span> <span class="p">{</span> <span class="n">io</span><span class="o">::</span><span class="nb">println</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">to_str</span><span class="p">());</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="nb">ToStr</span> <span class="k">for</span> <span class="n">card</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="kt">str</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">rank_to_str</span><span class="p">()</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">to_str</span><span class="p">();</span>
</span><span class='line'>        <span class="k">match</span> <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">next</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="nb">None</span> <span class="o">=&gt;</span> <span class="p">(),</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="nb">Some</span><span class="p">(</span><span class="k">ref</span> <span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">n</span><span class="p">.</span><span class="n">to_str</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">ret</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my terminal, I get the following output from the above <code>main</code>
function:</p>

<p>initial hand: 2&diams;,3&spades;,10&clubs;<br/>
place top: A&diams;<br/>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;<br/>
place bot: 6&diams;<br/>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;,6&diams;<br/>
popped top: A&diams;<br/>
new hand: 2&diams;,3&spades;,10&clubs;,6&diams;<br/>
popped bot: 6&diams;<br/>
new hand: 2&diams;,3&spades;,10&clubs;</p>

<p>(I will post my initial &ldquo;solution&rdquo; to the puzzle in a follow-up post;
 I wanted to share this first because I know my current solution
 is non-optimal and wanted to see what others had to offer for how
 to solve this first.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit versus Explicit Finalization]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/01/29/implicit-versus-explicit-finalization/"/>
    <updated>2013-01-29T22:47:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/01/29/implicit-versus-explicit-finalization</id>
    <content type="html"><![CDATA[<p>(This post is largely a response to Niko Matsakis&rsquo;s blog post
<a href="http://smallcultfollowing.com/babysteps/blog/2013/01/17/destructors-and-finalizers-in-rust/">Destructors and Finalizers in Rust</a>.  I started composing it as a comment there,
but eventually realized I needed more breathing room.)</p>

<p>I agree wholeheartedly with Niko&rsquo;s statement that the Boehm paper
<a href="http://www.hpl.hp.com/techreports/2002/HPL-2002-335.html">&ldquo;Destructors, Finalizers, and Synchronization&rdquo;</a> is a really nice
discussion of this topic.
However, a significant portion of the destructor/finalizer design space is
only briefly discussed in that paper, and I worry that Niko&rsquo;s post overlooks
it.</p>

<p>There are designs that do not run finalizers directly from the garbage
collection process (whether that collector be a coroutine with the mutator, or
a concurrently running thread), and instead run finalization code
at explicit points in the code of the mutator (or mutator threads).</p>

<p>To me, such an approach seems appropriate for systems-level programming;
it seems to align with the spirit of giving the programmer access to the set of
knobs they need for explicit sequencing and resource management (or rope
to hang themselves with).</p>

<h2>Explicit Cleanup</h2>

<p>In the <a href="http://www.cs.indiana.edu/~dyb/pubs/guardians-pldi93.pdf">guardian</a> and <a href="http://www.oracle.com/technetwork/articles/javase/finalization-137655.html">reference-queue</a> family of systems (see
also <a href="http://docs.racket-lang.org/reference/willexecutor.html">wills and executors</a>), resource cleanup code is no longer asynchronously
run by the GC.  Instead, cleanup is the obligation of the
mutator.  The only asynchronous cleanup action of the garbage collector
is to add entries to the appropriate guardians/reference queues (that is, the
queues associated with an object that has been appropriately registered and
subsequently discovered to be unreachable).</p>

<p>I have included a more explicit description of what a Guardian API is like in
the appendix at the end of this blog post, in case the previous paragraph was
too terse.</p>

<p>With such an API in hand, developers can build <a href="http://repository.readscheme.org/ftp/papers/sw2010/02-hsu.pdf">libraries</a> that one can
plausibly reason about, in a single- or multi-threaded context.</p>

<p>To be fair: Boehm <em>does</em> address these approaches briefly; see the beginning
of section 3.5.1 of his paper, &ldquo;Explicit Finalizer Invocation&rdquo;.  However,
he also mixes them in with Java&rsquo;s <code>System.runFinalization()</code> and the motivation
for that method.  Thus one must take care to distinguish which of Boehm&rsquo;s complaints
apply to all explicit finalization systems, and which apply solely to systems
such as Java with <code>runFinalization</code> that provide a mix of explicit and implicit finalization.</p>

<h2>Passing the Buck</h2>

<p>One important characteristic (some might say &ldquo;drawback&rdquo;) of explicit
finalization approaches is that the mutator does need to periodically process
its associated guardians/reference queues.  After all, with the transfer of
responsibility for cleanup from the collector to the mutator, the mutator must
meet this obligation eventually.</p>

<p>One standard way to do this is to sprinkle cleanup code (i.e. &ldquo;check if
guardian has entries; if so, process some of them&rdquo;) at points in the control
flow of library routines using that guardian.  (In other words, in languages
with guardians, library designers can hopefully isolate the cleanup code behind the interface of the library that
requires such cleanup.)</p>

<p>In fact, since there are distinct guardians/reference-queues, one can
prioritize the scheduling (i.e. frequency and incremental-cost) of the
cleanups according to the characteristics of individual libraries, within the
mutator.  Contrast this against relying on the scheduling of the garbage collector with its
single finalization queue for the whole heap.</p>

<p>The two main problems with explicit cleanup from my point of view are:</p>

<ol>
<li><p>ensuring that the necessary processing does <em>eventually</em> happen
(i.e. prevent resource leaks when control does not often (or ever) flow back into the
developer&rsquo;s library utilizing the guardian), and</p></li>
<li><p>inserting finalizer invocations across the code of a library detracts
from its readability; they are a clear example of a cross-cutting concern that
should be factored into its own &ldquo;aspect.&rdquo;</p></li>
</ol>


<p>Boehm essentially covers both of the points above (though on first reading I
only interpreted him as describing the second point):</p>

<blockquote><p>This appears to be the safest way to handle finalization in single-threaded
code, although it has some clear disadvantages in certain contexts:
Potentially large amounts of code, especially long running routines, must be
explicitly sprinkled with finalizer invocations.</p></blockquote>

<p>In the very worst case, in a &ldquo;normal&rdquo; imperative language with concurrent
threads, these last two drawbacks could be addressed by the client-developer:
the client-developer can set their associated cleanup code to run on a
distinct thread (that the <em>mutator</em> manages, not the garbage collector).  This
avoids the ugly sprinkling/cross-cutting of concerns, and should ensure that
cleanup does eventually occur (assuming correctly-written multi-threaded code,
&ldquo;ha ha&rdquo;).</p>

<p>Of course, that last suggestion is essentially reimplementing the GC&rsquo;s
finalizer thread as a mutator process.  But nonetheless, in principle this
could be implemented as a library, as long as the appropriate primitives are
available underneath.</p>

<p>By making explicit finalization expressible as a library,
the developer community would be free to propose competing API&rsquo;s
and implementations.  That seems like a good thing for a young
experimental language.</p>

<p>(One <em>might</em> even be able to develop finalization
libraries that are &ldquo;composable&rdquo;, in the sense that different finalization
libraries could be used by distinct libraries in the same overall program.
One could coin the term
<a href="http://en.wikipedia.org/wiki/Decomposing_Composers">&ldquo;composing decomposers&rdquo;</a>
for such things.)</p>

<h2>Wait, what was that about &ldquo;normal&rdquo; languages?</h2>

<p>I wrote the end of the previous section intending for it to apply to Rust.
Then I realized that I do not have enough experience writing Rust programs to
be certain it is reasonable to develop a mutator-based cleanup process
that runs on its own thread.</p>

<p>I am only discussing cleanup for structures held in managed-boxes (not in
owned-boxes or stack-allocated).  It might be feasible to express cleanup
routines for managed boxes with relatively trivial types in Rust, at least for
some libraries.</p>

<p>But it might be that in practice, managed boxes would generally have
types that would make it impossible for a separate thread to extract them from
a guardian and be able to access their contents.</p>

<p>There is also the serious problem that such a cleanup thread seems likely to require
the use of mutex locks in order to coordinate with the &ldquo;real&rdquo; mutator; this in
particular seems antithetical to the ideals of Rust.</p>

<p>(Hopefully I will soon acquire sufficient experience with Rust itself to be
able to address this issue more coherently.)</p>

<!---

----

Another idiosyncrasy with a lot of the guardian-like systems is that they
enqueue the original object for processing, which is quite counter-intuitive
when one considers the effort that the GC went through to determine that the
object was otherwise unreachable.

This perhaps could be addressed by using something like the model described at
the start of section 3.1 of Boehm's paper, "Alternatives"; namely, instead of
enqueuing the unreachable object on a reference queue, the GC could instead
enqueue an associated distinct cleanup object. Boehm states that such a
cleanup object falls victim to all the same problems, but as I understand it,
that is only true if it is invoked by the GC in the same way that Java-style
finalizers are invoked, as described in his paper.

It would be interesting to know whether any managed runtimes offer only
guardians/reference-queues with this style of distinct associated cleanup
objects; I am not aware of any myself.  I might attempt to hack one up in the
future.

--->


<h2>Conclusion</h2>

<p>I am not saying this is easy, and I am not saying that the systems I am
referencing get everything right either.  But implicit finalizers, even those invoked
from a system-managed asynchronous thread, are not the only answer.</p>

<p>Perhaps my pithy summary is that: Implicit finalizers are indeed inherently
asynchronous routines; but with explicit finalization, one has more options
(yet still may be able to fall back on asynchrony if necessary).</p>

<p>So, what does all of this mean for Rust?  Well, Niko already suggested
limiting destructors solely to types that contain only &ldquo;owned data.&rdquo;</p>

<p>I have no problem with that, since it clearly deals with all of the issues
that Boehm described.</p>

<p>But my suspicion is that Rust developers will soon discover that one really
does need the GC to feed information forward about the managed boxes that it
is collecting.  And so we will then be at a crossroads: Put in Java-style
finalizers, or adopt another approach?</p>

<p>My goal is to make sure we remember to consider those other approaches when we
hit that crossroads.</p>

<h2>References</h2>

<ol>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/01/17/destructors-and-finalizers-in-rust/">&ldquo;Destructors and Finalizers in Rust&rdquo;</a>
<br/>Niko Matsakis
<br/>Blog post, 2013</li>
<li><a href="http://www.hpl.hp.com/techreports/2002/HPL-2002-335.html">&ldquo;Destructors, Finalizers, and Synchronization&rdquo;</a>
<br/>Hans Boehm
<br/>HP Tech Report; POPL 2003</li>
<li><a href="http://www.cs.indiana.edu/~dyb/pubs/guardians-pldi93.pdf">&ldquo;Guardians in a Generation-Based Garbage Collector&rdquo;</a>
<br/>Dybvig, Bruggeman, and Eby
<br/>PLDI, 1993</li>
<li><a href="http://www.oracle.com/technetwork/articles/javase/finalization-137655.html">&ldquo;How to Handle Java Finalization&rsquo;s Memory-Retention Issues&rdquo;</a>
<br/>Tony Printezis
<br/>Tech Report, 2007</li>
<li><a href="http://docs.racket-lang.org/reference/willexecutor.html">&ldquo;Wills and Executors&rdquo;</a>
<br/>PLT Racket Reference Documentation</li>
<li><a href="http://repository.readscheme.org/ftp/papers/sw2010/02-hsu.pdf">&ldquo;Implementing User-level Value-weak Hashtables&rdquo;</a>
<br/>Aaron Hsu
<br/>Scheme Workshop 2010
<br/>(I only properly appreciated the value (and difficulties) of using guardians for such purposes after I read this paper)</li>
</ol>


<h2>Appendix A. What are Guardians?</h2>

<p>I here outline a concrete example of how this works in the case of Guardians
(adapted from <a href="http://repository.readscheme.org/ftp/papers/sw2010/02-hsu.pdf">Hsu</a>).  (To aid readability, I have replaced the use of
procedure-arity-based-dispatch, as written by Hsu to match the Chez Scheme
API, and I am rewriting his example with a new distinct named procedures .)</p>

<p>One can construct as many guardian instances (or simply &ldquo;guardians&rdquo;) as one wants.
Each guardian is associated with two things:</p>

<ol>
<li><code>reclaimable</code> : a set of objects previously determined to be reclaimable by the garbage collector, and</li>
<li><code>registry</code> : a set of objects scheduled to be eventually enqueued in the first set.</li>
</ol>


<p>Both of these sets are initially empty when the guardian is constructed.</p>

<pre><code>&gt; (define g (make-guardian))
&gt; (define v "VAL")
&gt; (define p (weak-cons v '())
&gt; (guardian-register! g v)

&gt; (set! v #f)                    ;; Now `"VAL"` is unreachable via strong-refs ...
&gt; (guardian-fetch! g)            ;; ... but GC has not discovered that yet.
#f

&gt; (collect-garbage)              ;; `"VAL"` is still unreachable ...
&gt; p                              ;; ... though one can access via weak paths ...
("VAL")
&gt; (define x (guardian-fetch! g)) ;; ... and the guardian held it in `reclaimable`
&gt; x
"VAL"

                                 ;; At this point, "VAL" is again strongly reachable
                                 ;; (via `x`).  However, it is *not* in either of the
                                 ;; sets for the guardian `g`, and thus is not scheduled
                                 ;; to be enqueued in the `reclaimable` set.

&gt; (set! x #f)                    ;; Now "VAL" is no longer strongly reachable...
&gt; (collect-garbage)
&gt; p                              ;; ... and thus can be reclaimed.
(#!blank-weak-pointer)
</code></pre>

<p>So, what does this have to do with finalization?</p>

<p>With the guardian API in hand, one could take care of closing individual
file descriptors associated with heap-allocated file objects, by
a protocol such as:</p>

<ol>
<li><p>Create one guardian G for the file library, whose sole purpose is closing
file descriptors.</p></li>
<li><p>In the constructor for file objects, register each constructed file object
with G.</p></li>
<li><p>In a periodic process, dequeue objects from G and close their associated
file descriptors.</p></li>
</ol>


<h2>Appendix B. Another peeve about guardians</h2>

<p>One idiosyncrasy about a lot of the guardian-like systems is that they enqueue
the original object for processing, which is quite counter-intuitive to me
given the effort that the GC went through to determine that the object was
otherwise unreachable.</p>

<p>Perhaps this could be addressed by using something like the model described at
the start of section 3.1 of Boehm&rsquo;s paper, &ldquo;Alternatives&rdquo;; namely, instead of
enqueuing the unreachable object on a reference queue, the GC could instead
enqueue an associated distinct cleanup object, and reclaim the originally
registered object itself. (Boehm states that such a cleanup object falls
victim to all the same problems, but as I understand it, that is only true if
it is invoked by the GC in the same way that Java-style finalizers are
invoked, as described in his paper.)</p>

<p>The associated cleanup object would need to carry any state necessary for the
cleanup action (e.g., the file descriptor itself).  So that seems like a
potential for ugly redundancy and wastage (in either time or space, depending
on whether uses a level of indirection or simply redundantly stores all the
necessary state in the object and in its associated cleanup object.).</p>

<p>But nonetheless, a decoupled system like this may be easier to reason about,
especially when one has scenarios where an object is registered with multiple
guardians/reference-queues.</p>

<p>As far as I understand, the reference queue system in Java, as described by
<a href="http://www.oracle.com/technetwork/articles/javase/finalization-137655.html">Printezis</a>, is sufficient to express a structure like this.  Still, it
would be interesting to know whether any managed runtimes offer <em>only</em>
guardians/reference-queues with this style of distinct associated cleanup
objects; I am not aware of any that are so conservative.  I might attempt to
hack one up in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resurrected (Hello Again World)]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world/"/>
    <updated>2013-01-08T00:55:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world</id>
    <content type="html"><![CDATA[<h2>It&rsquo;s Clobbering Time</h2>

<p>Remember that thing I said back <a href="http://blog.pnkfx.org/blog/2012/12/31/hello-world">at the end of 2012</a>?
That thing?
That thing about the important detail that:</p>

<blockquote><p>the <code>_deploy/</code> subdirectory is itself a clone of the targeted
github repository, with the <code>gh-pages</code> branch checked out.</p></blockquote>

<p>It turns out this is really important detail.</p>

<p>Here&rsquo;s why: For my first blogging act of the new year, I inadvertently destroyed
my own blog.</p>

<p>I attempted to write a post from a computer other than the one out of
which I had already worked all the octopress-compatibility kinks.
In the hustle of dealing with <code>rbenv</code> and various other ruby-oriented
dependencies, I forgot about the detail above.</p>

<p>And then when I ran <code>rake deploy</code>, I clobbered the live blog.</p>

<p>I may have been recovering from, or incapacitated by, New Years
revelry at the time, it is not clear to me at the current moment.  I
believe I identified the disaster right after it happened, but immediately
decided I did not have the time then to diagnose it, fix it,
or even to attempt to rollback the
state and repush to github.  I vaguely remember considering that last option
and deciding that even that was out of the question.  (I think a pending
trip to a Karaoke bar may have been involved in the decision-making
process here.)</p>

<p>So, tonight I diagnosed and fixed the problem.</p>

<p>At first I was just going to let the matter lie undocumented, and
pretend like it never happened.</p>

<p>But I realized that I may well again make the same mistake in the future,
and that it behooved me to at least document the issue in my commit
log for <a href="https://github.com/pnkfelix/pnkfx-blog/commits/blog.pnkfx.org">the blog source</a>.</p>

<p>And after writing that commit log entry and pushing it, I decided that
this story was in fact blog worthy; after all, what is the point of
a blog if not to freely broadcast your mistakes?  :)</p>

<p>So, directly from <a href="https://github.com/pnkfelix/pnkfx-blog/commit/f277b041de33a8e0eac02c6aecb3909231725db7">my commit message</a>, here is the description of how
I clobbered my own blog:</p>

<blockquote><p>The easy way to sum it up is: The model
employed by octopress when deploying to github is this: Your <em>deploy/
subdirectory must contain a checkout of the target repo, the one with
the gh-pages branch, and you must have that </em>deploy/ subdirectory
checked out and ready to go before running &lsquo;rake deploy&rsquo;.</p>

<p>If you do not have a _deploy/ subdirectory at all and you let &lsquo;rake
deploy&rsquo; create it for you but you also let &lsquo;rake deploy&rsquo; attempt to
push to github, and you are also managing the source itself on github,
you will enter a world of pain where the rake invocation will push
<em>this</em> root directory, presumably in the master branch (or in my case,
blog.pnkfx.org branch) to the target repo in the gh-pages/ branch.
Which will bust things terribly, especially if that causes the CNAME
file to get deleted from the gh-pages/ branch of the target repo.</p></blockquote>

<h2>A note on self-reference</h2>

<p>Also, a quick half shout-out, or maybe corrective note, to
<a href="http://www.seamusbradley.net/blog/blog/2012/04/24/how-to-link-to-your-own-blog-posts-in-octopress/">seamusbradley</a> for pointing out some details about linking back to
one&rsquo;s own blog posts.</p>

<p>It is only a half shout-out because Seamus&rsquo;s note is only useful, I
think, if you have, like him, a customized setting for the <code>root:</code> in
your <code>_config.yml</code>.  That, or Seamus has confused himself and changed
his <code>root</code> setting in order to accommodate other url&rsquo;s that he
observed, but those urls are in fact actually generated by settings
for properties other than <code>root</code>.</p>

<p>Here&rsquo;s the concrete details: I read (misread?) Seamus&rsquo;s post at first
as saying that a customized setting of <code>root</code> to <code>/blog</code> is a
prerequisite for linking to your own posts.  It seems to me that the
relevant detail is what the <em>permalink</em> setting is, not the root.
(But then again, I have not played with changing my root setting,
apart from finding that when I did try changing it to <code>/blog</code> as
Seamus suggested, it seems like doing so broke <code>rake preview</code>.)</p>

<p>In my case, the <code>root</code> and <code>permalink</code> for my <code>_config.yml</code>
are set as follows:</p>

<pre><code>root: /
permalink: /blog/:year/:month/:day/:title/
</code></pre>

<p>and I format links to my own posts, such as the one you are reading,
like so:
<a href="http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world"><code>/blog/2013/01/08/resurrected-hello-again-world</code></a>
as you can see from looking at the source for the line above,</p>

<pre><code>[`/blog/2013/01/08/resurrected-hello-again-world`](/blog/2013/01/08/resurrected-hello-again-world)
</code></pre>

<p>A bit of quoted self-reference is a good place to stop for the night.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X tiled window management with Slate]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/01/02/osx-tiled-window-management/"/>
    <updated>2013-01-02T22:34:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/01/02/osx-tiled-window-management</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://github.com/jigish/slate" title="Slate: github repository">Slate</a>, an
open-source window-management tool for Mac OS X.</p>

<p>It is very cool, mainly in that it is very configurable (but with a
reasonably readable syntax for its configuration file).</p>

<p>Perhaps the most important thing to say is: Do not judge it solely
based upon its default configuration file, which is very bare bones
and does not illustrate anything near the full feature set that it
offers.</p>

<p>Instead, I recommend one at least read over Tristan Hume'e <a href="http://thume.ca/howto/2012/11/19/using-slate/" title="Tristan Hume: Using Slate">blog post</a>,
which advertises Slate much more effectively than the project&rsquo;s
github page.  The blog post describes some of the crucial features that are not
exposed in the default configuration.  In particular, the
window-switcher shortcut, which overlays each window with a
letter to give that window focus, is much more tile-friendly
if you also turn on</p>

<pre><code>config windowHintsIgnoreHiddenWindows false
config windowHintsShowIcons true
</code></pre>

<p>You can see this and other custimzations I have made for myself
in my own <code>.slate</code> file, which I keep with my other dotfiles in
<a href="https://github.com/pnkfelix/DotFiles/blob/master/slate" title="Felix's DotFiles github repo">my public repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.pnkfx.org/blog/2012/12/31/hello-world/"/>
    <updated>2012-12-31T14:34:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2012/12/31/hello-world</id>
    <content type="html"><![CDATA[<!---
Apparently Markdown syntax does not have any shorthand for comments
-->




<!---
First 7 lines of this file were generated by command invocation:
  % rake new_post["Hello World"]
-->


<p>First post!
I am attempting to move my blog to GitHub Pages.</p>

<p>After seeing the results of others, I figure I will start with Octopress
and see how that goes.</p>

<p>Just so I can remind myself of the Octopress basics in the immediate future:</p>

<ul>
<li><p>Much of the page generation is controlled by configuration file <code>_config.yml</code></p></li>
<li><p>The content is all stored in <code>source/_posts/</code></p></li>
<li><p>This particular entry corresponds to the file <code>2012-12-31-hello-world.markdown</code></p></li>
<li><p>The first 7 lines of that file were originally generated via the
<code>rake</code> command invocation:</p>

<pre><code>% rake new_post["Hello World"]
</code></pre></li>
<li><p>The command <code>rake generate</code> will convert the source into static html pages.</p></li>
<li><p>After generating the file (and during subsequent editting), one can preview
the state locally in a local Ruby webserver via:</p>

<pre><code>% rake preview
</code></pre>

<p>and then <a href="http://localhost:4000/">browsing localhost port 4000</a>.
The <code>rake preview</code> invocation will continuously monitor your post
source files so that you can keep working on your post and then
reload in your web browser without rerunning <code>rake</code> itself.</p></li>
<li><p>The command <code>rake deploy</code> is supposed to deploy the content into its intended
live location.  I have been having difficulty using this command,
in part because I think it is written assuming you have your ssh-key
already set up and integrated with github (or something similar) so that
there would be no password prompts.</p>

<ul>
<li><p>But of course I have not done this yet.</p></li>
<li><p>One important detail about <code>rake deploy</code> with github pages is that
the <code>_deploy/</code> subdirectory is itself a clone of the targetted
github repository, with the <code>gh-pages</code> branch checked out.
This can be confusing if your main source tree (the parent
directory of <code>_deploy/</code>) is itself the same repository as the
targetted github repository.</p></li>
</ul>
</li>
<li><p>Update: <code>rake deploy</code> just worked fine for me, password prompts and all.
I think my earlier difficulty was an artifact of some previous bad
state, one of either:</p>

<ul>
<li><p>I had put in a malformatted url for the target repository</p></li>
<li><p>My target repository already had a <code>gh-pages</code> branch (from earlier
testing) that needed to be pulled-and-merged (or discarded in some
fashion, which was what my merge amounted to).</p></li>
</ul>
</li>
<li><p>Update (26 march 2012): there are still some hiccups with <code>rake deploy</code>;
you need to be careful about what you store in the <code>source/</code> directory.
In particular, I was working on a draft post and threw various
source files that I was hacking on in the same directory, along with
some <code>.gitignore</code> files so that <code>git</code> would ignore build products
generated when I compiled the source (to binaries or jars or fasls&hellip;).</p>

<p>The headache came when I did <code>rake deploy</code>, and hit this error:</p>

<pre><code class="bash">% rake deploy
cp -r source/_posts/.gitignore public/_posts/.gitignore
rake aborted!
No such file or directory - public/_posts/.gitignore
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:230:in `block (2 levels) in &lt;top (required)&gt;'
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:229:in `block in &lt;top (required)&gt;'
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:219:in `block in &lt;top (required)&gt;'
Tasks: TOP =&gt; copydot
(See full trace by running task with --trace)
%
</code></pre>

<p>The problem here, as far as I can tell, is that octopress
is aggressively trying to copy over all dotfiles it can find
(<a href="https://github.com/imathis/octopress/issues/104">Octopress Issue 104</a>)
and that code was not written to create any subdirectories as
necessary.</p>

<p>My Ruby development knowledge is sufficiently under-developed that I
am not going to try to fix this myself.  Instead I have simply
moved all of the source code I was hacking <em>out</em> of the <code>source/</code>
directory and into a separate <code>hacks/</code> directory.
This seems to have addressed the problem; I have also filed
<a href="https://github.com/imathis/octopress/issues/1151">an issue</a>
for this with Octopress.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
