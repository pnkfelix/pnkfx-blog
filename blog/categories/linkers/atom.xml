<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linkers | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/blog/categories/linkers/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2022-05-10T22:57:29-04:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linking Rust Crates, Part 1]]></title>
    <link href="http://blog.pnkfx.org/blog/2022/05/06/linking-rust-crates/"/>
    <updated>2022-05-06T09:51:45-04:00</updated>
    <id>http://blog.pnkfx.org/blog/2022/05/06/linking-rust-crates</id>
    <content type="html"><![CDATA[<p>Working on the Rust compiler, one topic that I come across from time to time is
&ldquo;what is <em>supposed</em> to happen when we use these particular features of my
tools?&rdquo; More specifically, Rust has various metaphorical knobs that allow
fine-grained control of the object code generated by the compiler, several of
which are related to the process of linking that code to other object code.</p>

<p>From <a href="https://doc.rust-lang.org/reference/linkage.html">Linkage</a> chapter of the Rust Reference, we can see there are seven
kinds of crates: <code>bin</code>, <code>lib</code>, <code>dylib</code>, <code>staticlib</code>, <code>cdylib</code>, <code>rlib</code>, and <code>proc-macro</code>.</p>

<p>What this post is going to do is walk through each of those kinds of crates and
demonstrate: how to build an example of such a crate, how to link to it, and how
to run with that linked crate.</p>

<!-- more -->


<p>In later posts, I will explore the various attributes and command-line flags
that can influence the linking step. But right now, I want to establish the
foundation for that later discussion.</p>

<p>These initial examples are as simple as possible. We will want to actually
demonstrate each case running. Since most crate types are not executable, that
means we will need multiple crates in almost all of our examples. Furthermore,
some phenomena require mixing multiple crate types in order to observe corner cases
that are worth addressing.</p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js"></script>


<p> <pre><code class="language-mermaid">flowchart LR
    A &ndash;> B
 </code></pre></p>

<div class="mermaid">
graph LR

A --- B

B-->C[Happy]

B-->D(Sad);

</div>

]]></content>
  </entry>
  
</feed>
