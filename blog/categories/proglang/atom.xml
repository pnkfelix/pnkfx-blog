<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: proglang | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/blog/categories/proglang/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2021-04-27T17:20:30-04:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Surfaces and Signatures: Component Privacy versus Dependence]]></title>
    <link href="http://blog.pnkfx.org/blog/2015/12/19/signatures-and-surfaces-thoughts-on-privacy-versus-dependency/"/>
    <updated>2015-12-19T22:30:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2015/12/19/signatures-and-surfaces-thoughts-on-privacy-versus-dependency</id>
    <content type="html"><![CDATA[<p>I have had some thoughts on what <em>privacy</em> is used for in programming
languages, and how it differs from the notion of <em>dependence</em> between
modules (or at least compilation units) in a language like Rust.
And I thought I should share.</p>

<!-- more -->


<p>I have been working on an
RFC<label for='&lsquo;arr-eff-what&rsquo;' class='margin-toggle sidenote-number'></label><input type='checkbox' id='&lsquo;arr-eff-what&rsquo;' class='margin-toggle'/><span class='sidenote'>&lsquo;<a </span>
meant to increase the expressiveness of Rust&rsquo;s privacy construct
(the <code>pub</code> modifier), and in the process hopefully simplify the mental
model for what privacy means there.</p>

<p>However, I kept finding myself diving into regressions in my draft RFC
document: idealized hypothetical semantics for privacy, and
discussions of what motivates different aspects of that semantics.</p>

<p>Eventually I realized that such text was going to really bog down the
RFC itself (which is meant to describe a relatively simple language
change);
so I decided it was time for a blog
post<label for='&lsquo;gc-posts&rsquo;' class='margin-toggle sidenote-number'></label><input type='checkbox' id='&lsquo;gc-posts&rsquo;' class='margin-toggle'/><span class='sidenote'>&lsquo;Yes, </span>,
if for no other reason than to provide a place for me to cut-and-paste
all those digressions.</p>

<p><label for='' class='margin-toggle'>&#8853;</label><input type='checkbox' id='' class='margin-toggle'/><span class='marginnote'>
Bugs including:
&ldquo;Trait re-exports fail due to privacy of containing module&rdquo; (<a href="https://github.com/rust-lang/rust/issues/18241">#18241</a>),
&ldquo;Rules governing references to private types in public APIs not enforced in impls&rdquo; (<a href="https://github.com/rust-lang/rust/issues/28325">#28325</a>)
&ldquo;Type alias can be used to bypass privacy check&rdquo; (<a href="https://github.com/rust-lang/rust/issues/28450">#28450</a>),
&ldquo;Private trait&rsquo;s methods reachable through a public supertrait&rdquo; (<a href="https://github.com/rust-lang/rust/issues/28514">#28514</a>),
&ldquo;Non-exported type in exported type signature does not error&rdquo; (<a href="https://github.com/rust-lang/rust/issues/29668">#29668</a>),
</span>
There are a number of bugs that have been filed against the privacy
checking in Rust; some are simply implementation issues, but the
comment threads in the issues make it clear that in some cases,
different people have very different mental models about how privacy
interacts with aliases (e.g. <code>type</code> declarations) and re-exports.</p>

<p>The existing privacy rules in Rust try to enforce two things:</p>

<ol>
<li><p>When an item references a path, all of the names on that path need to
be visible (in terms of privacy) in the referencing context, and,</p></li>
<li><p>Private items should not be exposed in the surface of public API&rsquo;s.</p></li>
</ol>


<p>One might reasonably ask: What do I mean by &ldquo;visible&rdquo;, or &ldquo;surface&rdquo;?</p>

<p>For Rust today, &ldquo;visible&rdquo; means &ldquo;either (1.) public, via <code>pub</code>, (2.)
defined in the current module, or (3.) defined in a parent of the
current module.&rdquo;</p>

<p>But &ldquo;surface&rdquo; is a bit more subtle, and before we discuss it, I want
to talk a bit about the purpose of &ldquo;visibility&rdquo; in the first place.</p>

<a name="Digression:.a.dependence.need.not.be.visible"></a>
<h2>Digression: a dependence need not be visible</h2>

<p>In a hypothetical idealized programming language (<em>not</em> Rust), and
under a particularly extreme reading of the term &ldquo;private&rdquo;, changes to
definitions that are private to one module would have no effect on the
validity of pre-existing uses from other modules. Another way of
looking at this: changes to private definitions in one compilation
unit would not require other compilation units to be recompiled, and
will not cause programs that previously type-checked to stop
type-checking.</p>

<p>One form of this ideal is the following:</p>

<script src="http://blog.pnkfx.org/javascripts/viz.js" charset="utf-8"></script>


<div id="extreme_private_calls"></div>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent"; node [shape="rect"]; subgraph cluster_1 { fn_a [label="pub fn a()"]; label="unit1"; } subgraph cluster_2 { fn_b [label="pub fn b()"]; fn_c [label="fn c()"]; fn_b -> fn_c [label="calls"]; label="unit2"; } fn_a -> fn_b [label="calls"]; }';
    var elem = document.getElementById("extreme_private_calls");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p>In this picture, one can see that the <code>fn c()</code> is a private component
of &ldquo;unit2&rdquo;: it may just be an implementation detail of the body of
<code>pub fn b()</code>, that the author of &ldquo;unit2&rdquo; can revise at will or
eliminate entirely, without requiring any changes to &ldquo;unit1&rdquo;
downstream.</p>

<p>A problem arises when one sees other kinds of composition, at least in
language like Rust, where values are directly embedded into their
containers.  For example, instead of function calls, imagine type
definitions:</p>

<script src="http://blog.pnkfx.org/javascripts/viz.js" charset="utf-8"></script>


<div id="extreme_private_types"></div>


<script>
    var dot_source = 'digraph { rankdir="LR"; bgcolor="transparent"; node [shape="rect"]; subgraph cluster_1 { struct_a [label="pub struct A { \\l    b: unit2::B \\l}\\l"]; label="unit1"; } subgraph cluster_2 { struct_b [label="pub struct B { \\l    c: C \\l}\\l"]; struct_c [label="struct C {\\l    x: i32,\\l    y: i32\\l}\\l"]; label="unit2"; } struct_a -> struct_b [label="uses"]; struct_b -> struct_c[label="uses", constraint=false] }';
    var elem = document.getElementById("extreme_private_types");
    elem.innerHTML = Viz(dot_source, "svg");
</script>


<p><label for='' class='margin-toggle'>&#8853;</label><input type='checkbox' id='' class='margin-toggle'/><span class='marginnote'>
In many other languages (e.g. Java, ML, Scheme), such
changes do not require recompiling the downstream crate, because
the members of structural types are just <em>references</em> to other heap-allocated
values, rather than being directly embedded in the allocated structure.
</span>
In this situation, even though the <code>struct C</code> is not publicly
accessible outside of &ldquo;unit2&rdquo;, changes to <code>struct C</code> will still
require the downstream &ldquo;unit1&rdquo; to be recompiled (because the contents
of <code>struct A</code>, and thus its size in bytes, may have changed along with
<code>struct C</code>).</p>

<p>So, what does it <em>mean</em> that <code>C</code> is &ldquo;private&rdquo;, if there is still a
dependence from the contents of &ldquo;unit1&rdquo; on the supposedly private
definition of <code>struct C</code>?</p>

<p>My answer to this is to distinguish between <em>visibility</em> versus <em>dependency</em>.</p>

<p>In the above picture, <code>struct A</code> in &ldquo;unit1&rdquo; has a dependence on the
definition of <code>struct C</code> in &ldquo;unit2&rdquo;. But <code>struct C</code> remains
<em>invisible</em> to <code>struct A</code>, in the sense that one cannot actually write
a direct reference to that type in the context of &ldquo;unit1.&rdquo;</p>

<a name="What.is.visibility.for."></a>
<h2>What is visibility for?</h2>

<p>Some basic definitions: An item is just as it is declared in the Rust
<a href="https://doc.rust-lang.org/reference.html#items">reference manual</a>: a component of a crate, located at a fixed path
(potentially at the &ldquo;outermost&rdquo; anonymous module) within the module
tree of the crate.</p>

<p>Every item can be thought of as having some hidden implementation
component(s) along with an exposed surface API.</p>

<p>So, for example, in:
<code>rust
pub fn foo(x: Input) -&gt; Output { Body }
</code>
the surface of <code>fn foo</code> includes <code>Input</code> and <code>Output</code>, while the <code>Body</code> is
hidden.</p>

<p>What I would like is to establish the following
invariant<label for='&lsquo;inv&rsquo;' class='margin-toggle'> &#8853;</label><input type='checkbox' id='&lsquo;inv&rsquo;' class='margin-toggle'/><span class='marginnote'>&lsquo;Yes, </span>
for the language: if an item <code>I</code> is accessible in context <code>C</code>, then the
surface for <code>I</code> does not expose anything that is inaccessible to <code>C</code>.</p>

<a name="Intuition.behind.what..surface..means"></a>
<h2>Intuition behind what &ldquo;surface&rdquo; means</h2>

<p>I am taking care to distinguish between the phrase &ldquo;exposed surface
API&rdquo; (more simply put, &ldquo;surface API&rdquo; or just &ldquo;surface&rdquo;), versus the
more common unqualified phrase &ldquo;API&rdquo;, because some items have
components that I argue are part of the item&rsquo;s programming interface,
but are not part of the publicly exposed surface of the item (further
discussed in a <a href="#Why.is.a..surface..not.the.same.as.a.signature.">later section</a>).</p>

<p>The inutition behind the term &ldquo;surface&rdquo; is this:
The exposed surface of an item is all of the
components<label for='&lsquo;surface-components&rsquo;' class='margin-toggle'> &#8853;</label><input type='checkbox' id='&lsquo;surface-components&rsquo;' class='margin-toggle'/><span class='marginnote'>&lsquo;&ldquo;components&rdquo; </span>
 that the client operation&rsquo;s context must be able to reference to in order to use this
item legally.</p>

<p>There are two halves to this, that are roughly analogous to the output
and input types of a function: ensuring that local reasoning holds,
and ensuring an interface is actually usable.</p>

<a name="Restricting.output.surface.enables.local.reasoning"></a>
<h3>Restricting output surface enables local reasoning</h3>

<p>A function&rsquo;s return type is part of its exposed surface, because if
a module has decided that a type <code>T</code> should be inaccessible in some
outer context <code>C</code>, then we do not want a value of that type to flow
into <code>C</code> while still having the type
<code>T</code>.<label for='&lsquo;boxes&rsquo;' class='margin-toggle'> &#8853;</label><input type='checkbox' id='&lsquo;boxes&rsquo;' class='margin-toggle'/><span class='marginnote'>&lsquo;Of </span></p>

<p>In other words, we wish to reject such code in order to enable
module authors to employ <em>local reasoning</em> about all possible
locations in the source code that the operations on instances of
<code>T</code> could be invoked.</p>

<p>This <em>is</em> a soundness criteria: People need to be able to employ
this kind of reasoning.</p>

<a name="Restricting.input.surface.catches.API.mistakes"></a>
<h3>Restricting input surface catches API mistakes</h3>

<p>A function&rsquo;s input types are part of its exposed surface, because
without access to such types, the function is not callable.</p>

<p>In other words, we wish to reject such code in order to catch bugs
where a crate is <em>accidentally providing</em> a function without realizing
that it cannot actually be used in the contexts that the author wants
it available in.</p>

<p>This is not a soundness criteria; it is just a language usability one.<label for='&lsquo;prioritizing-halves&rsquo;' class='margin-toggle'> &#8853;</label><input type='checkbox' id='&lsquo;prioritizing-halves&rsquo;' class='margin-toggle'/><span class='marginnote'>&lsquo;In </span></p>

<a name="Why.is.a..surface..not.the.same.as.a.signature."></a>
<h2>Why is a &ldquo;surface&rdquo; not the same as a signature?</h2>

<p>Intuitively, one might ask: &ldquo;well, this is easy: the <em>signature</em> of
<code>fn foo</code> is <code>fn (Input) -&gt; Output</code>; does that not suffice as the
description of the <em>surface</em> of <code>fn foo</code>?&rdquo;</p>

<p>I am distinguishing the above notion of &ldquo;surface&rdquo; from the idea of a
&ldquo;signature&rdquo;, for the following reason: To my mind, the signature
(e.g. of a type or a function) contains all of the meta-data needed to
check (in the current crate or in other crates) whether a item is
being used properly. Such a signature may include references to names
that are not actually accessible in the current context. Compare this
to the <em>surface</em>, which is the subset of the names of the signature
that <em>must</em> be accessible in any context where the item is itself
accessible.</p>

<p>One example of where this kind of thinking can be applied is
<code>where</code> clauses. A where-clause can reference things that are not
accessible outside of the module of the function.  I would consider
such a <code>where</code> clause to still be part of the function&rsquo;s signature
(e.g., I would expect the compiler to reject my attempt to call the
function if I violate the encoded constraint), but I do not
necessarily consider the types or traits within that where clause part
of the surface API, since there are hidden parts to the constraint
that I do not have access to in my calling module.</p>

<p>Here is a concrete example that runs in Rust 1.5:</p>

<pre><code class="rust">mod a {
    struct S(&amp;'static str);                 // private struct type S
    pub trait Trait { fn compute(&amp;self) -&gt; i32; }

    impl Trait for (i32, S) {
        fn compute(&amp;self) -&gt; i32 { self.0 + ((self.1).0.len() as i32) }
    }

    pub fn foo&lt;X&gt;(x: X) -&gt; i32
        where (X, S): Trait // where clause refers to private type S
    {
        (x,S("hi")).compute()
    }
}

fn main() {
    println!("{}", a::foo(3));
}
</code></pre>

<p>There are other examples that we may want to support in the future.
For example, Rust (version 1.5) considers bounding a type parameter
directly via a private trait to be illegal, but we might reasonably
revise the rules to say that while such a bound is part of the
signature, it need not be part of the <em>surface</em>.</p>

<p>(A very similar construction is allowed in Rust 1.5: A <code>pub</code> trait
can have a private <em>parent</em> trait, which allows us to encode the
latter construction anyway: the surface area of a function does not
include the parent traits of bounds on its type parameters.)</p>

<p>That&rsquo;s a lot of text to read. Here is the kind of code I am talking
about:</p>

<pre><code class="rust">mod a {
    struct S(String);                      // private type
    trait Trait { fn make_s(&amp;self) -&gt; S; } // private trait
    pub trait SubT: Trait { }              // public trait to placate rustc

    pub fn foo&lt;X:SubT&gt;(x: X) { // public fn that external code *can* use.
        let s: S = x.make_s();
        s.do_stuff();
    }

    // Impl trait for both () and i32, so clients can call `foo` on () or i32.
    impl Trait for () { fn make_s(&amp;self) -&gt; S { S(format!("():()")) } }
    impl Trait for i32 { fn make_s(&amp;self) -&gt; S { S(format!("{}:i32", self)) } }
    impl SubT for () {}
    impl SubT for i32 {}

    impl S { fn do_stuff(&amp;self) { println!("stuff with {}", self.0); } }
}

fn main() {
    a::foo(());
    a::foo(3);
}
</code></pre>

<p>In short: the term &ldquo;surface API&rdquo; here is <em>not</em> synonymous with the
term &ldquo;signature&rdquo;.</p>

<p>Assuming that you believe me that this new term, &ldquo;surface API&rdquo;, is
actually warranted, you might now ask: &ldquo;How does one determine the
surface API of an item?&rdquo; That is one of those questions that may sound
trivial at first, but it is actually a bit subtle.</p>

<p>Let us explore.</p>

<a name="Some.items.can.change.their.surface.based.on.context"></a>
<h3>Some items can change their surface based on context</h3>

<p>For some items, such as <code>fn</code> definitions, the surface API is the same
regardless of the context of where the item is used; for example, if a
function is visible to you, then its surface API is simply its
argument and return types, regardless of from where the function is
referenced.</p>

<p>However, the previous rule does not generally hold for most items; in
general, the exposed surface of a given item is dependent on the
context where that item is referenced.</p>

<p>The main examples of this are:</p>

<p><label for='' class='margin-toggle'>&#8853;</label><input type='checkbox' id='' class='margin-toggle'/><span class='marginnote'>
All of these bullets are phrased as &ldquo;can be hidden&rdquo;, i.e.,
the visibility may be restricted. However, in Rust today,
one can write: <code>mod a{struct X{pub y: i32}}</code>
I may want to generalize the statements here. (Then again, I
am not clear whether there is any way to actually <em>use</em> the
<code>y</code> field that has been exposed in this way.)
</span></p>

<ul>
<li><p><code>struct</code> fields can be hidden in a <code>struct</code>,</p></li>
<li><p>inherent methods can be hidden relative to the type they are attached to, and</p></li>
<li><p>items can be hidden in a <code>mod</code>.</p></li>
</ul>


<p>In all cases where a surface component can be hidden in this
context-dependent fashion, there is an associated <code>pub</code>-modifier
present on the definition of that component.</p>

<p>As an example of how the surface of a <code>struct</code> is context dependent,
the following is legal:</p>

<pre><code class="rust">mod a {
    #[derive(Default)]
    struct Priv(i32);

    pub mod b {
        #[derive(Default)]
        pub struct F {
            pub    x: i32,
                   y: ::a::Priv,
        }

        // ... accesses to F.{x,y} ...
    }
    // ... accesses to F.x ...
}

mod k {
  use a::b::F;
  // ... accesses to F and F.x ...
}
</code></pre>

<p>Within <code>mod b</code>, the surface API of <code>F</code> includes both the fields <code>x</code>
and <code>y</code>, which means that the use of the type <code>Priv</code> is okay, since
that is accessible from the context of <code>mod b</code>.</p>

<p>Elsewhere, such as within <code>mod k</code>, the surface API of <code>F</code> is just the
field <code>x</code>. But this is again okay, because the type of <code>x: i32</code> is
visible everywhere.</p>

<a name="Aliases.and.translucency"></a>
<h3>Aliases and translucency</h3>

<p>Some items, such as <code>type</code> aliases, <code>const</code> definitions, or rebinding
imports a la <code>use &lt;path&gt; as &lt;ident&gt;</code>, can act to introduce named aliases
to an item.</p>

<p>In such cases, the alias itself has its own associated visibility:</p>

<pre><code class="rust">mod a {
    pub struct S(String); // public type
    type Alias1 = S;      // private alias to the type
}

pub use a::S as Alias2;   // public alias to the type
</code></pre>

<p>The surface of simple aliases is also simple: the surface of an
alias
is just the paths referenced on its right-hand side.</p>

<p>As a small additional wrinkle, type aliases can be type-parametric. In
general, the exposed surface of a type alias are the bounds on its
type parameters, plus the paths referenced on its left-hand side.</p>

<p>So, for example, according to the rules today:</p>

<pre><code class="rust">mod bad_aliases {
    struct Private1(String); // private type
    pub type PubAlias1 = Private1; // ERROR: private type exposed in pub surface

    trait PrivateTrait { }
    pub type PubAlias2&lt;X:PrivateTrait&gt; = i32; // ERROR: private trait exposed in pub surface
}
</code></pre>

<p>The more interesting issue is how <em>other</em> surface APIs are influenced
when they reference an alias.</p>

<p>For example:</p>

<pre><code class="rust">mod a {
    pub struct S(String); // public type
    type Alias1 = S;      // private alias to the type

    pub fn twice(s: Alias1) -&gt; String { s.0 }
    //              ~~~~~~
    //                 |
    // Should a `pub fn` be able to reference a private alias,
    // if it points to a suitably public type (like `S` here)?
}

pub use a::S as Alias2;   // public alias to the type
</code></pre>

<p>Should it be legal for us to publicly export <code>fn twice</code> from <code>mod a</code>,
even though it&rsquo;s signature references a private type alias?</p>

<p>The language team recently <a href="https://github.com/rust-lang/rust/pull/29973#issuecomment-165723770">debated</a> this topic, because
it was suggested that allowing this would <a href="https://github.com/rust-lang/rust/pull/29973#issuecomment-158686899">reduce breakage</a>
from a pull request.</p>

<p>The conclusion for now was to continue to disallow the reference to
the private alias in the signature of a public function.</p>

<p>However, there are similar cases that <em>are</em> allowed today (also
discussed on that same PR), mainly involving references to <code>const</code> paths
from types in such signatures.</p>

<pre><code class="rust">mod a {
    const LEN: usize = 4;
    pub fn max(a: [i32; LEN]) -&gt; i32 { a.iter().map(|i|*i).max().unwrap() }
    //                  ~~~
    //                   |
    // A reference to a private const in a public signature
    // is legal in Rust today.
}

fn main() {
    println!("{}", a::max([1,4,2,3]));
}
</code></pre>

<p>I have not made up my mind as to which option would be better here.
We may decide to leave things as they are, or loosen the rules for
type aliases (so that they act more like <code>const</code> in the latter code),
or we may tighten the rules for references to <code>const</code> (so that one
would have to make <code>LEN</code> in the above code <code>pub</code>).</p>

<p>Regardless of what path we take, I think it makes sense today for the
language specification to at least identify a high-level abstraction
here, rather than dealing with each alias-creating form like <code>type</code> or
<code>const</code> or <code>use</code> individually in an ad-hoc manner.</p>

<p>Namely, I want to pin down the idea of a <em>translucent name</em>. Such a
name is not part of the API surface where it occurs; instead, an
occurrence adds the surface of the alias statement itself to the API
surface.</p>

<p>So, as another artifical example, if we were to change the language so
that <code>type</code> aliases were <em>translucent</em> when determining the exposed
surface of an API, then we might have the following:</p>

<pre><code class="rust">mod a { // (not legal Rust today)
    pub struct S(String); // public type
    pub trait Bound { type X; fn trait_method(&amp;self) -&gt; Self::X; }
    impl Bound for String { type X = String; fn trait_method(&amp;self) -&gt; String { self.clone() } }
    impl Bound for S { type X = String; fn trait_method(&amp;self) -&gt; String { self.0.clone() } }

    type Alias&lt;T: Bound&gt; = (T, T::X, S); // private Alias, with surface = {Bound, S}

    pub fn free_fun&lt;T: Bound&lt;X=String&gt;&gt;(a: Alias&lt;T&gt;) -&gt; String
    //                 ~~~~~   ~~~~~~      ~~~~~        ~~~~~~
    //  free_fun has     |       |           |            |
    //     surface = { Bound, String, surface(Alias), String }
    //             = { Bound, String,    Bound, S   , String }
    //             = { Bound, S, String }
    //
    // which is compatible with `free_fn` being `pub`, because
    // `Bound`, `S`, and `String` are all `pub`.
    {
        format!("{}{}", a.0.trait_method(), (a.1).0)
    }
}
</code></pre>

<p>Note 1: Even though <code>Alias</code> is type-parameteric over <code>T</code>, that
parameter would not be considered part of its surface. Anyone using
the alias would have to have access to whatever type they plugged in
there, of course.</p>

<p>Note 2: Type parameter bounds not enforced on type aliases in Rust yet.</p>

<p>This computation and questions here would become a little more
interesting if we had restricted visibility access modifiers on
associated items in traits. However, we do not have to consider it:
All associated items are implicitly <code>pub</code>, and so we do not need to
worry about whether the <code>X</code> in a projection like <code>T::X</code> is visible.
All that matters is whether the trait <code>Bound</code> itself is visible (which
is already reflected in the surfaces where <code>Bound</code> is used).</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Okay, that was of a bit of a meandering tour through some
of the issues I have been thinking about.</p>

<p>The big ideas I want to stress are these:</p>

<ul>
<li><p>The &ldquo;surface&rdquo; of an item can be different from the &ldquo;signature&rdquo; of
that item.</p></li>
<li><p>Restricting the components in a surface of an item according to the
visibility of that item (1.) enables local reasoning and (2.)
catches API mistakes.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An insight regarding DST grammar for Rust]]></title>
    <link href="http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust/"/>
    <updated>2014-03-13T07:04:00-04:00</updated>
    <id>http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust</id>
    <content type="html"><![CDATA[<p>Executive summary: <code>type</code> = <code>unsized</code> ⊎ <code>sized</code>, so we should use
<code>type</code> as our generalization marker, not <code>unsized</code>.</p>

<!-- more -->


<ul>
<li><a href="#background_dst">Background: Dynamically Sized Types (DST)</a></li>
<li><a href="#the_insight">The Insight: <code>type</code> is a better generalization marker</a></li>
<li><a href="#the_examples">Examples ported from DST, Take 5</a></li>
</ul>


<a name="L.a.id..background_dst..Background:.Dynamically.Sized.Types..DST...a."></a>
<h2><a id="background_dst">Background: Dynamically Sized Types (DST)</a></h2>

<p>The Rust team has been discussing incorporating &ldquo;dynamically-sized
types&rdquo; into the static semantics for Rust.  Essentially the idea is to
allow code to describe and name static types whose size is only known
at Runtime.  E.g. the integer vector <code>[int, ..5]</code> is known at compile
time to have five elements, and is considered (statically) sized,
while the vector <code>[int]</code> has unknown size at compile time, and so that
type is called unsized.</p>

<p><a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">There</a>
is <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">a</a>
series <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/26/thoughts-on-dst-1/">of</a>
blog <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-2">posts</a>
about <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-3/">dynamically</a>
sized <a href="http://smallcultfollowing.com/babysteps/blog/2013/12/02/thoughts-on-dst-4/">types</a>
on <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">niko&rsquo;s</a>
blog.
So I will not dive into the details too much here</p>

<p>The main points are that the compiler wants to know whether a type is
meant to always have a static size, or if it can potentially be
unsized.  In a language without type polymorphism, this might be easy
to determine directly from the parsed type expression (such as in the
vector examples I gave at the outset).  But once you add polymorphism,
things get a litle harder for the compiler.</p>

<p>Anyway, the plan drafted in Niko&rsquo;s
<a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">&ldquo;DST, Take 5&rdquo;</a>
is to add an <code>unsized</code> keyword, and then use it as a marker to make
certain spots more general than they are by default.  The reasoning
here is that in the common case, you want a type parameter to
represent a sized type.  (Since there are certain operations you
cannot do with a value of an unsized type, such copying the value into
some other location, the compiler needs to know its size statically so
that it can allocate an appopriate amount of space for it.)</p>

<p>So under that scheme, to write type parameter of most general type,
e.g. for a <code>struct</code> definition that ends with an unsized field,
you need to write:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Named</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span><span class="o">:</span> <span class="o">~</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>    <span class="n">payload</span><span class="o">:</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Accepts solely &lt;em&gt;sized&lt;/em&gt; Named&lt;T&gt;.</span>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Accepts both sized and &lt;em&gt;unsized&lt;/em&gt; Named&lt;T&gt;</span>
</span><span class='line'><span class="k">fn</span> <span class="n">bar</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That is, you need to use what I will call a &ldquo;generalization&rdquo; marker at
the spot where you bind a type variable, to indicate that the domain of
that type variable is more general than the common-case default of
a sized type.</p>

<p>For defining a trait that can be implemented on any possible type,
including unsized ones, you would need to use the <code>unsized</code> keyword
somewhere there as well.  &ldquo;DST, Take 5&rdquo; proposed
<code>trait Foo&lt;unsized Self&gt; : NormalBounds { ... }</code>
(or <code>trait Foo : unsized + NormalBounds { ... }</code>, but this is broken for
various reasons).
I had been suggesting <code>unsized trait Foo : NormalBounds { ... }</code>,
which Niko rightly objected to (since it is not the trait that is
unsized, but rather potentially its Self type).
Over the Rust work week last week I suggested
<code>trait Foo for unsized : NormalBounds</code> { &hellip; }, which I think is the first
suggestion that Niko and myself could both stomach.  (The reasoning
behind the latter suggestion is that we write <code>impl Trait for
SelfType</code>, so it makes sense to put the generalization marker into the
same position, i.e. filling the placeholder in: <code>Trait for _</code>.)</p>

<a name="L.a.id..the_insight..The.Insight:..code.type..code..is.a.better.generalization.marker..a."></a>
<h2><a id="the_insight">The Insight: <code>type</code> is a better generalization marker</a></h2>

<p>One of the concerns that Niko has pointed out to me is that it is easy
to (mis)read <code>unsized T</code> as saying &ldquo;<code>T</code> must be unsized&rdquo;.  But that is not
what it is saying; it is saying &ldquo;<code>T</code> <em>can</em> be unsized&rdquo;; you can still pass in
a sized type for <code>T</code>.</p>

<p>I was reflecting on that this morning, and I realized something:
The whole point of DST is to partition the type universe into (Sized ⊎ Unsized).
So if you want this construct to be more self-documenting, the
generalization marker should be using some name to describe that union
(Sized ⊎ Unsized), rather than the name <code>unsized</code>.</p>

<p>But we already have a very appropriate name for that union: <code>type</code>!</p>

<p>So that started me thinking: Why don&rsquo;t we use <code>type</code> as our generalization marker?
So the definition of <code>bar</code> in the example above would be written
<code>rust
fn bar&lt;type T&gt;(&amp;Named&lt;T&gt;) { ... }
</code>
In fact, this can have a very simple explanation: If we keep the <code>Sized</code> trait bound,
then you can just say that
<code>rust
fn foo&lt;T&gt;(args, ...){ ... }
</code>
desugars to
<code>rust
fn foo&lt;type T:Sized&gt;(args, ...) { ... }
</code>
and in general, any type variable formal binding <code>&lt;T:Bounds&gt;</code> desugars
to <code>&lt;type T:Sized+Bounds&gt;</code></p>

<p>I admit, when I first wrote this, I said &ldquo;hmm, this looks a bit like
C++, is that a problem?&rdquo;  But I&rsquo;m coming to like it.  The biggest
problem I can foresee is that a developer might be confused about when
they are suppposed to write <code>foo&lt;type T&gt;</code> versus <code>foo&lt;T&gt;</code>.  But chances
are that someone who does not understand the distinction will <em>not</em>
suffer if they just guess the answer; if they over-generalize, either:</p>

<ul>
<li><p>the code will compile successfully anyway, in which case there is
no harm, except perhaps w.r.t. forward-compatibility of their
library when they may have wished they had imposed the <code>Sized</code>
bound, or</p></li>
<li><p>the compiler will flag a problem in their code, in which case
hopefully our error messages will suggest to add a <code>:Sized</code> bound
or to just not use <code>type</code> in the binding for <code>T</code>.</p></li>
</ul>


<p>If they under-generalize, then they (or their library&rsquo;s clients) will
discover the problem when they apply <code>foo</code>.</p>

<p>For the trait case, it is a little less obvious what to do.
I think we could likewise write:
<code>trait Foo for type : NormalBounds</code>
for the maximally general case.
<code>trait Foo : NormalBounds</code> would then desugar to
<code>trait Foo for type : Sized + NormalBounds</code></p>

<p>So the point is that you would only use the <code>type</code> keyword when you
wanted to explicitly say &ldquo;I am generalizing over <em>all</em> types, not just
sized ones&rdquo;, and thus are opting into the additional constraints that
that scenario presents.</p>

<p>This approach wouldn&rsquo;t be so palatable under earlier envisioned
designs for DST where e.g. you were restricted to write explicitly
<code>unsized struct S { ... }</code> for structs that could end up being
unsized.  But at this point I think we have collectively decided that
such a restriction is unnecessary and undesired, so there is no worry
that someone might end up having to write <code>type struct S { ... }</code>,
which definitely looks nonsensical.</p>

<p>There is another potential advantage to this approach that I have not
explored much yet: we could also add an <code>Unsized</code> trait bound, and
allow people to write <code>&lt;type X:Unsized&gt;</code> for when they want to
restrict <code>X</code> to unsized types alone.  I am not sure whether this is
actual value in this, but it does not seem absurd to put in a special
case in the coherence checker to allow one to write
<code>impl&lt;X:Sized&gt; SomeTrait for X { ... }</code>
and
<code>impl&lt;X:Unsized&gt; SomeTrait for X { ... }</code>
in order to get full coverage of <code>SomeTrait</code> for all types.</p>

<p>Finally, another obvious (though obviously post Rust 1.0) direction
that this approach suggests is that if we decide to add
parameterization over constants, we can likewise use the <code>const</code>
keyword in the spot where I have written the generalization marker
<code>type</code>, e.g.
<code>rust
fn foo&lt;const N:int&gt;(nums: &amp;[f64, ..N]) { ... }
</code>
(In this case <code>const</code> would not be a generalization marker but instead
a <em>kind</em> marker, since it is changing the domain of the parameter from
being that of a type to being some value within a type.)</p>

<a name="L.a.id..the_examples..Examples.ported.from.DST..Take.5..a."></a>
<h2><a id="the_examples">Examples ported from DST, Take 5</a></h2>

<p>Here are the ported definitions of <code>Rc</code> and <code>RcData</code>.
(Update: had to turn off syntax highlighting to work-around a rendering bug on <code>*</code>.)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>struct Rc&lt;type T&gt; {
</span><span class='line'>    ptr: *RcData&lt;T&gt;,
</span><span class='line'>    // (a dummy field, just for illustrative purposes)
</span><span class='line'>    dummy: uint,
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;struct RcData&lt;type T&gt; {
</span><span class='line'>    ref_count: uint,&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#[max_alignment]
</span><span class='line'>data: T
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;impl&lt;type T&gt; Drop for Rc&lt;T&gt; {
</span><span class='line'>    fn drop&amp;lt;&amp;lsquo;a&gt;(&amp;amp;&#39;a mut self) {
</span><span class='line'>        unsafe {
</span><span class='line'>            intrinsics::drop(&amp;amp;mut (*self.ptr).data);
</span><span class='line'>            libc::free(self.ptr);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></p>

<p>Here is the <code>ImmDeref</code> example:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">impl</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Rc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">ptr</span><span class="p">).</span><span class="n">data</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>(I think I need a wider variety of examples, but this is good enough for now.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detective Work on Rust Closures]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/"/>
    <updated>2013-06-07T10:17:00-04:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#background_fns">Background: Closures (recurring and otherwise)</a></li>
<li><a href="#background_dst">Background: DST</a></li>
<li><a href="#the_problem">The Problem: DST and Closures</a>

<ul>
<li><a href="#is_fn_too_ugly">Is fn~ too ugly?</a></li>
<li><a href="#leveraging_proc">Leveraging a proc keyword/expression</a></li>
<li><a href="#other_ways_to_proc">Other ways to express proc</a>

<ul>
<li><a href="#digression_on_macros">A Personal Digression on Macros</a></li>
</ul>
</li>
<li><a href="#more_followup_on_procs_and_fns">More followups on procs and fns</a></li>
</ul>
</li>
<li><a href="#where_are_we">So where are we?</a></li>
</ul>


<p>I have recently been trying to keep myself abreast of a flurry of
discussion about reforming the design of Rust closures.  Niko has a
series of blog posts (<a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">2</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/">3</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/">4</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">5</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/">6</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">7</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">8</a>); the
content of some of those posts were further discussed at Rust team
meetings (<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-04-30">11</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-07">12</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-14">13</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-21">14</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-28">15</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04">16</a>), and there have been some
more formalized proposals with their own set of discussions: (<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform">9</a>,
<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform-%28specific%29">10</a>).</p>

<p>There are also associated github issues (<a href="https://github.com/mozilla/rust/issues/2202">17</a>, <a href="https://github.com/mozilla/rust/issues/3569">18</a>, <a href="https://github.com/mozilla/rust/issues/6308">19</a>), though
without sufficient context the discussion in the github issues may not
always be intelligible.</p>

<p>Some of the links above are more about &ldquo;Dynamically Sized Types&rdquo;
(DST), a related topic, as we shall see.</p>

<p>This post is my attempt to condense all of this information down into
something where I can see all the pieces at once, and discard the
red herrings along the way.</p>

<!-- more -->


<a name="L.a.id..background_fns..Background:.Closures..recurring.and.otherwise...a."></a>
<h2><a id="background_fns">Background: Closures (recurring and otherwise)</a></h2>

<p>In Rust circa version 0.6, closures have three categories according to
the type system (<code>&amp;fn</code>, <code>@fn</code>, and <code>~fn</code>), but <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">as Niko describes</a>,
they can be divided into two kinds: by-reference closures and copying
closures.  By-reference closures are also referred to as
stack-allocated closures or sometimes &ldquo;stack closure.&rdquo;
(There is also a orthogonal division of <code>once</code> closures, versus
closures that can be invoked more than once; some of these things are,
to my knowledge, only part of planned future implementation.  Niko
discusses them in the blog posts but I&rsquo;m mostly sidestep them here.)</p>

<p>As Niko states in the first paragraph of <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, a stack closure is
allocated on the stack, and can refer to and manipulate the local
variables of the enclosing stack frame (by reference).</p>

<p>In Rust (as of version 0.6), one creates a stack-allocated closure by
writing an expression <code>|x ...| { ... }</code> within an expression context
dictating that it wants a closure of <code>&amp;fn</code> type.  Analogously, a
closure allocated on the exchange-heap is expressed by putting the
expression into a context of <code>~fn</code> type, et cetera.  Since a
stack-allocated closure is currently expressed solely by use of <code>&amp;fn</code>
type, Niko often uses the term <code>&amp;fn</code> closure synonymously with
stack-allocated closure.</p>

<p>(However, Niko also points out (first section of
<a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">&ldquo;Procedures, Continued&rdquo;</a>) that one can borrow a <code>@fn</code> or <code>~fn</code> to
a <code>&amp;fn</code>, so the type does <em>not</em> tell you whether you actually have a
by-reference or a copying-closure.)</p>

<p>Here is the example of an unsound function that Niko described in
his <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">Case of the Recurring Closure</a> post from 2013-04-30,
making use of higher-order functions to express a fixed-point
combinator:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">R</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="bp">self</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This struct is needed to create the</span>
</span><span class='line'>    <span class="c1">// otherwise infinite type of a fn that</span>
</span><span class='line'>    <span class="c1">// accepts itself as argument:</span>
</span><span class='line'>    <span class="n">c</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;self</span> <span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">R</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">innocent_looking_victim</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">vec</span> <span class="o">=</span> <span class="o">~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">conspirator</span><span class="p">(</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">100</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">vec</span><span class="p">.</span><span class="n">each</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">f</span><span class="p">.</span><span class="n">c</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">conspirator</span><span class="p">(</span><span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">R</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">R</span> <span class="p">{</span><span class="n">c</span><span class="o">:</span> <span class="n">f</span><span class="p">};</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">As</span> <span class="n">Niko</span> <span class="n">explains</span><span class="p">,</span> <span class="n">the</span> <span class="n">vector</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span> <span class="n">is</span> <span class="n">mutated</span> <span class="k">while</span> <span class="n">being</span> <span class="n">traversed</span> <span class="n">by</span>
</span><span class='line'><span class="n">an</span> <span class="n">iterator</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span> <span class="n">illegal</span><span class="p">.</span>  <span class="n">The</span> <span class="n">closure</span> <span class="err">`</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="err">`</span> <span class="n">captures</span>
</span><span class='line'><span class="n">a</span> <span class="n">reference</span> <span class="n">to</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span><span class="p">,</span> <span class="n">and</span> <span class="n">Rust</span><span class="nl">&#39;s</span> <span class="n">borrow</span> <span class="n">checker</span> <span class="n">is</span> <span class="n">not</span> <span class="n">treating</span> <span class="n">the</span> <span class="n">argument</span>
</span><span class='line'><span class="err">`</span><span class="n">f</span><span class="err">`</span> <span class="k">as</span> <span class="n">a</span> <span class="n">potential</span> <span class="n">source</span> <span class="n">of</span> <span class="n">aliases</span> <span class="n">to</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span><span class="p">,</span> <span class="n">even</span> <span class="n">though</span> <span class="n">it</span> <span class="n">does</span> <span class="n">alias</span>
</span><span class='line'><span class="err">`</span><span class="n">vec</span><span class="err">`</span> <span class="n">because</span> <span class="err">`</span><span class="n">f</span><span class="err">`</span> <span class="n">ends</span> <span class="n">up</span> <span class="n">being</span> <span class="n">bound</span> <span class="n">to</span> <span class="n">the</span> <span class="n">closure</span> <span class="err">`</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="err">`</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">An</span> <span class="n">important</span> <span class="n">detail</span> <span class="n">here</span> <span class="n">is</span> <span class="n">that</span> <span class="n">the</span> <span class="n">closure</span> <span class="k">in</span> <span class="n">question</span> <span class="n">is</span>
</span><span class='line'><span class="n">a</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Niko</span> <span class="n">has</span> <span class="n">described</span> <span class="n">his</span> <span class="n">solution</span> <span class="n">to</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="n">it</span> <span class="n">would</span>
</span><span class='line'><span class="n">entail</span> <span class="n">adding</span> <span class="n">some</span> <span class="n">new</span> <span class="n">rules</span> <span class="n">about</span> <span class="n">how</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">invoked</span>
</span><span class='line'><span class="n">and</span> <span class="n">passed</span> <span class="k">as</span> <span class="n">parameters</span><span class="p">.</span>  <span class="n">One</span> <span class="n">of</span> <span class="n">the</span> <span class="n">main</span> <span class="n">changes</span> <span class="n">imposed</span> <span class="n">by</span> <span class="n">his</span>
</span><span class='line'><span class="n">solution</span> <span class="n">was</span> <span class="n">that</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">would</span> <span class="n">become</span> <span class="n">non</span><span class="o">-</span><span class="n">aliasable</span><span class="p">;</span>
</span><span class='line'><span class="n">this</span> <span class="n">would</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">one</span> <span class="n">could</span> <span class="n">not</span> <span class="n">express</span> <span class="n">the</span> <span class="n">Y</span><span class="o">-</span><span class="n">combinator</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">restriction</span> <span class="n">to</span> <span class="n">ensure</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">unaliasable</span> <span class="n">interacts</span>
</span><span class='line'><span class="n">with</span> <span class="n">other</span> <span class="n">proposals</span><span class="p">,</span> <span class="k">as</span> <span class="n">we</span> <span class="n">shall</span> <span class="n">see</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">Note</span> <span class="n">that</span> <span class="n">Rust</span> <span class="n">does</span> <span class="n">have</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">expressing</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">aliasable</span> <span class="n">pointer</span>
</span><span class='line'><span class="n">to</span> <span class="err">`</span><span class="n">T</span><span class="err">`</span> <span class="k">for</span> <span class="n">any</span> <span class="err">`</span><span class="n">T</span><span class="err">`</span><span class="o">:</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">T</span><span class="err">`</span><span class="p">.)</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;background_dst&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Background</span><span class="o">:</span> <span class="n">DST</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">heart</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Dynamically</span> <span class="nb">Sized</span> <span class="n">Types</span> <span class="n">proposal</span> <span class="n">is</span> <span class="n">the</span> <span class="n">discrepancy</span>
</span><span class='line'><span class="n">described</span> <span class="k">in</span> <span class="n">Niko</span><span class="nl">&#39;s</span> <span class="p">[</span><span class="n">DST</span><span class="p">,</span> <span class="n">Revisited</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="n">post</span> <span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span>
</span><span class='line'><span class="p">(</span><span class="n">published</span> <span class="n">contemporaneously</span> <span class="n">with</span> <span class="p">[</span><span class="n">Case</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Recurring</span> <span class="n">Closure</span><span class="p">][</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">has</span> <span class="n">been</span> <span class="n">wrestling</span> <span class="n">with</span> <span class="n">the</span> <span class="n">idea</span> <span class="k">for</span> <span class="n">a</span> <span class="k">while</span><span class="p">,</span> <span class="k">as</span> <span class="n">one</span> <span class="n">can</span> <span class="n">see</span> <span class="n">on</span>
</span><span class='line'><span class="n">his</span> <span class="n">posts</span> <span class="n">from</span> <span class="p">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">23</span><span class="p">][</span><span class="mi">20</span><span class="p">]</span> <span class="n">and</span> <span class="p">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">27</span><span class="p">][</span><span class="mi">21</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">vectors</span> <span class="p">(</span><span class="n">and</span> <span class="n">strings</span><span class="p">,</span> <span class="n">which</span> <span class="n">we</span> <span class="n">will</span> <span class="n">treat</span> <span class="k">as</span> <span class="n">a</span> <span class="n">special</span> <span class="n">case</span>
</span><span class='line'><span class="n">of</span> <span class="n">vectors</span><span class="p">)</span> <span class="n">come</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">forms</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span> <span class="n">dynamic</span><span class="o">-</span><span class="n">length</span><span class="o">:</span> <span class="n">heap</span><span class="o">-</span><span class="n">allocated</span><span class="p">,</span> <span class="n">carries</span> <span class="n">its</span> <span class="n">length</span> <span class="n">N</span> <span class="k">as</span> <span class="n">part</span> <span class="n">of</span> <span class="n">its</span>
</span><span class='line'>  <span class="n">record</span> <span class="n">structure</span><span class="p">.</span>  <span class="n">Consists</span> <span class="n">of</span> <span class="n">some</span> <span class="n">amount</span> <span class="n">of</span> <span class="n">meta</span><span class="o">-</span><span class="n">data</span><span class="p">,</span> <span class="n">including</span>
</span><span class='line'>  <span class="n">the</span> <span class="n">length</span> <span class="n">word</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">the</span> <span class="n">inline</span><span class="o">-</span><span class="n">allocated</span> <span class="n">array</span> <span class="n">of</span> <span class="n">N</span>
</span><span class='line'>  <span class="n">elements</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'><span class="o">*</span> <span class="n">slice</span><span class="o">:</span> <span class="n">represents</span> <span class="n">a</span> <span class="n">substring</span> <span class="n">of</span> <span class="n">a</span> <span class="n">vector</span><span class="p">;</span> <span class="n">consists</span> <span class="n">of</span> <span class="n">two</span> <span class="n">words</span><span class="o">:</span> <span class="n">a</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">payload</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">length</span> <span class="n">bound</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'><span class="o">*</span> <span class="n">fixed</span><span class="o">-</span><span class="n">length</span><span class="o">:</span> <span class="n">represents</span> <span class="n">exactly</span> <span class="n">N</span> <span class="n">elements</span><span class="p">,</span> <span class="n">where</span> <span class="n">N</span> <span class="n">is</span> <span class="n">statically</span>
</span><span class='line'>  <span class="n">tracked</span> <span class="n">at</span> <span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="p">.</span>  <span class="n">Consists</span> <span class="n">of</span> <span class="n">just</span> <span class="n">the</span> <span class="n">array</span> <span class="n">of</span> <span class="n">elements</span><span class="p">,</span>
</span><span class='line'>  <span class="err">`</span><span class="n">T</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="err">`</span><span class="p">,</span> <span class="n">and</span> <span class="n">nothing</span> <span class="n">more</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="p">[</span><span class="n">T</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="n">a</span> <span class="n">slice</span><span class="nl">&#39;s</span> <span class="n">two</span><span class="o">-</span><span class="n">word</span> <span class="n">representation</span> <span class="n">is</span> <span class="n">quite</span>
</span><span class='line'><span class="n">different</span> <span class="n">from</span> <span class="n">the</span> <span class="n">representations</span> <span class="n">of</span> <span class="n">the</span> <span class="n">other</span> <span class="n">variants</span><span class="p">.</span>  <span class="n">His</span>
</span><span class='line'><span class="n">proposal</span> <span class="n">is</span> <span class="n">to</span> <span class="n">unify</span> <span class="n">the</span> <span class="n">first</span> <span class="n">two</span> <span class="n">representations</span><span class="p">,</span> <span class="n">by</span> <span class="n">laying</span> <span class="n">out</span>
</span><span class='line'><span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">as</span> <span class="n">pairs</span> <span class="n">of</span> <span class="n">words</span> <span class="p">(</span><span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">boxed</span> <span class="n">elements</span>
</span><span class='line'><span class="n">array</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">length</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="n">Niko</span> <span class="n">claimed</span> <span class="n">that</span> <span class="n">this</span> <span class="n">makes</span> <span class="n">a</span> <span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">valid</span> <span class="n">slices</span><span class="p">,</span> <span class="s">&quot;apart</span>
</span><span class='line'><span class="s">from the box header&quot;</span><span class="p">;</span> <span class="n">it</span> <span class="n">seems</span> <span class="n">to</span> <span class="n">me</span> <span class="n">like</span> <span class="n">the</span> <span class="k">box</span> <span class="n">header</span> <span class="n">is</span> <span class="n">quite</span>
</span><span class='line'><span class="n">relevant</span> <span class="n">here</span><span class="p">,</span> <span class="n">unless</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">is</span> <span class="n">that</span> <span class="n">when</span> <span class="n">you</span> <span class="n">coerce</span> <span class="n">a</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">slice</span><span class="p">,</span> <span class="n">you</span> <span class="n">increment</span> <span class="n">the</span> <span class="n">pointer</span> <span class="n">value</span> <span class="n">accordingly</span><span class="p">...)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Then</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">classifies</span> <span class="n">the</span> <span class="n">types</span> <span class="n">of</span> <span class="n">Rust</span> <span class="n">into</span> <span class="n">two</span> <span class="n">categories</span><span class="o">:</span> <span class="nb">Sized</span> <span class="n">and</span>
</span><span class='line'><span class="n">Unsized</span><span class="p">;</span> <span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.,</span> <span class="n">size</span> <span class="n">is</span> <span class="n">statically</span> <span class="n">known</span><span class="p">,</span> <span class="n">versus</span> <span class="n">size</span> <span class="n">is</span> <span class="n">tracked</span> <span class="n">at</span>
</span><span class='line'><span class="n">runtime</span> <span class="p">(</span><span class="n">maybe</span> <span class="n">the</span> <span class="n">letters</span> <span class="n">S</span> <span class="n">and</span> <span class="n">R</span> <span class="n">would</span> <span class="n">have</span> <span class="n">been</span> <span class="n">more</span> <span class="n">appropriate</span>
</span><span class='line'><span class="n">than</span> <span class="n">S</span> <span class="n">and</span> <span class="n">U</span><span class="p">...).</span>  <span class="n">The</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">cannot</span> <span class="n">themselves</span> <span class="kr">be</span> <span class="n">assigned</span>
</span><span class='line'><span class="k">as</span> <span class="n">types</span> <span class="n">of</span> <span class="n">local</span> <span class="n">variables</span><span class="p">,</span> <span class="n">and</span> <span class="n">you</span> <span class="n">cannot</span> <span class="n">have</span> <span class="n">vectors</span> <span class="n">of</span> <span class="n">elements</span>
</span><span class='line'><span class="n">of</span> <span class="kr">unsized</span> <span class="k">type</span><span class="p">;</span> <span class="n">this</span> <span class="n">all</span> <span class="n">stems</span> <span class="n">from</span> <span class="n">the</span> <span class="n">fact</span> <span class="n">that</span> <span class="s">&quot;unsized types&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="n">not</span> <span class="n">have</span> <span class="n">a</span> <span class="k">static</span> <span class="n">size</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">The</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">are</span> <span class="n">arguably</span> <span class="n">not</span> <span class="n">actually</span> <span class="n">types</span><span class="p">;</span> <span class="n">we</span> <span class="n">might</span> <span class="kr">be</span>
</span><span class='line'><span class="n">well</span><span class="o">-</span><span class="n">served</span> <span class="n">by</span> <span class="n">referring</span> <span class="n">to</span> <span class="n">them</span> <span class="k">as</span> <span class="s">&quot;pretypes&quot;</span> <span class="n">or</span> <span class="n">something</span><span class="p">).</span>
</span><span class='line'><span class="n">But</span> <span class="n">pointers</span> <span class="n">to</span> <span class="kr">unsized</span> <span class="n">types</span> <span class="n">are</span> <span class="n">valid</span> <span class="n">types</span><span class="p">.</span>  <span class="n">Such</span> <span class="n">pointers</span> <span class="n">are</span> <span class="n">the</span>
</span><span class='line'><span class="n">pairs</span> <span class="n">of</span> <span class="n">words</span> <span class="n">discussed</span> <span class="n">above</span><span class="p">,</span> <span class="n">aka</span> <span class="s">&quot;fat pointers&quot;</span><span class="o">:</span> <span class="err">`</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">meta</span><span class="p">)</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'><span class="n">where</span> <span class="err">`</span><span class="n">payload</span><span class="err">`</span> <span class="n">is</span> <span class="n">the</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">data</span><span class="p">,</span> <span class="n">and</span> <span class="err">`</span><span class="n">meta</span><span class="err">`</span> <span class="n">is</span> <span class="n">the</span>
</span><span class='line'><span class="n">descriptor</span> <span class="n">that</span> <span class="n">includes</span> <span class="n">some</span> <span class="n">way</span> <span class="n">to</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">the</span> <span class="n">payload</span>
</span><span class='line'><span class="p">(</span><span class="n">to</span> <span class="n">support</span> <span class="n">runtime</span> <span class="n">bounds</span> <span class="n">checks</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">fact</span> <span class="n">that</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">need</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">treated</span> <span class="n">specially</span> <span class="n">leads</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">complication</span><span class="p">,</span> <span class="n">discussed</span> <span class="n">further</span> <span class="k">in</span> <span class="n">the</span> <span class="n">post</span><span class="p">;</span> <span class="n">how</span> <span class="n">to</span> <span class="n">differentiate</span>
</span><span class='line'><span class="n">between</span> <span class="k">type</span><span class="o">-</span><span class="n">parameterized</span> <span class="n">code</span> <span class="n">that</span> <span class="n">works</span> <span class="n">on</span> <span class="n">both</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">types</span><span class="p">,</span>
</span><span class='line'><span class="n">versus</span> <span class="n">typed</span><span class="o">-</span><span class="n">parameterized</span> <span class="n">code</span> <span class="n">that</span> <span class="n">solely</span> <span class="n">operates</span> <span class="n">on</span> <span class="n">sized</span> <span class="n">types</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">method</span> <span class="n">proposed</span> <span class="k">in</span> <span class="n">the</span> <span class="n">post</span> <span class="n">is</span> <span class="n">to</span> <span class="n">express</span> <span class="n">the</span> <span class="n">distinction</span> <span class="n">via</span> <span class="n">a</span>
</span><span class='line'><span class="k">trait</span> <span class="n">bound</span><span class="o">:</span> <span class="n">the</span> <span class="err">`</span><span class="nb">Sized</span><span class="err">`</span> <span class="n">bound</span> <span class="n">would</span> <span class="n">restrict</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">to</span>
</span><span class='line'><span class="n">one</span> <span class="n">of</span> <span class="n">statically</span><span class="o">-</span><span class="n">known</span> <span class="n">size</span><span class="p">;</span> <span class="n">you</span> <span class="n">would</span> <span class="n">not</span> <span class="kr">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">express</span>
</span><span class='line'><span class="n">types</span> <span class="n">like</span> <span class="err">`</span><span class="p">[</span><span class="n">X</span><span class="p">,</span> <span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="err">`</span> <span class="p">(</span><span class="n">a</span> <span class="n">fixed</span><span class="o">-</span><span class="n">length</span> <span class="n">vector</span> <span class="n">of</span> <span class="mi">3</span> <span class="n">X</span><span class="nl">&#39;es</span><span class="p">),</span> <span class="n">unless</span> <span class="n">you</span>
</span><span class='line'><span class="n">include</span> <span class="n">the</span> <span class="n">bound</span> <span class="err">`</span><span class="n">X</span><span class="o">:</span><span class="nb">Sized</span><span class="err">`</span><span class="p">.</span>  <span class="p">(</span><span class="n">There</span> <span class="n">is</span> <span class="n">more</span> <span class="n">on</span> <span class="n">this</span> <span class="n">restriction</span>
</span><span class='line'><span class="n">and</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">ease</span> <span class="n">it</span> <span class="n">further</span> <span class="n">down</span><span class="p">.)</span>
</span><span class='line'>
</span><span class='line'><span class="n">One</span> <span class="n">of</span> <span class="n">the</span> <span class="n">benefits</span> <span class="n">of</span> <span class="n">DST</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">proposes</span> <span class="n">early</span> <span class="n">on</span> <span class="n">is</span> <span class="n">that</span>
</span><span class='line'><span class="n">Traits</span> <span class="n">and</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">other</span> <span class="n">instances</span> <span class="n">of</span> <span class="kr">unsized</span> <span class="n">types</span><span class="p">,</span> <span class="n">so</span> <span class="n">that</span>
</span><span class='line'><span class="n">Rust</span><span class="nl">&#39;s</span> <span class="k">type</span> <span class="n">hierarchy</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">presented</span> <span class="n">uniformly</span> <span class="n">like</span> <span class="n">so</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>            <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>            <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="n">T</span>        <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>           <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>           <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>     <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>         <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>          <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>          <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>        <span class="c1">// existential (&amp;ldquo;exists S:Trait.S&amp;rdquo;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">S</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="p">(</span><span class="n">Note</span> <span class="n">that</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">types</span> <span class="n">assigned</span> <span class="n">to</span> <span class="n">expressions</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">instances</span>
</span><span class='line'><span class="n">of</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">S</span><span class="err">`</span> <span class="n">according</span> <span class="n">to</span> <span class="n">this</span> <span class="n">grammar</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..the_problem..The.Problem:.DST.and.Closures..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;the_problem&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">Problem</span><span class="o">:</span> <span class="n">DST</span> <span class="n">and</span> <span class="n">Closures</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span><span class="p">,</span> <span class="n">from</span> <span class="n">the</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Case</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Recurring</span> <span class="n">Closure</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">we</span> <span class="n">saw</span> <span class="n">that</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">were</span> <span class="n">to</span> <span class="n">become</span> <span class="n">non</span><span class="o">-</span><span class="n">copyable</span><span class="p">.</span>
</span><span class='line'><span class="n">But</span> <span class="n">under</span> <span class="n">the</span> <span class="n">DST</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">generic</span> <span class="n">code</span> <span class="n">should</span> <span class="kr">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">treat</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">the</span> <span class="n">same</span> <span class="k">for</span> <span class="n">all</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">including</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">when</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">some</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>
</span><span class='line'><span class="n">These</span> <span class="n">two</span> <span class="n">criteria</span> <span class="n">are</span> <span class="n">not</span> <span class="n">compatible</span><span class="p">;</span> <span class="n">Niko</span> <span class="n">has</span> <span class="n">lots</span> <span class="n">more</span> <span class="n">explanation</span>
</span><span class='line'><span class="k">in</span> <span class="n">his</span> <span class="n">corresponding</span> <span class="n">post</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Recurring</span> <span class="n">Closures</span> <span class="n">and</span> <span class="n">Dynamically</span> <span class="nb">Sized</span> <span class="n">Types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mf">13.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">immediate</span> <span class="n">proposals</span> <span class="n">to</span> <span class="n">resolve</span> <span class="n">this</span> <span class="n">were</span> <span class="n">either</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">we</span> <span class="n">write</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">instead</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">all</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">including</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span> <span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">is</span> <span class="n">forced</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">unaliasable</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="n">borrow</span><span class="o">-</span><span class="n">checker</span><span class="p">,</span> <span class="n">and</span> <span class="n">so</span> <span class="n">the</span> <span class="n">hole</span> <span class="n">goes</span> <span class="n">away</span><span class="p">,</span> <span class="n">or</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">we</span> <span class="n">change</span> <span class="n">notation</span><span class="p">,</span> <span class="n">and</span> <span class="n">move</span> <span class="n">the</span> <span class="n">sigils</span> <span class="k">for</span> <span class="n">closures</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">after</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="k">fn</span><span class="p">,</span>
</span><span class='line'><span class="n">side</span><span class="o">-</span><span class="n">stepping</span> <span class="n">the</span> <span class="n">special</span> <span class="n">treatment</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">versus</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">by</span> <span class="n">getting</span>
</span><span class='line'><span class="n">rid</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="n">replacing</span> <span class="n">it</span> <span class="n">with</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..is_fn_too_ugly..Is.fn..too.ugly...a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;is_fn_too_ugly&quot;</span><span class="o">&gt;</span><span class="n">Is</span> <span class="k">fn</span><span class="o">~</span> <span class="n">too</span> <span class="n">ugly</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">at</span> <span class="n">first</span> <span class="n">favored</span> <span class="n">the</span> <span class="n">latter</span><span class="p">,</span> <span class="n">then</span> <span class="n">he</span> <span class="n">wrote</span> <span class="n">a</span> <span class="n">second</span> <span class="n">post</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">Mutable</span> <span class="n">Fn</span> <span class="n">Alternatives</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">on</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">13</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">reconsidered</span> <span class="n">whether</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">~&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">too</span> <span class="n">ugly</span><span class="p">,</span> <span class="n">and</span> <span class="n">included</span>
</span><span class='line'><span class="n">new</span> <span class="n">survey</span> <span class="n">of</span> <span class="n">the</span> <span class="n">options</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Maybe</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">not</span> <span class="n">that</span> <span class="n">bad</span><span class="p">,</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Maybe</span> <span class="n">make</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">all</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">borrowed</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span><span class="p">),</span> <span class="n">removing</span>
</span><span class='line'><span class="n">the</span> <span class="n">need</span> <span class="k">for</span> <span class="n">any</span> <span class="n">sigil</span><span class="p">,</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Make</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">denote</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closures</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">replace</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">~&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">with</span> <span class="n">a</span> <span class="n">new</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="p">(</span><span class="n">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">variation</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">bullet</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">the</span> <span class="n">second</span> <span class="n">and</span> <span class="n">third</span> <span class="n">bullets</span><span class="p">,</span> <span class="n">the</span> <span class="n">main</span> <span class="n">point</span> <span class="n">is</span><span class="o">:</span> <span class="n">If</span> <span class="n">you</span> <span class="n">need</span> <span class="n">to</span>
</span><span class='line'><span class="n">capture</span> <span class="n">state</span> <span class="k">in</span> <span class="n">a</span> <span class="n">manner</span> <span class="n">that</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">expressed</span> <span class="n">via</span> <span class="n">the</span> <span class="n">available</span>
</span><span class='line'><span class="n">options</span> <span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span><span class="p">,</span> <span class="n">or</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">if</span> <span class="n">present</span><span class="p">),</span> <span class="n">then</span> <span class="n">you</span>
</span><span class='line'><span class="n">have</span> <span class="n">to</span> <span class="kn">use</span> <span class="n">an</span> <span class="k">trait</span> <span class="n">instead</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">an</span> <span class="n">object</span> <span class="n">or</span> <span class="n">a</span> <span class="n">record</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="n">I</span> <span class="n">personally</span> <span class="n">am</span> <span class="n">not</span> <span class="n">thrilled</span> <span class="n">about</span> <span class="n">losing</span> <span class="n">the</span> <span class="n">option</span> <span class="n">of</span> <span class="n">using</span>
</span><span class='line'><span class="n">closures</span> <span class="n">to</span> <span class="n">express</span> <span class="n">combinator</span> <span class="n">libraries</span><span class="p">,</span> <span class="n">a</span> <span class="kn">use</span> <span class="n">case</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">@&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..leveraging_proc..Leveraging.a.proc.keyword.expression..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;leveraging_proc&quot;</span><span class="o">&gt;</span><span class="n">Leveraging</span> <span class="n">a</span> <span class="k">proc</span> <span class="n">keyword</span><span class="o">/</span><span class="n">expression</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Then</span> <span class="n">a</span> <span class="n">third</span> <span class="n">post</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Procedures</span><span class="p">,</span> <span class="n">Continued</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">from</span>
</span><span class='line'><span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="n">refined</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">proposal</span> <span class="n">a</span> <span class="n">bit</span> <span class="n">further</span><span class="p">.</span>  <span class="n">As</span> <span class="n">stated</span> <span class="k">in</span>
</span><span class='line'><span class="n">the</span> <span class="n">background</span> <span class="n">on</span> <span class="n">closures</span><span class="p">,</span> <span class="n">Rust</span> <span class="n">has</span> <span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closures</span> <span class="n">and</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closures</span><span class="p">;</span> <span class="n">the</span> <span class="n">choice</span> <span class="n">of</span> <span class="n">which</span> <span class="n">variant</span> <span class="n">to</span> <span class="n">construct</span> <span class="n">is</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="k">type</span> <span class="n">expected</span> <span class="n">by</span> <span class="n">the</span> <span class="n">context</span> <span class="n">of</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;|</span><span class="n">x</span> <span class="p">...</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">expression</span><span class="p">.</span>
</span><span class='line'><span class="n">In</span> <span class="n">this</span> <span class="n">post</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">proposed</span> <span class="n">that</span> <span class="n">the</span> <span class="n">distinction</span> <span class="n">here</span> <span class="n">deserves</span> <span class="n">a</span>
</span><span class='line'><span class="n">starker</span> <span class="n">line</span> <span class="n">between</span> <span class="n">the</span> <span class="n">two</span> <span class="n">forms</span><span class="p">.</span>  <span class="p">(</span><span class="n">In</span> <span class="n">that</span> <span class="n">post</span><span class="p">,</span> <span class="n">he</span> <span class="n">proposed</span> <span class="n">both</span> <span class="n">a</span>
</span><span class='line'><span class="n">revision</span> <span class="n">to</span> <span class="n">English</span> <span class="n">jargon</span> <span class="n">and</span> <span class="n">also</span> <span class="n">to</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">syntax</span><span class="p">;</span> <span class="n">I</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">m</span> <span class="n">going</span> <span class="n">to</span>
</span><span class='line'><span class="n">focus</span> <span class="n">solely</span> <span class="n">on</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">syntax</span> <span class="n">changes</span><span class="p">,</span> <span class="n">and</span> <span class="kd">let</span> <span class="n">those</span> <span class="n">guide</span> <span class="n">the</span>
</span><span class='line'><span class="n">changes</span> <span class="n">to</span> <span class="n">my</span> <span class="n">own</span> <span class="n">jargon</span> <span class="n">here</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">Niko</span> <span class="n">proposes</span> <span class="n">distinguishing</span> <span class="n">a</span> <span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closure</span> <span class="n">from</span> <span class="n">a</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closure</span> <span class="n">via</span> <span class="n">keywords</span><span class="p">.</span>  <span class="n">A</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">constructed</span>
</span><span class='line'><span class="n">solely</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">copying</span> <span class="n">closure</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">constructed</span> <span class="n">solely</span> <span class="n">via</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">While</span> <span class="n">discussing</span> <span class="n">this</span> <span class="n">proposal</span> <span class="n">henceforth</span><span class="p">,</span> <span class="n">I</span> <span class="n">will</span> <span class="n">refer</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closure</span> <span class="k">as</span> <span class="n">an</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closure</span> <span class="n">and</span> <span class="n">a</span> <span class="n">copying</span> <span class="n">closure</span> <span class="k">as</span> <span class="n">a</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closure</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="k">type</span> <span class="n">hierarchy</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">then</span> <span class="n">provides</span> <span class="k">for</span> <span class="n">this</span> <span class="n">is</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>               <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>               <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span>     <span class="c1">// closures (*)</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;r</span> <span class="n">T</span>           <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>              <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>              <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>        <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>            <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">...</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>             <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>             <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>           <span class="c1">// existential (&quot;exists S:Trait.S&quot;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">proc</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span>   <span class="c1">// procedures (*)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Now</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">are</span> <span class="n">considered</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sized</span> <span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">because</span> <span class="n">they</span> <span class="n">are</span>
</span><span class='line'><span class="n">always</span> <span class="n">represented</span> <span class="n">by</span> <span class="n">two</span> <span class="n">words</span><span class="o">:</span> <span class="n">a</span> <span class="p">(</span><span class="n">borrowed</span><span class="p">)</span> <span class="n">environment</span> <span class="n">pointer</span> <span class="p">(</span><span class="n">to</span>
</span><span class='line'><span class="n">the</span> <span class="n">stack</span> <span class="k">in</span> <span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">though</span> <span class="n">perhaps</span> <span class="n">it</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">generalized</span>
</span><span class='line'><span class="n">to</span> <span class="n">point</span> <span class="n">elsewhere</span><span class="p">)</span> <span class="n">and</span> <span class="n">a</span> <span class="n">function</span> <span class="n">pointer</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">are</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="kr">unsized</span> <span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">because</span> <span class="n">their</span> <span class="n">copied</span> <span class="n">lexical</span> <span class="n">environment</span> <span class="n">is</span> <span class="n">of</span> <span class="n">some</span>
</span><span class='line'><span class="n">dynamically</span><span class="o">-</span><span class="n">determined</span> <span class="n">size</span> <span class="n">that</span> <span class="n">they</span> <span class="n">must</span> <span class="n">carry</span> <span class="k">in</span> <span class="n">their</span> <span class="n">record</span>
</span><span class='line'><span class="n">structure</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">this</span> <span class="n">version</span> <span class="n">of</span> <span class="n">the</span> <span class="n">proposal</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">can</span> <span class="n">now</span> <span class="kr">be</span> <span class="n">allocated</span> <span class="n">to</span> <span class="n">either</span>
</span><span class='line'><span class="n">the</span> <span class="n">exchange</span> <span class="n">heap</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">or</span> <span class="n">the</span> <span class="n">task</span> <span class="n">heap</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;@</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">).</span>  <span class="n">So</span> <span class="n">this</span>
</span><span class='line'><span class="n">brings</span> <span class="n">back</span> <span class="n">the</span> <span class="n">ability</span> <span class="n">to</span> <span class="n">express</span> <span class="n">combinator</span> <span class="n">libraries</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">post</span> <span class="n">provides</span> <span class="n">further</span> <span class="n">detail</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">dissection</span> <span class="n">of</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closure</span> <span class="n">types</span> <span class="p">(</span><span class="n">which</span> <span class="n">include</span> <span class="n">important</span> <span class="n">details</span> <span class="n">like</span> <span class="n">the</span>
</span><span class='line'><span class="n">lifetime</span> <span class="n">and</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bounds</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">the</span> <span class="n">closed</span><span class="o">-</span><span class="n">over</span> <span class="n">variables</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span>
</span><span class='line'><span class="n">important</span> <span class="n">since</span> <span class="n">with</span> <span class="n">a</span> <span class="n">separate</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">now</span> <span class="n">reasonable</span> <span class="k">for</span>
</span><span class='line'><span class="n">different</span> <span class="n">defaults</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">chosen</span> <span class="k">for</span> <span class="n">two</span> <span class="n">cases</span><span class="p">;</span> <span class="n">useful</span> <span class="k">for</span> <span class="n">making</span> <span class="n">the</span>
</span><span class='line'><span class="n">common</span> <span class="n">case</span> <span class="n">succinct</span><span class="p">).</span>  <span class="n">He</span> <span class="n">also</span> <span class="n">describes</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">variations</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">theme</span><span class="p">,</span> <span class="n">including</span> <span class="n">modeling</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">via</span> <span class="n">traits</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">boxed</span>
</span><span class='line'><span class="n">traits</span> <span class="n">are</span> <span class="n">objects</span> <span class="n">carrying</span> <span class="n">virtual</span> <span class="n">method</span> <span class="n">dispatch</span> <span class="n">tables</span><span class="p">),</span> <span class="n">and</span> <span class="n">then</span>
</span><span class='line'><span class="n">expressing</span> <span class="n">them</span> <span class="n">via</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macro</span> <span class="p">(</span><span class="n">which</span> <span class="n">means</span> <span class="n">they</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">left</span>
</span><span class='line'><span class="n">out</span> <span class="n">of</span> <span class="n">the</span> <span class="n">core</span> <span class="n">language</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..other_ways_to_proc..Other.ways.to.express.proc..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;other_ways_to_proc&quot;</span><span class="o">&gt;</span><span class="n">Other</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">express</span> <span class="k">proc</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">his</span> <span class="n">next</span> <span class="n">post</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Removing</span> <span class="n">Procs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">elaborates</span> <span class="n">further</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">need</span> <span class="n">not</span> <span class="kr">be</span> <span class="n">supported</span> <span class="k">in</span> <span class="n">the</span> <span class="n">language</span> <span class="n">at</span> <span class="n">all</span><span class="p">.</span>
</span><span class='line'><span class="n">Stack</span><span class="o">-</span><span class="n">allocated</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">would</span> <span class="n">remain</span><span class="p">,</span> <span class="n">expressed</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">the</span> <span class="n">language</span> <span class="n">already</span> <span class="n">supports</span> <span class="n">raw</span> <span class="p">(</span><span class="n">environment</span><span class="o">-</span><span class="n">less</span><span class="p">)</span> <span class="n">function</span>
</span><span class='line'><span class="n">pointers</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">extern</span> <span class="s">&quot;ABI&quot;</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">two</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">re</span><span class="o">-</span><span class="n">express</span> <span class="n">copying</span> <span class="n">closures</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">One</span> <span class="n">could</span> <span class="n">pass</span> <span class="n">around</span> <span class="n">function</span> <span class="n">pointers</span> <span class="n">along</span> <span class="n">with</span>
</span><span class='line'><span class="n">records</span> <span class="n">that</span> <span class="n">carry</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">environment</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span> <span class="n">basically</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://matt.might.net/articles/closure-conversion/&quot;</span><span class="o">&gt;</span><span class="n">lambda</span><span class="o">-</span><span class="n">lifting</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">the</span> <span class="n">variant</span> <span class="n">that</span> <span class="n">turns</span> <span class="n">the</span> <span class="n">free</span> <span class="n">variables</span>
</span><span class='line'><span class="n">into</span> <span class="n">fields</span> <span class="n">of</span> <span class="n">a</span> <span class="n">single</span> <span class="n">environment</span> <span class="n">structure</span><span class="p">,</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">passing</span> <span class="n">each</span>
</span><span class='line'><span class="n">variable</span> <span class="k">as</span> <span class="n">a</span> <span class="n">separate</span> <span class="n">parameter</span><span class="p">),</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">As</span> <span class="n">stated</span> <span class="n">earlier</span><span class="p">,</span> <span class="p">(</span><span class="n">boxed</span><span class="p">)</span> <span class="n">traits</span> <span class="n">can</span> <span class="n">used</span> <span class="n">to</span> <span class="n">express</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closures</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">surveyed</span> <span class="n">how</span> <span class="n">these</span> <span class="n">patterns</span> <span class="n">would</span> <span class="n">look</span> <span class="k">in</span> <span class="n">his</span> <span class="n">post</span><span class="p">,</span> <span class="n">by</span> <span class="n">considered</span>
</span><span class='line'><span class="n">existing</span> <span class="kn">use</span> <span class="n">cases</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;@</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span> <span class="n">standard</span> <span class="n">libraries</span><span class="p">,</span>
</span><span class='line'><span class="n">namely</span> <span class="n">task</span> <span class="n">spawning</span> <span class="n">and</span> <span class="n">futures</span><span class="p">.</span>  <span class="n">Without</span> <span class="n">more</span> <span class="n">language</span> <span class="n">support</span><span class="p">,</span> <span class="n">the</span>
</span><span class='line'><span class="n">lambda</span><span class="o">-</span><span class="n">lifting</span> <span class="n">transformation</span> <span class="n">requires</span> <span class="n">that</span> <span class="n">one</span> <span class="n">list</span> <span class="n">the</span> <span class="n">captures</span>
</span><span class='line'><span class="n">variables</span> <span class="p">(</span><span class="n">at</span> <span class="n">least</span> <span class="kr">once</span><span class="p">,</span> <span class="n">though</span> <span class="n">further</span> <span class="n">repetitions</span> <span class="n">can</span> <span class="kr">be</span> <span class="n">avoided</span>
</span><span class='line'><span class="n">via</span> <span class="n">appropriate</span> <span class="n">macro</span> <span class="n">definitions</span><span class="p">).</span>  <span class="n">I</span> <span class="n">am</span> <span class="n">personally</span> <span class="n">hesistant</span> <span class="n">to</span>
</span><span class='line'><span class="n">approve</span> <span class="n">of</span> <span class="n">removing</span> <span class="n">non</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closures</span> <span class="n">wholesale</span><span class="p">,</span> <span class="n">though</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">if</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">it</span> <span class="n">turns</span> <span class="n">out</span> <span class="n">that</span> <span class="n">capture</span> <span class="n">clauses</span> <span class="n">are</span> <span class="n">essentially</span> <span class="n">unavoidable</span> <span class="p">(</span><span class="n">or</span>
</span><span class='line'><span class="k">if</span> <span class="n">understanding</span> <span class="n">behavior</span> <span class="n">without</span> <span class="n">them</span> <span class="n">is</span> <span class="n">unworkable</span><span class="p">),</span> <span class="n">then</span> <span class="n">my</span> <span class="n">main</span>
</span><span class='line'><span class="n">problem</span> <span class="n">with</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macros</span> <span class="p">(</span><span class="n">the</span> <span class="n">explicit</span> <span class="n">list</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span><span class="p">)</span>
</span><span class='line'><span class="n">would</span> <span class="n">go</span> <span class="n">away</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Alternatively</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">system</span> <span class="n">were</span> <span class="n">somehow</span> <span class="n">extended</span> <span class="n">to</span> <span class="n">allow</span> <span class="n">a</span>
</span><span class='line'><span class="n">macro</span> <span class="n">to</span> <span class="n">query</span> <span class="n">an</span> <span class="n">expression</span> <span class="k">for</span> <span class="n">its</span> <span class="n">free</span> <span class="n">variables</span><span class="p">,</span> <span class="n">then</span> <span class="n">that</span> <span class="n">might</span>
</span><span class='line'><span class="n">help</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..digression_on_macros..A.Personal.Digression.on.Macros..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;digression_on_macros&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">Personal</span> <span class="n">Digression</span> <span class="n">on</span> <span class="n">Macros</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Actually</span><span class="p">,</span> <span class="n">this</span> <span class="n">latter</span> <span class="n">idea</span> <span class="n">brings</span> <span class="n">up</span> <span class="n">a</span> <span class="n">problem</span> <span class="n">with</span> <span class="n">the</span> <span class="n">explicit</span> <span class="n">list</span>
</span><span class='line'><span class="n">of</span> <span class="n">captured</span> <span class="n">variables</span> <span class="n">that</span> <span class="n">I</span> <span class="n">had</span> <span class="n">not</span> <span class="n">thought</span> <span class="n">of</span> <span class="n">before</span><span class="o">:</span> <span class="n">some</span> <span class="n">macros</span>
</span><span class='line'><span class="n">may</span> <span class="n">intentionally</span> <span class="n">inject</span> <span class="n">references</span> <span class="n">to</span> <span class="n">free</span> <span class="n">variables</span><span class="p">,</span> <span class="n">where</span> <span class="n">the</span>
</span><span class='line'><span class="n">injected</span> <span class="n">free</span> <span class="n">variables</span> <span class="n">are</span> <span class="n">not</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">part</span> <span class="n">of</span> <span class="n">the</span> <span class="n">public</span>
</span><span class='line'><span class="n">interface</span> <span class="n">of</span> <span class="n">the</span> <span class="n">macro</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.,</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">is</span> <span class="n">enforcing</span> <span class="n">some</span> <span class="n">protocol</span> <span class="n">of</span>
</span><span class='line'><span class="n">usage</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">variable</span> <span class="n">is</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">otherwise</span> <span class="n">private</span> <span class="n">to</span> <span class="n">the</span> <span class="n">module</span>
</span><span class='line'><span class="n">where</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">is</span> <span class="n">defined</span><span class="p">).</span>  <span class="n">I</span> <span class="n">know</span> <span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">currently</span> <span class="n">have</span> <span class="n">macros</span>
</span><span class='line'><span class="n">exported</span> <span class="n">from</span> <span class="n">modules</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">thought</span> <span class="n">it</span> <span class="n">was</span> <span class="n">supposed</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">part</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'><span class="n">long</span> <span class="n">term</span> <span class="n">plans</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Do</span> <span class="n">we</span> <span class="n">intend</span> <span class="n">to</span> <span class="n">disallow</span> <span class="n">the</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">such</span> <span class="n">macros</span> <span class="n">within</span> <span class="n">copying</span> <span class="n">closures</span><span class="o">?&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Will</span> <span class="n">we</span> <span class="n">require</span> <span class="n">the</span> <span class="n">modules</span> <span class="n">to</span> <span class="n">expose</span> <span class="n">those</span> <span class="n">variable</span> <span class="n">names</span><span class="p">,</span> <span class="n">solely</span>
</span><span class='line'><span class="n">so</span> <span class="n">that</span> <span class="n">they</span> <span class="n">can</span> <span class="kr">be</span> <span class="n">included</span> <span class="n">on</span> <span class="n">the</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span><span class="o">?&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Or</span><span class="p">,</span> <span class="k">if</span> <span class="n">a</span> <span class="n">macro</span> <span class="n">could</span> <span class="n">query</span> <span class="n">an</span> <span class="n">expression</span> <span class="k">for</span> <span class="n">its</span> <span class="n">free</span> <span class="n">variables</span>
</span><span class='line'><span class="p">(</span><span class="n">where</span> <span class="n">even</span> <span class="n">module</span><span class="o">-</span><span class="n">private</span> <span class="n">identifiers</span> <span class="n">might</span> <span class="kr">be</span> <span class="n">included</span> <span class="n">on</span> <span class="n">such</span>
</span><span class='line'><span class="n">a</span> <span class="n">list</span><span class="p">),</span> <span class="n">that</span> <span class="n">might</span> <span class="n">help</span> <span class="n">impose</span> <span class="n">a</span> <span class="n">usage</span> <span class="n">discipline</span> <span class="n">that</span> <span class="n">would</span>
</span><span class='line'><span class="n">support</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macro</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Or</span><span class="p">,</span> <span class="n">this</span> <span class="n">whole</span> <span class="n">example</span> <span class="n">might</span> <span class="n">serve</span> <span class="k">as</span> <span class="n">an</span> <span class="n">argument</span> <span class="k">for</span> <span class="n">keeping</span>
</span><span class='line'><span class="n">copying</span> <span class="n">closures</span> <span class="k">as</span> <span class="n">a</span> <span class="n">primitive</span> <span class="n">linguistic</span> <span class="n">construct</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Okay</span><span class="p">,</span> <span class="n">end</span> <span class="n">of</span> <span class="n">digression</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..more_followup_on_procs_and_fns..More.followups.on.procs.and.fns..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;more_followup_on_procs_and_fns&quot;</span><span class="o">&gt;</span><span class="n">More</span> <span class="n">followups</span> <span class="n">on</span> <span class="n">procs</span> <span class="n">and</span> <span class="n">fns</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">few</span> <span class="n">days</span> <span class="n">passed</span><span class="p">,</span> <span class="n">then</span> <span class="n">Niko</span> <span class="n">had</span> <span class="n">a</span> <span class="n">fourth</span> <span class="n">post</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">More</span> <span class="n">on</span> <span class="n">Fns</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mf">03.</span>
</span><span class='line'><span class="n">This</span> <span class="n">proposal</span> <span class="n">renamed</span> <span class="n">of</span> <span class="n">a</span> <span class="n">proposed</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Task</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Thunk</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">since</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">felt</span> <span class="n">that</span> <span class="n">the</span> <span class="n">concept</span> <span class="n">at</span> <span class="n">hand</span> <span class="p">(</span><span class="n">an</span> <span class="n">encapsulated</span> <span class="n">function</span> <span class="n">and</span> <span class="n">the</span>
</span><span class='line'><span class="n">parameters</span> <span class="n">it</span> <span class="n">needs</span><span class="p">)</span> <span class="n">is</span> <span class="n">better</span> <span class="n">reflected</span> <span class="n">by</span> <span class="n">that</span> <span class="n">name</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">More</span> <span class="n">importantly</span><span class="p">,</span> <span class="n">given</span> <span class="n">the</span> <span class="n">immediately</span> <span class="n">preceding</span> <span class="n">digression</span><span class="p">,</span> <span class="n">the</span> <span class="n">form</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">would</span> <span class="n">automatically</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">variables</span>
</span><span class='line'><span class="n">instead</span> <span class="n">of</span> <span class="n">requiring</span> <span class="n">an</span> <span class="n">explicit</span> <span class="n">list</span><span class="p">;</span> <span class="n">this</span> <span class="n">sidesteps</span> <span class="n">the</span> <span class="n">whole</span> <span class="n">question</span>
</span><span class='line'><span class="n">of</span> <span class="n">how</span> <span class="n">to</span> <span class="n">handle</span> <span class="n">macros</span> <span class="n">that</span> <span class="n">inject</span> <span class="n">new</span> <span class="n">free</span> <span class="n">variable</span> <span class="n">references</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">There</span> <span class="n">is</span> <span class="n">then</span> <span class="n">much</span> <span class="n">discussion</span> <span class="n">of</span> <span class="n">whether</span> <span class="n">or</span> <span class="n">not</span> <span class="n">to</span> <span class="n">support</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">once</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">s</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">I</span> <span class="n">won</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">summarize</span> <span class="n">here</span><span class="p">.</span>  <span class="n">The</span> <span class="n">important</span> <span class="n">detail</span> <span class="n">of</span> <span class="n">the</span> <span class="n">post</span> <span class="n">is</span>
</span><span class='line'><span class="n">that</span> <span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">necessarily</span> <span class="n">have</span> <span class="n">to</span> <span class="n">list</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">variables</span>
</span><span class='line'><span class="n">explicitly</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">After</span> <span class="n">a</span> <span class="n">few</span> <span class="n">more</span> <span class="n">days</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">had</span> <span class="n">a</span> <span class="n">followup</span> <span class="n">on</span> <span class="n">the</span> <span class="n">related</span> <span class="n">topic</span> <span class="n">of</span>
</span><span class='line'><span class="n">dynamically</span> <span class="n">sized</span> <span class="n">types</span> <span class="p">(</span><span class="n">DST</span><span class="p">),</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Reducing</span> <span class="n">DST</span> <span class="n">Annotation</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">from</span>
</span><span class='line'><span class="mi">2013</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mf">06.</span>  <span class="n">It</span> <span class="n">took</span> <span class="n">into</span> <span class="n">account</span> <span class="n">an</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/mozilla/rust/issues/6308#issuecomment-18880575&quot;</span><span class="o">&gt;</span><span class="n">investigation</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">by</span> <span class="n">Ben</span> <span class="n">Blum</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">implications</span> <span class="n">of</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="n">bound</span><span class="p">.</span>  <span class="n">This</span> <span class="n">led</span> <span class="n">to</span> <span class="n">Niko</span>
</span><span class='line'><span class="n">exploring</span> <span class="n">some</span> <span class="n">alternatives</span> <span class="n">to</span> <span class="n">adopting</span> <span class="n">DST</span> <span class="n">with</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">bound</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Abandon</span> <span class="n">DST</span> <span class="n">altogether</span><span class="o">:</span> <span class="n">Niko</span> <span class="n">summarizes</span> <span class="n">what</span> <span class="n">DST</span> <span class="n">still</span> <span class="n">buys</span> <span class="n">us</span><span class="p">,</span> <span class="n">but</span>
</span><span class='line'><span class="n">also</span> <span class="n">points</span> <span class="n">out</span> <span class="n">where</span> <span class="n">it</span> <span class="n">does</span> <span class="n">not</span> <span class="n">live</span> <span class="n">up</span> <span class="n">to</span> <span class="n">its</span> <span class="n">original</span> <span class="n">promises</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Make</span> <span class="k">type</span> <span class="n">parameters</span> <span class="n">default</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="n">adopt</span> <span class="n">a</span> <span class="n">different</span>
</span><span class='line'><span class="n">syntactic</span> <span class="n">mechanism</span> <span class="n">to</span> <span class="n">distinguish</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Unsized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">such</span> <span class="k">as</span>
</span><span class='line'><span class="n">a</span> <span class="n">keyword</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Use</span> <span class="n">some</span> <span class="n">sort</span> <span class="n">of</span> <span class="n">inference</span><span class="o">:</span> <span class="n">the</span> <span class="k">type</span><span class="o">-</span><span class="n">checker</span> <span class="n">can</span> <span class="kn">use</span> <span class="n">properties</span>
</span><span class='line'><span class="n">of</span> <span class="n">a</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">parameter</span> <span class="n">list</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">feedback</span>
</span><span class='line'><span class="n">on</span> <span class="n">whether</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">has</span> <span class="n">an</span> <span class="n">implicit</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">bound</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">Niko</span> <span class="n">wonders</span> <span class="k">if</span> <span class="n">this</span> <span class="n">approach</span> <span class="n">is</span> <span class="n">too</span> <span class="n">clever</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">inclined</span> <span class="n">to</span>
</span><span class='line'> <span class="n">affirm</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..where_are_we..So.where.are.we...a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;where_are_we&quot;</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">where</span> <span class="n">are</span> <span class="n">we</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">above</span> <span class="n">summarizes</span> <span class="n">the</span> <span class="n">series</span> <span class="n">of</span> <span class="n">blog</span> <span class="n">posts</span> <span class="n">from</span> <span class="n">Niko</span><span class="p">.</span>  <span class="n">I</span> <span class="n">had</span> <span class="n">hoped</span>
</span><span class='line'><span class="n">to</span> <span class="n">get</span> <span class="n">through</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">proposals</span> <span class="p">(</span><span class="n">and</span> <span class="n">maybe</span> <span class="n">also</span> <span class="n">the</span> <span class="n">team</span> <span class="n">meeting</span>
</span><span class='line'><span class="n">notes</span><span class="p">),</span> <span class="n">but</span> <span class="n">at</span> <span class="n">this</span> <span class="n">point</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">late</span> <span class="n">enough</span> <span class="k">in</span> <span class="n">the</span> <span class="n">day</span> <span class="n">and</span> <span class="n">this</span> <span class="n">post</span>
</span><span class='line'><span class="n">is</span> <span class="n">long</span> <span class="n">enough</span> <span class="n">that</span> <span class="n">I</span> <span class="n">think</span> <span class="n">I</span> <span class="n">will</span> <span class="n">stop</span> <span class="n">here</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">language</span> <span class="n">is</span> <span class="n">young</span><span class="p">,</span> <span class="n">and</span> <span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">Rust</span> <span class="n">novice</span><span class="p">.</span>  <span class="n">So</span><span class="p">,</span> <span class="n">grains</span> <span class="n">of</span> <span class="n">salt</span>
</span><span class='line'><span class="k">for</span> <span class="n">everyone</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">My</span> <span class="n">intuition</span> <span class="n">is</span> <span class="n">that</span> <span class="n">we</span> <span class="n">should</span> <span class="n">leave</span> <span class="k">in</span> <span class="n">copying</span> <span class="n">closures</span> <span class="k">in</span> <span class="n">some</span> <span class="n">form</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">The</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">expression</span> <span class="n">might</span> <span class="n">suffice</span><span class="p">,</span> <span class="n">but</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">not</span> <span class="n">yet</span>
</span><span class='line'><span class="n">convinced</span> <span class="n">that</span> <span class="n">I</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">satisfied</span> <span class="n">using</span> <span class="n">boxed</span> <span class="n">traits</span>
</span><span class='line'><span class="n">to</span> <span class="n">express</span> <span class="n">the</span> <span class="n">cases</span> <span class="n">that</span> <span class="n">need</span> <span class="n">input</span> <span class="n">arguments</span> <span class="p">(</span><span class="n">like</span> <span class="n">combinator</span>
</span><span class='line'><span class="n">libraries</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">am</span> <span class="n">not</span> <span class="n">thrilled</span> <span class="n">by</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">of</span> <span class="n">writing</span> <span class="n">out</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">free</span>
</span><span class='line'><span class="n">variables</span><span class="p">.</span>  <span class="n">Of</span> <span class="n">course</span><span class="p">,</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="n">systems</span> <span class="n">programming</span> <span class="n">language</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">such</span> <span class="n">a</span> <span class="n">list</span> <span class="n">may</span> <span class="n">simply</span> <span class="kr">be</span> <span class="n">the</span> <span class="n">simplest</span> <span class="n">way</span> <span class="n">to</span> <span class="n">accomplish</span>
</span><span class='line'><span class="n">certain</span> <span class="n">goals</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">to</span> <span class="n">indicate</span> <span class="n">whether</span> <span class="n">a</span> <span class="n">referenced</span> <span class="n">value</span>
</span><span class='line'><span class="n">is</span> <span class="n">moved</span> <span class="n">or</span> <span class="n">copied</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">we</span> <span class="k">do</span> <span class="n">require</span> <span class="n">a</span> <span class="n">list</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span> <span class="k">in</span> <span class="n">our</span> <span class="n">copying</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;/&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;/</span><span class="n">etc</span><span class="p">,</span> <span class="n">please</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">the</span> <span class="n">question</span> <span class="n">of</span> <span class="n">free</span>
</span><span class='line'><span class="n">variables</span> <span class="n">injected</span> <span class="n">by</span> <span class="n">macro</span> <span class="n">invocations</span> <span class="n">is</span> <span class="n">addressed</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="k">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Designing</span> <span class="n">syntax</span> <span class="k">for</span> <span class="n">associated</span> <span class="n">items</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2013</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">22</span><span class="n">T14</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">04</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="n">http</span><span class="o">:</span><span class="c1">//blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="k">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#background&quot;</span><span class="o">&gt;</span><span class="n">Background</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">Encoding</span> <span class="n">via</span> <span class="n">parameters</span> <span class="n">is</span> <span class="n">unpalatable</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#rustspec&quot;</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">-</span><span class="n">specific</span> <span class="n">issues</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#nikoposts&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">blog</span> <span class="n">posts</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#thinkbinding&quot;</span><span class="o">&gt;</span><span class="n">Simpler</span> <span class="n">syntax</span><span class="o">:</span> <span class="n">What</span> <span class="n">about</span> <span class="n">binding</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#insight&quot;</span><span class="o">&gt;</span><span class="n">Insight</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#proposal&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">proposed</span> <span class="n">syntax</span> <span class="k">for</span> <span class="n">associated</span> <span class="n">items</span> <span class="k">in</span> <span class="n">Rust</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#futurework&quot;</span><span class="o">&gt;</span><span class="n">What</span> <span class="n">the</span> <span class="n">proposal</span> <span class="n">does</span> <span class="n">not</span> <span class="n">cover</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Executive</span> <span class="n">summary</span><span class="o">:</span> <span class="k">if</span> <span class="n">you</span> <span class="n">don</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">want</span> <span class="n">or</span> <span class="n">need</span> <span class="n">the</span> <span class="n">background</span> <span class="n">information</span>
</span><span class='line'><span class="n">or</span> <span class="n">the</span> <span class="n">discussion</span> <span class="n">motivating</span> <span class="n">the</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">then</span> <span class="n">just</span> <span class="n">jump</span>
</span><span class='line'><span class="n">straight</span> <span class="n">to</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#proposal&quot;</span><span class="o">&gt;</span><span class="n">proposal</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">itself</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="n">more</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..background..Background..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;background&quot;</span><span class="o">&gt;</span><span class="n">Background</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Early</span> <span class="k">in</span> <span class="n">my</span> <span class="n">experimentation</span> <span class="n">with</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">I</span> <span class="n">thought</span> <span class="n">a</span> <span class="n">reasonable</span> <span class="n">exercise</span>
</span><span class='line'><span class="n">would</span> <span class="kr">be</span> <span class="n">to</span> <span class="n">take</span> <span class="n">the</span> <span class="n">simple</span> <span class="n">C</span><span class="o">++</span> <span class="n">programs</span> <span class="n">from</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.elementsofprogramming.com/&quot;</span><span class="o">&gt;</span><span class="n">Elements</span> <span class="n">of</span> <span class="n">Programming</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">Stepanov</span> <span class="n">and</span> <span class="n">McJones</span><span class="p">),</span> <span class="n">which</span> <span class="n">make</span> <span class="n">heavy</span> <span class="n">yet</span>
</span><span class='line'><span class="n">disciplined</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">abstraction</span> <span class="n">and</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">to</span> <span class="n">encode</span> <span class="n">various</span>
</span><span class='line'><span class="n">mathematical</span> <span class="n">concepts</span><span class="p">.</span>  <span class="n">The</span> <span class="n">early</span> <span class="n">chapters</span> <span class="n">of</span> <span class="n">the</span> <span class="n">book</span> <span class="kn">use</span> <span class="n">templates</span>
</span><span class='line'><span class="n">rather</span> <span class="n">than</span> <span class="n">classes</span> <span class="k">as</span> <span class="n">the</span> <span class="n">means</span> <span class="n">of</span> <span class="n">code</span> <span class="n">reuse</span><span class="p">,</span> <span class="n">so</span> <span class="n">translating</span> <span class="n">those</span>
</span><span class='line'><span class="n">examples</span> <span class="n">seemed</span> <span class="n">like</span> <span class="n">a</span> <span class="n">good</span> <span class="n">way</span> <span class="n">to</span> <span class="n">exercise</span> <span class="n">Rust</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">generic</span> <span class="k">type</span> <span class="n">and</span>
</span><span class='line'><span class="k">trait</span> <span class="n">systems</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">However</span><span class="p">,</span> <span class="n">almost</span> <span class="n">immediately</span> <span class="n">after</span> <span class="n">starting</span> <span class="n">the</span> <span class="n">experiment</span><span class="p">,</span> <span class="n">I</span> <span class="n">encountered</span>
</span><span class='line'><span class="n">a</span> <span class="n">problem</span><span class="o">:</span> <span class="n">code</span> <span class="n">that</span> <span class="n">makes</span> <span class="n">heavy</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">is</span> <span class="n">quite</span> <span class="n">likely</span>
</span><span class='line'><span class="n">to</span> <span class="kn">use</span> <span class="n">particular</span> <span class="n">features</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">that</span> <span class="n">are</span> <span class="n">not</span> <span class="n">a</span> <span class="n">universal</span>
</span><span class='line'><span class="n">part</span> <span class="n">of</span> <span class="n">another</span> <span class="n">language</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">generic</span> <span class="k">type</span> <span class="n">system</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">particular</span><span class="p">,</span> <span class="n">the</span> <span class="n">code</span> <span class="n">from</span> <span class="n">Elements</span> <span class="n">of</span> <span class="n">Programming</span> <span class="p">(</span><span class="n">hereby</span>
</span><span class='line'><span class="n">abbreviated</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">EOP</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">in</span> <span class="n">this</span> <span class="n">post</span><span class="p">)</span> <span class="n">almost</span> <span class="n">immediately</span> <span class="n">makes</span> <span class="kn">use</span> <span class="n">of</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">such</span> <span class="k">as</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">definition</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">distance</span><span class="p">(</span><span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">x</span><span class="p">,</span> <span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Precondition: $y$ is reachable from $x$ under $f$</span>
</span><span class='line'>    <span class="n">typedef</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">N</span> <span class="n">n</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">N</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">interesting</span> <span class="n">thing</span> <span class="n">about</span> <span class="n">the</span> <span class="n">above</span> <span class="n">code</span> <span class="n">is</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">parameterized</span>
</span><span class='line'><span class="n">over</span> <span class="n">one</span> <span class="k">type</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">but</span> <span class="n">it</span> <span class="n">uses</span> <span class="n">other</span> <span class="k">type</span> <span class="n">expressions</span> <span class="n">within</span> <span class="n">the</span> <span class="n">body</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">procedure</span><span class="p">,</span> <span class="n">namely</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="n">that</span><span class="p">,</span> <span class="n">given</span> <span class="n">a</span>
</span><span class='line'><span class="n">Transformation</span> <span class="p">(</span><span class="n">which</span> <span class="n">we</span> <span class="n">can</span> <span class="n">think</span> <span class="n">of</span> <span class="k">as</span> <span class="n">some</span> <span class="k">type</span> <span class="n">classifying</span> <span class="n">a</span>
</span><span class='line'><span class="n">set</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">functions</span> <span class="k">for</span> <span class="n">some</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">returns</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="n">that</span><span class="p">,</span> <span class="n">given</span> <span class="n">a</span>
</span><span class='line'><span class="n">Transformation</span><span class="p">,</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">numeric</span> <span class="k">type</span> <span class="p">(</span><span class="n">think</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uint8_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uint32_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uintptr_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">BigNum</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">etc</span><span class="p">)</span> <span class="n">suitable</span> <span class="k">for</span> <span class="n">counting</span> <span class="n">the</span>
</span><span class='line'><span class="n">minimum</span> <span class="n">number</span> <span class="n">of</span> <span class="n">applications</span> <span class="n">of</span> <span class="n">the</span> <span class="n">transformation</span> <span class="n">necessary</span> <span class="n">to</span>
</span><span class='line'><span class="n">get</span> <span class="n">from</span> <span class="n">any</span> <span class="n">particular</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">value</span> <span class="n">to</span> <span class="n">some</span> <span class="n">other</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Operators</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">to</span> <span class="n">my</span> <span class="n">mind</span><span class="p">,</span> <span class="n">only</span> <span class="n">makes</span> <span class="n">sense</span> <span class="n">when</span> <span class="n">you</span>
</span><span class='line'> <span class="n">look</span> <span class="n">at</span> <span class="n">things</span> <span class="n">simultaneously</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">bytes</span> <span class="n">of</span> <span class="n">memory</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'> <span class="n">machine</span> <span class="n">and</span> <span class="n">also</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="kr">pure</span> <span class="n">abstract</span> <span class="n">mathematical</span> <span class="n">values</span><span class="p">.</span>  <span class="n">If</span>
</span><span class='line'> <span class="n">you</span> <span class="n">omit</span> <span class="n">either</span> <span class="n">perspective</span><span class="p">,</span> <span class="n">then</span> <span class="n">the</span> <span class="n">operator</span> <span class="n">appears</span> <span class="n">either</span>
</span><span class='line'> <span class="n">pointless</span> <span class="n">or</span> <span class="n">nonsensical</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">It</span> <span class="n">also</span> <span class="n">requires</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">obeys</span> <span class="n">a</span> <span class="n">constraint</span><span class="p">,</span> <span class="n">specified</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">requires</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">clause</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">going</span> <span class="n">to</span> <span class="n">conveniently</span> <span class="n">ignore</span> <span class="n">this</span> <span class="n">detail</span> <span class="k">for</span>
</span><span class='line'><span class="n">now</span><span class="p">.</span>  <span class="p">(</span><span class="n">The</span> <span class="n">C</span><span class="o">++</span> <span class="n">code</span> <span class="k">for</span> <span class="n">EOP</span> <span class="n">even</span> <span class="n">macro</span><span class="o">-</span><span class="n">expands</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">requires</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">into</span> <span class="n">whitespace</span><span class="p">,</span>
</span><span class='line'><span class="n">so</span> <span class="n">treating</span> <span class="n">them</span> <span class="k">as</span> <span class="n">helpful</span> <span class="n">comments</span> <span class="k">for</span> <span class="n">the</span> <span class="n">time</span> <span class="n">being</span> <span class="n">is</span> <span class="n">not</span> <span class="n">absurd</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Type</span> <span class="n">expressions</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">triple</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">assuming</span> <span class="n">three</span> <span class="k">type</span> <span class="n">expressions</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">are</span> <span class="n">the</span> <span class="n">bread</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">butter</span> <span class="n">of</span> <span class="n">any</span> <span class="n">generic</span> <span class="k">type</span>
</span><span class='line'><span class="n">system</span><span class="p">.</span>  <span class="n">But</span> <span class="n">these</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operators</span> <span class="n">are</span> <span class="n">interesting</span><span class="p">.</span>  <span class="n">How</span> <span class="n">are</span>
</span><span class='line'><span class="n">they</span> <span class="n">implemented</span><span class="o">?</span>  <span class="n">Here</span> <span class="n">is</span> <span class="n">a</span> <span class="n">snippet</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">type_functions</span><span class="p">.</span><span class="n">h</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="n">EOP</span> <span class="n">source</span> <span class="n">code</span> <span class="n">distribution</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If all transformations on a type T have the same distance type,</span>
</span><span class='line'><span class="c1">// then DistanceType(T) is defined and returns that type.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For any fixed-size type T, there is an integral type of the same</span>
</span><span class='line'><span class="c1">// size that is a valid distance type for T.</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">define</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="n">typename</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="k">type</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">This</span> <span class="n">code</span> <span class="n">is</span> <span class="n">making</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">a</span> <span class="n">C</span><span class="o">-</span><span class="n">style</span> <span class="n">macro</span> <span class="n">to</span> <span class="n">define</span> <span class="n">a</span> <span class="n">easy</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">read</span>
</span><span class='line'><span class="n">interface</span> <span class="k">for</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="p">(</span><span class="n">the</span> <span class="n">subset</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">used</span>
</span><span class='line'><span class="k">for</span> <span class="n">EOP</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">textbook</span> <span class="n">examples</span> <span class="n">is</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">LL</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">but</span> <span class="n">the</span> <span class="n">implementation</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">operator</span> <span class="n">is</span> <span class="n">using</span> <span class="n">C</span><span class="o">++&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">template</span> <span class="n">system</span> <span class="n">to</span> <span class="n">define</span> <span class="n">a</span> <span class="n">partial</span>
</span><span class='line'><span class="n">mapping</span> <span class="n">from</span> <span class="n">types</span> <span class="n">to</span> <span class="p">(</span><span class="n">integral</span><span class="p">)</span> <span class="n">types</span><span class="p">.</span>  <span class="n">One</span> <span class="n">can</span> <span class="n">add</span> <span class="n">new</span> <span class="n">entries</span> <span class="n">to</span>
</span><span class='line'><span class="n">this</span> <span class="n">mapping</span> <span class="n">by</span> <span class="n">defining</span> <span class="n">a</span> <span class="n">new</span> <span class="n">template</span> <span class="n">instantiation</span> <span class="n">of</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">as</span> <span class="n">illustrated</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tests</span><span class="p">.</span><span class="n">h</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">the</span> <span class="n">following</span>
</span><span class='line'><span class="n">transformation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">I</span><span class="p">,</span> <span class="n">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="nb">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">gen_orbit</span> <span class="c1">// transformation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gen_orbit_predicate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gen_orbit</span><span class="p">(</span><span class="n">I</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">N</span> <span class="n">h</span><span class="p">,</span> <span class="n">N</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Precondition: h &amp;lt; N(MaximumValue(I)) &amp;amp;&amp;amp; c &amp;lt; N(MaximumValue(I))</span>
</span><span class='line'>        <span class="c1">// Precondition: !negative(h) &amp;amp;&amp;amp; !negative(c)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">I</span> <span class="n">operator</span><span class="p">()</span> <span class="p">(</span><span class="n">I</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">successor</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">c</span><span class="p">))</span> <span class="n">x</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">I</span><span class="p">,</span> <span class="n">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="nb">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">gen_orbit</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">typedef</span> <span class="n">N</span> <span class="k">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Thus</span><span class="p">,</span> <span class="n">the</span> <span class="n">definition</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">including</span> <span class="n">its</span> <span class="n">instantiation</span> <span class="n">of</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance_type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">collaborates</span> <span class="n">with</span> <span class="n">the</span> <span class="n">definition</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">to</span>
</span><span class='line'><span class="n">indicate</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">gen_orbit</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">N</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">As</span> <span class="n">one</span> <span class="n">adds</span> <span class="n">new</span>
</span><span class='line'><span class="n">structs</span> <span class="p">(</span><span class="n">classes</span><span class="p">)</span> <span class="n">representing</span> <span class="n">other</span> <span class="n">transformations</span><span class="p">,</span> <span class="n">one</span> <span class="n">is</span> <span class="n">expected</span>
</span><span class='line'><span class="n">to</span> <span class="n">instantiate</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance_type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="k">as</span> <span class="n">well</span> <span class="k">as</span> <span class="n">a</span> <span class="n">host</span> <span class="n">of</span> <span class="n">other</span>
</span><span class='line'><span class="n">template</span><span class="o">-</span><span class="n">abstracted</span> <span class="n">structs</span><span class="p">)</span> <span class="n">accordingly</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span><span class="p">,</span> <span class="n">what</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">the</span> <span class="n">problem</span> <span class="n">here</span><span class="o">?</span>  <span class="n">Well</span><span class="p">,</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">much</span> <span class="n">like</span> <span class="n">Java</span><span class="p">,</span> <span class="n">does</span> <span class="n">not</span>
</span><span class='line'><span class="n">provide</span> <span class="n">a</span> <span class="n">way</span> <span class="n">to</span> <span class="n">define</span> <span class="n">general</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span> <span class="n">like</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">One</span> <span class="n">can</span> <span class="n">try</span> <span class="n">to</span> <span class="n">work</span> <span class="n">around</span> <span class="n">this</span> <span class="n">via</span> <span class="n">a</span> <span class="n">code</span> <span class="n">transformation</span> <span class="n">and</span> <span class="n">lift</span> <span class="n">any</span>
</span><span class='line'><span class="k">type</span> <span class="n">of</span> <span class="n">interest</span> <span class="n">up</span> <span class="n">to</span> <span class="n">a</span> <span class="n">generic</span> <span class="n">class</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">,</span> <span class="n">like</span> <span class="n">this</span>
</span><span class='line'><span class="n">example</span> <span class="k">in</span> <span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">trait</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DISTANCETYPE</span><span class="p">,</span> <span class="n">DOMAIN</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">apply</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="bp">self</span><span class="p">,</span> <span class="n">elem</span><span class="o">:</span> <span class="n">DOMAIN</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">DOMAIN</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">or</span> <span class="k">if</span> <span class="n">you</span> <span class="n">prefer</span> <span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DISTANCETYPE</span><span class="p">,</span> <span class="n">DOMAIN</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DOMAIN</span> <span class="n">apply</span><span class="p">(</span><span class="n">DOMAIN</span> <span class="n">elem</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">At</span> <span class="n">first</span> <span class="n">glance</span><span class="p">,</span> <span class="n">one</span> <span class="n">might</span> <span class="n">think</span> <span class="n">this</span> <span class="n">does</span> <span class="n">not</span> <span class="n">look</span> <span class="n">so</span> <span class="n">bad</span><span class="p">;</span> <span class="n">after</span> <span class="n">all</span><span class="p">,</span>
</span><span class='line'><span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">similarly</span> <span class="n">was</span> <span class="n">parameterized</span> <span class="n">over</span> <span class="n">a</span> <span class="n">domain</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">I</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="n">a</span> <span class="n">distance</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">N</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">However</span><span class="p">,</span> <span class="n">the</span> <span class="n">problem</span> <span class="n">comes</span> <span class="n">when</span> <span class="n">one</span>
</span><span class='line'><span class="n">then</span> <span class="n">attempts</span> <span class="n">to</span> <span class="n">write</span> <span class="n">a</span> <span class="n">function</span> <span class="n">like</span> <span class="n">distance</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">x</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">???</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span> <span class="n">extends</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">???</span> <span class="n">distance</span><span class="p">(</span><span class="o">???</span> <span class="n">x</span><span class="p">,</span> <span class="o">???</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">What</span> <span class="k">do</span> <span class="n">we</span> <span class="n">put</span> <span class="k">in</span> <span class="k">for</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;???&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">portions</span><span class="o">?</span>  <span class="n">We</span> <span class="n">already</span> <span class="n">established</span> <span class="n">that</span>
</span><span class='line'><span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">have</span> <span class="n">general</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operators</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">cannot</span> <span class="n">just</span>
</span><span class='line'><span class="n">derive</span> <span class="n">it</span> <span class="n">form</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">And</span> <span class="k">for</span> <span class="n">that</span> <span class="n">matter</span><span class="p">,</span> <span class="n">where</span> <span class="n">did</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">come</span> <span class="n">from</span><span class="o">?</span>  <span class="n">In</span> <span class="n">Rust</span> <span class="n">and</span> <span class="n">Java</span><span class="p">,</span> <span class="n">we</span> <span class="n">cannot</span> <span class="n">just</span> <span class="n">make</span> <span class="n">up</span> <span class="n">fresh</span> <span class="k">type</span>
</span><span class='line'><span class="n">variables</span> <span class="n">and</span> <span class="n">then</span> <span class="n">add</span> <span class="n">constraints</span> <span class="n">upon</span> <span class="n">them</span> <span class="n">after</span> <span class="n">the</span> <span class="n">fact</span><span class="p">.</span>  <span class="n">The</span> <span class="n">only</span>
</span><span class='line'><span class="n">option</span> <span class="n">is</span> <span class="n">to</span> <span class="n">make</span> <span class="n">any</span> <span class="k">type</span> <span class="n">we</span> <span class="n">wish</span> <span class="n">to</span> <span class="kn">use</span> <span class="n">an</span> <span class="n">additional</span> <span class="k">type</span> <span class="n">parameter</span>
</span><span class='line'><span class="n">to</span> <span class="n">the</span> <span class="n">generic</span> <span class="n">method</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">x</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">DT</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">F</span> <span class="n">extends</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DT</span> <span class="n">distance</span><span class="p">(</span><span class="n">DOM</span> <span class="n">x</span><span class="p">,</span> <span class="n">DOM</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..encodingunpalatable..Encoding.via.parameters.is.unpalatable..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">Encoding</span> <span class="n">via</span> <span class="n">parameters</span> <span class="n">is</span> <span class="n">unpalatable</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">Rust</span> <span class="n">and</span> <span class="n">Java</span> <span class="n">results</span> <span class="n">above</span> <span class="n">are</span> <span class="n">made</span> <span class="n">barely</span> <span class="n">readable</span> <span class="n">by</span> <span class="n">using</span>
</span><span class='line'><span class="n">short</span> <span class="p">(</span><span class="n">obscure</span><span class="p">)</span> <span class="n">parameter</span> <span class="n">names</span><span class="p">.</span>  <span class="n">More</span> <span class="n">troubling</span> <span class="n">is</span> <span class="n">the</span> <span class="n">fact</span> <span class="n">that</span> <span class="n">this</span>
</span><span class='line'><span class="n">pollution</span> <span class="n">of</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span> <span class="n">will</span> <span class="n">bubble</span> <span class="n">transitively</span> <span class="n">backwards</span>
</span><span class='line'><span class="n">through</span> <span class="n">the</span> <span class="n">callers</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">until</span> <span class="n">we</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">point</span> <span class="n">where</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">is</span> <span class="n">instantiated</span><span class="p">.</span>  <span class="nb">Any</span> <span class="kn">use</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">needs</span> <span class="n">to</span> <span class="kr">be</span>
</span><span class='line'><span class="n">parameterized</span> <span class="k">in</span> <span class="n">the</span> <span class="n">same</span> <span class="n">manner</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">It</span> <span class="n">also</span> <span class="n">makes</span> <span class="n">explicit</span> <span class="n">instantiation</span> <span class="n">of</span> <span class="n">a</span> <span class="n">parameterized</span> <span class="n">method</span> <span class="n">or</span>
</span><span class='line'><span class="n">class</span> <span class="n">quite</span> <span class="n">painful</span><span class="p">.</span>  <span class="p">(</span><span class="n">This</span> <span class="n">pain</span> <span class="n">is</span> <span class="n">somewhat</span> <span class="n">alleviated</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="n">presence</span> <span class="n">of</span> <span class="k">type</span><span class="o">-</span><span class="n">inference</span><span class="p">,</span> <span class="n">at</span> <span class="n">least</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">what</span> <span class="n">text</span> <span class="n">ends</span> <span class="n">up</span> <span class="k">in</span>
</span><span class='line'><span class="n">the</span> <span class="n">final</span> <span class="n">code</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">argue</span> <span class="n">that</span> <span class="n">that</span> <span class="k">in</span> <span class="n">this</span> <span class="n">case</span> <span class="n">the</span> <span class="n">pain</span> <span class="n">has</span> <span class="k">in</span>
</span><span class='line'><span class="n">fact</span> <span class="n">been</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">shifted</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;:</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">having</span> <span class="n">pain</span> <span class="k">while</span> <span class="n">reading</span> <span class="n">the</span> <span class="n">code</span><span class="p">,</span>
</span><span class='line'><span class="n">one</span> <span class="n">instead</span> <span class="n">suffers</span> <span class="n">when</span> <span class="n">trying</span> <span class="n">to</span> <span class="n">wade</span> <span class="n">through</span> <span class="k">type</span><span class="o">-</span><span class="n">errors</span> <span class="n">that</span>
</span><span class='line'><span class="n">inevitably</span> <span class="n">arise</span> <span class="n">during</span> <span class="n">the</span> <span class="n">compile</span><span class="o">-</span><span class="n">edit</span> <span class="n">cycle</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">anything</span><span class="p">,</span> <span class="n">the</span> <span class="n">above</span> <span class="n">presentation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">understates</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">problem</span><span class="p">,</span> <span class="n">since</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">has</span> <span class="n">only</span> <span class="n">one</span> <span class="n">argument</span> <span class="k">in</span> <span class="n">its</span> <span class="n">domain</span><span class="p">,</span> <span class="n">and</span> <span class="n">its</span> <span class="n">codomain</span>
</span><span class='line'> <span class="n">is</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="n">its</span> <span class="n">domain</span><span class="p">;</span> <span class="n">many</span> <span class="n">real</span> <span class="n">traits</span> <span class="n">with</span> <span class="n">associated</span> <span class="n">types</span>
</span><span class='line'> <span class="n">are</span> <span class="n">each</span> <span class="n">likely</span> <span class="n">to</span> <span class="n">require</span> <span class="n">multiple</span> <span class="n">parameters</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">above</span> <span class="n">example</span> <span class="n">has</span> <span class="n">direct</span> <span class="n">uses</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span> <span class="n">domain</span>
</span><span class='line'> <span class="n">and</span> <span class="n">codomain</span><span class="p">,</span> <span class="n">respectively</span><span class="p">,</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">However</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">every</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">client</span>
</span><span class='line'> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">will</span> <span class="kr">be</span> <span class="n">forced</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">parameterized</span> <span class="n">over</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="k">while</span> <span class="n">it</span> <span class="n">is</span> <span class="n">likely</span> <span class="n">that</span> <span class="n">any</span> <span class="n">client</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">likely</span>
</span><span class='line'> <span class="n">to</span> <span class="n">need</span> <span class="n">to</span> <span class="n">refer</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">many</span> <span class="n">are</span> <span class="n">likely</span> <span class="n">to</span> <span class="n">not</span> <span class="n">require</span>
</span><span class='line'> <span class="kn">use</span> <span class="n">of</span> <span class="n">the</span> <span class="n">distance</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">their</span> <span class="n">public</span> <span class="n">interface</span> <span class="n">or</span> <span class="n">even</span> <span class="k">in</span>
</span><span class='line'> <span class="n">the</span> <span class="n">internals</span> <span class="n">of</span> <span class="n">their</span> <span class="n">code</span><span class="p">.</span>  <span class="n">Thus</span><span class="p">,</span> <span class="n">our</span> <span class="n">abstraction</span> <span class="n">is</span> <span class="n">not</span> <span class="n">very</span> <span class="n">abstract</span>
</span><span class='line'> <span class="n">at</span> <span class="n">all</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">As</span> <span class="n">a</span> <span class="n">follow</span><span class="o">-</span><span class="n">on</span> <span class="n">to</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">point</span><span class="o">:</span> <span class="n">We</span> <span class="n">are</span> <span class="n">only</span> <span class="n">illustrating</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">one</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">added</span> <span class="n">concept</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">each</span> <span class="n">additional</span> <span class="n">concept</span>
</span><span class='line'> <span class="n">would</span> <span class="n">require</span> <span class="n">a</span> <span class="n">new</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">threaded</span> <span class="n">through</span> <span class="n">the</span>
</span><span class='line'> <span class="n">parameter</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">all</span> <span class="n">methods</span> <span class="n">and</span> <span class="n">classes</span><span class="p">.</span>  <span class="n">This</span> <span class="n">blows</span> <span class="n">up</span> <span class="n">to</span> <span class="n">an</span>
</span><span class='line'> <span class="n">unmaintainable</span> <span class="n">mess</span> <span class="n">fairly</span> <span class="n">quickly</span><span class="p">,</span> <span class="n">discouraging</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">generics</span>
</span><span class='line'> <span class="n">to</span> <span class="n">define</span> <span class="n">these</span> <span class="n">abstractions</span> <span class="p">(</span><span class="n">and</span> <span class="n">instead</span> <span class="n">relying</span> <span class="n">on</span>
</span><span class='line'> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">separate</span> <span class="n">class</span><span class="o">-</span><span class="n">hierarchies</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..rustspec..Rust-specific.issues..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;rustspec&quot;</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">-</span><span class="n">specific</span> <span class="n">issues</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">encountered</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">while</span> <span class="n">porting</span> <span class="n">EOP</span> <span class="n">code</span> <span class="n">to</span> <span class="n">Rust</span><span class="p">.</span>  <span class="n">After</span>
</span><span class='line'><span class="n">wrestling</span> <span class="n">with</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">lists</span> <span class="k">for</span> <span class="n">a</span> <span class="k">while</span><span class="p">,</span> <span class="n">I</span> <span class="n">eventually</span>
</span><span class='line'><span class="n">wised</span> <span class="n">up</span> <span class="n">and</span> <span class="n">asked</span> <span class="n">on</span> <span class="n">the</span> <span class="err">#</span><span class="n">rust</span> <span class="n">IRC</span> <span class="n">channel</span> <span class="k">if</span> <span class="n">there</span> <span class="n">was</span> <span class="n">a</span> <span class="n">better</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span>  <span class="n">Tim</span> <span class="n">Chevalier</span> <span class="n">informed</span> <span class="n">me</span> <span class="n">of</span> <span class="n">the</span> <span class="n">relevant</span> <span class="n">terminology</span><span class="o">:</span>
</span><span class='line'><span class="n">the</span> <span class="n">feature</span> <span class="n">I</span> <span class="n">want</span> <span class="n">is</span> <span class="n">called</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span> <span class="n">access</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">(</span><span class="n">or</span> <span class="n">often</span> <span class="n">just</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="n">An</span> <span class="n">associated</span> <span class="k">type</span> <span class="n">specifies</span> <span class="n">a</span> <span class="n">mapping</span> <span class="n">from</span> <span class="n">some</span> <span class="k">type</span> <span class="n">to</span> <span class="n">another</span> <span class="k">type</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Associated</span> <span class="k">type</span> <span class="n">access</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">is</span> <span class="n">listed</span> <span class="k">as</span> <span class="n">one</span> <span class="n">of</span> <span class="n">eight</span> <span class="n">properties</span> <span class="n">considered</span> <span class="n">important</span> <span class="k">in</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://osl.iu.edu/publications/prints/2003/comparing_generic_programming03.pdf&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">comparative</span> <span class="n">study</span> <span class="n">of</span> <span class="n">language</span> <span class="n">support</span> <span class="k">for</span> <span class="n">generic</span> <span class="n">programming</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">Garcia</span> <span class="n">et</span> <span class="n">al</span><span class="p">.,</span> <span class="mi">2003</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://dl.acm.org/citation.cfm?id=949317&quot;</span><span class="o">&gt;</span><span class="n">ACM</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">).</span>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">found</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">the</span> <span class="n">argument</span> <span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">unconvincing</span><span class="p">,</span>
</span><span class='line'><span class="n">you</span> <span class="n">should</span> <span class="n">read</span> <span class="n">the</span> <span class="n">Garcia</span> <span class="n">paper</span> <span class="k">for</span> <span class="n">a</span> <span class="n">completely</span> <span class="n">different</span> <span class="n">example</span> <span class="n">motivated</span> <span class="n">by</span>
</span><span class='line'><span class="n">a</span> <span class="n">Graph</span> <span class="n">abstraction</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">After</span> <span class="n">I</span> <span class="n">read</span> <span class="n">the</span> <span class="n">Garcia</span> <span class="n">paper</span><span class="p">,</span> <span class="n">I</span> <span class="n">promptly</span> <span class="n">filed</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/mozilla/rust/issues/5033&quot;</span><span class="o">&gt;</span><span class="n">an</span> <span class="n">RFC</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">Rust</span> <span class="n">github</span> <span class="n">repository</span> <span class="n">requesting</span> <span class="n">support</span> <span class="k">for</span> <span class="n">Associated</span> <span class="n">Type</span>
</span><span class='line'><span class="n">Synonyms</span><span class="p">.</span>  <span class="n">After</span> <span class="n">this</span><span class="p">,</span> <span class="n">I</span> <span class="n">had</span> <span class="n">several</span> <span class="n">discussions</span> <span class="n">with</span> <span class="n">Niko</span> <span class="n">Matsakis</span><span class="p">,</span>
</span><span class='line'><span class="n">both</span> <span class="n">over</span> <span class="n">IRC</span> <span class="n">and</span> <span class="k">in</span> <span class="n">person</span><span class="p">,</span> <span class="n">on</span> <span class="n">the</span> <span class="n">problems</span> <span class="n">that</span> <span class="n">associated</span> <span class="n">types</span>
</span><span class='line'><span class="n">present</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..nikoposts..Niko.s.blog.posts..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;nikoposts&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">blog</span> <span class="n">posts</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">see</span> <span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">thorough</span> <span class="n">overview</span> <span class="n">of</span> <span class="n">the</span> <span class="n">matter</span><span class="p">,</span>
</span><span class='line'><span class="n">including</span> <span class="n">his</span> <span class="n">natural</span> <span class="n">generalization</span> <span class="n">of</span> <span class="n">the</span> <span class="n">topic</span> <span class="n">from</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span>
</span><span class='line'><span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">items</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">on</span> <span class="n">his</span> <span class="n">pair</span> <span class="n">of</span> <span class="n">blog</span> <span class="n">posts</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/02/associated-items/&quot;</span><span class="o">&gt;</span><span class="n">part</span>
</span><span class='line'><span class="n">I</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/&quot;</span><span class="o">&gt;</span><span class="n">part</span> <span class="n">II</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">).</span>  <span class="n">The</span> <span class="n">generalization</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">items</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">enables</span> <span class="n">one</span> <span class="n">to</span> <span class="n">define</span><span class="p">,</span> <span class="k">in</span> <span class="n">addition</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span> <span class="k">as</span>
</span><span class='line'><span class="n">illustrated</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#background&quot;</span><span class="o">&gt;</span><span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">also</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">function</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">mappings</span> <span class="p">(</span><span class="n">called</span> <span class="k">in</span> <span class="n">some</span> <span class="n">languages</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="k">static</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">functions</span><span class="p">)</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">constant</span><span class="p">)</span> <span class="n">value</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span><span class="p">,</span> <span class="n">which</span> <span class="n">may</span> <span class="n">enable</span> <span class="n">certain</span> <span class="n">interesting</span>
</span><span class='line'><span class="n">coding</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">allowing</span> <span class="n">a</span> <span class="k">type</span> <span class="n">representing</span> <span class="n">a</span> <span class="n">vector</span> <span class="k">in</span> <span class="n">a</span>
</span><span class='line'><span class="n">multi</span><span class="o">-</span><span class="n">dimensional</span> <span class="n">space</span> <span class="n">to</span> <span class="n">state</span><span class="p">,</span> <span class="n">statically</span><span class="p">,</span> <span class="n">how</span> <span class="n">many</span> <span class="n">dimensions</span>
</span><span class='line'><span class="n">it</span> <span class="n">carries</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">following</span> <span class="n">are</span> <span class="n">the</span> <span class="n">specific</span> <span class="n">points</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">makes</span> <span class="k">in</span> <span class="n">his</span> <span class="n">posts</span> <span class="p">(</span><span class="n">some</span> <span class="n">of</span>
</span><span class='line'><span class="n">are</span> <span class="n">just</span> <span class="n">pointing</span> <span class="n">out</span> <span class="n">artifacts</span> <span class="n">of</span> <span class="n">current</span> <span class="n">Rust</span> <span class="n">language</span> <span class="n">syntax</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Current.Rust.syntax.focuses.on.deriving.associated.functions.from.traits&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Current</span> <span class="n">Rust</span> <span class="n">syntax</span> <span class="n">focuses</span> <span class="n">on</span> <span class="n">deriving</span> <span class="n">associated</span> <span class="n">functions</span> <span class="n">from</span> <span class="n">traits</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span> <span class="n">does</span> <span class="n">not</span> <span class="n">currently</span> <span class="n">offer</span> <span class="n">general</span> <span class="n">associated</span> <span class="n">items</span><span class="p">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">does</span>
</span><span class='line'><span class="n">offer</span> <span class="n">a</span> <span class="n">kind</span> <span class="n">of</span> <span class="n">associated</span> <span class="n">function</span> <span class="n">access</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">a</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">defines</span> <span class="n">a</span> <span class="n">function</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">that</span> <span class="n">returns</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Self</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">which</span> <span class="n">means</span>
</span><span class='line'><span class="n">that</span> <span class="n">implementations</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">are</span> <span class="n">obligated</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">an</span> <span class="n">implementation</span>
</span><span class='line'><span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">and</span> <span class="n">one</span> <span class="n">has</span> <span class="n">a</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">implementing</span> <span class="n">that</span> <span class="k">trait</span><span class="p">,</span> <span class="n">then</span> <span class="n">one</span> <span class="n">can</span>
</span><span class='line'><span class="n">derive</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="k">in</span> <span class="n">current</span> <span class="n">Rust</span> <span class="n">syntax</span><span class="p">,</span> <span class="n">one</span> <span class="n">does</span> <span class="n">not</span> <span class="n">write</span> <span class="n">this</span> <span class="n">derivation</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">as</span> <span class="n">something</span> <span class="n">attached</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">instead</span><span class="p">,</span> <span class="n">one</span> <span class="n">writes</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">responsible</span> <span class="k">for</span> <span class="n">inferring</span> <span class="n">which</span> <span class="n">implementation</span> <span class="n">of</span>
</span><span class='line'><span class="n">the</span> <span class="n">function</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">one</span> <span class="n">is</span> <span class="n">referring</span> <span class="n">to</span><span class="p">,</span> <span class="n">by</span> <span class="n">using</span> <span class="k">type</span><span class="o">-</span><span class="n">inference</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">context</span> <span class="n">of</span> <span class="n">the</span> <span class="n">invocation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">to</span> <span class="n">determine</span> <span class="n">that</span> <span class="n">the</span> <span class="k">return</span> <span class="k">type</span>
</span><span class='line'><span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">must</span> <span class="kr">be</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">and</span> <span class="n">thus</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">question</span> <span class="n">must</span> <span class="kr">be</span> <span class="n">the</span> <span class="n">one</span> <span class="n">that</span>
</span><span class='line'><span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">implements</span> <span class="n">to</span> <span class="n">satisfy</span> <span class="n">the</span> <span class="n">obligation</span> <span class="n">established</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..nikoenctt1..Resolving.ambiguities.in.general.implies.you.need.both.the.trait.and.type..a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;nikoenctt1&quot;</span><span class="o">&gt;</span><span class="n">Resolving</span> <span class="n">ambiguities</span> <span class="k">in</span> <span class="n">general</span> <span class="n">implies</span> <span class="n">you</span> <span class="n">need</span> <span class="n">both</span> <span class="n">the</span> <span class="k">trait</span> <span class="n">and</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">choice</span> <span class="n">of</span> <span class="n">deriving</span> <span class="n">a</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">implementation</span> <span class="n">from</span> <span class="n">the</span> <span class="k">trait</span>
</span><span class='line'><span class="n">rather</span> <span class="n">than</span> <span class="n">the</span> <span class="k">type</span> <span class="n">is</span> <span class="n">understandable</span> <span class="n">when</span> <span class="n">one</span> <span class="n">considers</span> <span class="n">that</span> <span class="n">a</span>
</span><span class='line'><span class="n">software</span> <span class="n">system</span> <span class="n">may</span> <span class="n">have</span> <span class="n">multiple</span> <span class="n">traits</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">U</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">that</span> <span class="n">all</span>
</span><span class='line'><span class="n">define</span> <span class="n">a</span> <span class="n">function</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="n">name</span> <span class="p">(</span><span class="n">say</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">and</span> <span class="n">a</span> <span class="k">type</span> <span class="n">may</span> <span class="kr">be</span>
</span><span class='line'><span class="n">specified</span> <span class="k">as</span> <span class="n">implementing</span> <span class="n">more</span> <span class="n">than</span> <span class="n">one</span> <span class="n">of</span> <span class="n">these</span> <span class="n">traits</span> <span class="k">in</span> <span class="n">a</span> <span class="n">single</span>
</span><span class='line'><span class="n">piece</span> <span class="n">of</span> <span class="n">code</span><span class="p">.</span>  <span class="p">(</span><span class="n">It</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">anti</span><span class="o">-</span><span class="n">modular</span> <span class="n">to</span> <span class="n">require</span> <span class="n">every</span> <span class="k">trait</span> <span class="n">to</span>
</span><span class='line'><span class="n">choose</span> <span class="n">globally</span> <span class="n">unique</span> <span class="n">names</span> <span class="k">for</span> <span class="n">its</span> <span class="n">set</span> <span class="n">of</span> <span class="n">associated</span> <span class="n">functions</span><span class="p">).</span>  <span class="n">So</span>
</span><span class='line'><span class="n">to</span> <span class="n">handle</span> <span class="n">this</span> <span class="n">case</span><span class="p">,</span> <span class="n">one</span> <span class="n">must</span> <span class="n">provide</span> <span class="n">some</span> <span class="n">way</span> <span class="n">to</span> <span class="n">disambiguate</span> <span class="n">which</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">being</span> <span class="n">referenced</span><span class="p">.</span>  <span class="n">Rust</span> <span class="n">did</span> <span class="n">so</span> <span class="n">by</span> <span class="n">making</span> <span class="n">the</span> <span class="k">trait</span> <span class="n">expression</span>
</span><span class='line'><span class="n">part</span> <span class="n">of</span> <span class="n">the</span> <span class="n">invocation</span> <span class="n">syntax</span><span class="p">.</span>  <span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="k">if</span> <span class="n">one</span> <span class="n">switches</span>
</span><span class='line'><span class="n">to</span> <span class="n">a</span> <span class="n">syntax</span> <span class="n">where</span> <span class="n">one</span> <span class="n">derives</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">the</span> <span class="k">type</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">then</span> <span class="n">one</span> <span class="n">must</span> <span class="n">tackle</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">in</span>
</span><span class='line'><span class="n">some</span> <span class="n">manner</span><span class="p">;</span> <span class="k">in</span> <span class="n">his</span> <span class="n">first</span> <span class="n">blog</span> <span class="n">post</span><span class="p">,</span> <span class="n">he</span> <span class="n">suggests</span> <span class="n">doing</span> <span class="n">so</span> <span class="n">by</span> <span class="n">allowing</span>
</span><span class='line'><span class="n">one</span> <span class="n">to</span> <span class="n">encode</span> <span class="n">both</span> <span class="n">the</span> <span class="k">type</span> <span class="n">and</span> <span class="n">the</span> <span class="k">trait</span> <span class="k">in</span> <span class="n">the</span> <span class="n">referencing</span> <span class="n">syntax</span>
</span><span class='line'><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">or</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">U</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">dislike</span> <span class="n">this</span> <span class="n">syntax</span> <span class="n">because</span> <span class="n">I</span> <span class="n">think</span> <span class="n">it</span>
</span><span class='line'><span class="n">would</span> <span class="kr">be</span> <span class="n">confusing</span> <span class="k">for</span> <span class="n">a</span> <span class="n">reader</span> <span class="n">to</span> <span class="n">comprehend</span> <span class="n">the</span> <span class="n">distinct</span> <span class="n">roles</span> <span class="n">of</span>
</span><span class='line'><span class="n">the</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;::&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">path</span> <span class="n">operator</span><span class="p">,</span> <span class="n">both</span> <span class="n">when</span> <span class="n">learning</span> <span class="n">the</span> <span class="n">language</span>
</span><span class='line'><span class="n">and</span> <span class="n">when</span> <span class="n">casually</span> <span class="n">skimming</span> <span class="n">Rust</span> <span class="n">code</span> <span class="k">in</span> <span class="n">general</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Rust.type.expressions.do.not.naturally.fit.into.Rust.path.expressions&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Rust</span> <span class="k">type</span> <span class="n">expressions</span> <span class="k">do</span> <span class="n">not</span> <span class="n">naturally</span> <span class="n">fit</span> <span class="n">into</span> <span class="n">Rust</span> <span class="n">path</span> <span class="n">expressions</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">also</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="n">when</span> <span class="n">one</span> <span class="n">wants</span> <span class="n">to</span> <span class="n">write</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">where</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span>
</span><span class='line'><span class="n">a</span> <span class="k">type</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">not</span> <span class="n">always</span> <span class="n">the</span> <span class="n">case</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="k">type</span> <span class="n">parameter</span><span class="p">;</span> <span class="n">it</span>
</span><span class='line'><span class="n">could</span> <span class="kr">be</span> <span class="n">a</span> <span class="n">concrete</span> <span class="k">type</span> <span class="n">known</span> <span class="n">to</span> <span class="n">the</span> <span class="n">programmer</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">the</span> <span class="k">type</span> <span class="n">of</span>
</span><span class='line'><span class="n">owned</span> <span class="n">vecs</span> <span class="n">of</span> <span class="n">ints</span><span class="p">,</span> <span class="n">denoted</span> <span class="n">by</span> <span class="n">the</span> <span class="k">type</span> <span class="n">expression</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;</span><span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="err">`</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="n">So</span> <span class="n">it</span> <span class="n">seems</span> <span class="n">natural</span> <span class="n">to</span> <span class="n">want</span> <span class="n">to</span> <span class="n">substitute</span> <span class="n">such</span>
</span><span class='line'><span class="n">a</span> <span class="k">type</span> <span class="n">expression</span> <span class="k">for</span> <span class="p">(</span><span class="n">the</span> <span class="n">meta</span><span class="o">-</span><span class="n">variable</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="n">the</span> <span class="n">syntax</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">not</span> <span class="n">legal</span><span class="p">,</span> <span class="n">because</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span>
</span><span class='line'><span class="n">not</span> <span class="n">a</span> <span class="n">legitimate</span> <span class="n">path</span> <span class="n">component</span><span class="p">.</span>  <span class="n">Niko</span> <span class="n">describes</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">of</span>
</span><span class='line'><span class="n">work</span><span class="o">-</span><span class="n">arounds</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">allowing</span> <span class="n">one</span> <span class="n">to</span> <span class="n">wrap</span> <span class="n">a</span> <span class="k">type</span> <span class="n">expression</span> <span class="n">that</span> <span class="n">appears</span>
</span><span class='line'><span class="k">in</span> <span class="n">a</span> <span class="n">path</span> <span class="n">expression</span> <span class="n">with</span> <span class="n">brackets</span><span class="p">,</span> <span class="n">yielding</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">All</span> <span class="n">of</span> <span class="n">the</span> <span class="n">work</span><span class="o">-</span><span class="n">arounds</span> <span class="n">presented</span> <span class="n">by</span> <span class="n">Niko</span> <span class="k">do</span> <span class="n">require</span> <span class="n">allowing</span>
</span><span class='line'><span class="n">arbitrary</span> <span class="k">type</span><span class="o">-</span><span class="n">expressions</span> <span class="k">in</span> <span class="n">some</span> <span class="n">form</span> <span class="n">to</span> <span class="n">appear</span> <span class="k">as</span> <span class="n">a</span> <span class="n">sub</span><span class="o">-</span><span class="n">expression</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">would</span> <span class="n">complicate</span> <span class="n">the</span> <span class="n">parser</span> <span class="k">in</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">compiler</span> <span class="p">(</span><span class="n">there</span> <span class="n">has</span> <span class="n">been</span>
</span><span class='line'><span class="n">a</span> <span class="n">slight</span> <span class="n">push</span> <span class="n">to</span> <span class="n">try</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">simplify</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">path</span> <span class="n">expression</span> <span class="n">syntax</span><span class="p">,</span> <span class="n">which</span>
</span><span class='line'><span class="n">this</span> <span class="n">would</span> <span class="n">conflict</span> <span class="n">with</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Further.syntactic.exploration.of.encoding.trait.and.type&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Further</span> <span class="n">syntactic</span> <span class="n">exploration</span> <span class="n">of</span> <span class="n">encoding</span> <span class="k">trait</span> <span class="n">and</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">his</span> <span class="n">second</span> <span class="n">blog</span> <span class="n">post</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">provides</span> <span class="n">some</span> <span class="n">alternative</span> <span class="n">syntactic</span> <span class="n">forms</span>
</span><span class='line'><span class="k">for</span> <span class="n">resolution</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">as</span> <span class="n">described</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#nikoenctt1&quot;</span><span class="o">&gt;</span><span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="o">::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">X</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">from</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Functional</span><span class="o">-</span><span class="n">style</span> <span class="n">name</span> <span class="n">resolution</span> <span class="p">(</span><span class="n">take</span> <span class="mi">1</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span> <span class="n">here</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">added</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">list</span>
</span><span class='line'><span class="p">(</span><span class="k">if</span> <span class="n">any</span><span class="p">)</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">so</span> <span class="n">now</span> <span class="n">we</span> <span class="n">get</span> <span class="n">to</span> <span class="n">retain</span> <span class="n">syntactic</span> <span class="n">backwards</span>
</span><span class='line'><span class="n">compatibility</span><span class="p">.</span>  <span class="n">Since</span> <span class="n">Rust</span> <span class="n">allows</span> <span class="n">one</span> <span class="n">to</span> <span class="n">omit</span> <span class="n">the</span> <span class="n">explicit</span> <span class="k">type</span>
</span><span class='line'><span class="n">instantiation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">X</span><span class="p">,</span> <span class="p">...</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">when</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">able</span> <span class="n">to</span> <span class="n">infer</span>
</span><span class='line'><span class="n">the</span> <span class="n">instantiation</span><span class="p">,</span> <span class="n">this</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">a</span> <span class="n">natural</span> <span class="n">way</span> <span class="n">to</span> <span class="k">continue</span>
</span><span class='line'><span class="n">doing</span> <span class="k">return</span><span class="o">-</span><span class="k">type</span> <span class="n">based</span> <span class="n">inference</span> <span class="n">of</span> <span class="n">the</span> <span class="n">desired</span> <span class="k">type</span><span class="p">,</span> <span class="n">the</span> <span class="n">way</span>
</span><span class='line'><span class="n">it</span> <span class="n">does</span> <span class="n">already</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="o">::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">for</span> <span class="n">X</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">distinguishing</span> <span class="n">the</span> <span class="n">synthetic</span> <span class="n">parameter</span>
</span><span class='line'><span class="n">from</span> <span class="n">other</span> <span class="n">entries</span> <span class="n">on</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">have</span> <span class="n">already</span> <span class="n">stated</span> <span class="n">my</span> <span class="n">problems</span> <span class="n">with</span> <span class="n">the</span> <span class="n">first</span> <span class="n">option</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">the</span> <span class="n">second</span> <span class="n">option</span><span class="p">,</span> <span class="n">I</span> <span class="n">anticipate</span> <span class="n">being</span> <span class="n">personally</span> <span class="n">confused</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">being</span> <span class="n">injected</span> <span class="n">into</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span>
</span><span class='line'><span class="n">I</span> <span class="n">understand</span> <span class="n">the</span> <span class="n">appeal</span> <span class="n">of</span> <span class="n">enabling</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">to</span> <span class="k">continue</span> <span class="n">doing</span>
</span><span class='line'><span class="n">heavy</span> <span class="n">lifting</span> <span class="n">and</span> <span class="n">lighten</span> <span class="n">the</span> <span class="n">programmers</span> <span class="n">syntactic</span> <span class="n">load</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span>
</span><span class='line'><span class="n">post</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">does</span> <span class="n">a</span> <span class="n">good</span> <span class="n">job</span> <span class="n">of</span> <span class="n">laying</span> <span class="n">out</span> <span class="n">some</span> <span class="n">of</span> <span class="n">the</span> <span class="n">unexpected</span>
</span><span class='line'><span class="n">interactions</span> <span class="n">of</span> <span class="n">the</span> <span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">with</span> <span class="n">the</span> <span class="n">other</span> <span class="n">forms</span> <span class="n">of</span>
</span><span class='line'><span class="n">generic</span> <span class="k">type</span> <span class="n">parameterization</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">third</span> <span class="n">option</span> <span class="n">would</span> <span class="n">reduce</span> <span class="n">confusion</span> <span class="n">somewhat</span><span class="p">,</span> <span class="n">since</span> <span class="n">the</span>
</span><span class='line'><span class="n">synthetic</span> <span class="n">parameter</span> <span class="n">would</span> <span class="n">receive</span> <span class="n">special</span> <span class="n">attention</span> <span class="n">at</span> <span class="n">points</span> <span class="n">of</span> <span class="k">type</span>
</span><span class='line'><span class="n">instantiation</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">still</span> <span class="n">think</span> <span class="n">it</span> <span class="n">is</span> <span class="n">an</span> <span class="n">abuse</span> <span class="n">of</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;L.a.id..thinkbinding..Simpler.syntax:.What.about.binding...a.&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;thinkbinding&quot;</span><span class="o">&gt;</span><span class="n">Simpler</span> <span class="n">syntax</span><span class="o">:</span> <span class="n">What</span> <span class="n">about</span> <span class="n">binding</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">I</span> <span class="n">set</span> <span class="n">about</span> <span class="n">trying</span> <span class="n">to</span> <span class="n">come</span> <span class="n">up</span> <span class="n">with</span> <span class="n">another</span> <span class="n">syntactic</span> <span class="n">form</span>
</span><span class='line'><span class="k">for</span> <span class="n">associated</span> <span class="n">item</span> <span class="n">access</span><span class="p">.</span>  <span class="n">My</span> <span class="n">primary</span> <span class="n">focus</span> <span class="n">initially</span> <span class="n">was</span><span class="o">:</span>
</span><span class='line'><span class="n">all</span> <span class="n">of</span> <span class="n">these</span> <span class="n">examples</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">so</span> <span class="n">much</span> <span class="n">simpler</span><span class="p">,</span> <span class="n">to</span> <span class="n">my</span> <span class="n">mind</span><span class="p">,</span>
</span><span class='line'><span class="k">if</span> <span class="n">we</span> <span class="n">were</span> <span class="n">able</span> <span class="n">to</span> <span class="n">go</span> <span class="n">back</span> <span class="n">to</span> <span class="n">using</span> <span class="n">a</span> <span class="n">single</span> <span class="n">identifier</span>
</span><span class='line'><span class="k">for</span> <span class="n">the</span> <span class="n">relevant</span> <span class="n">path</span> <span class="n">component</span> <span class="k">in</span> <span class="n">the</span> <span class="n">referencing</span> <span class="n">form</span><span class="p">,</span>
</span><span class='line'><span class="n">the</span> <span class="n">way</span> <span class="n">that</span> <span class="n">C</span><span class="o">++</span> <span class="n">uses</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">How</span> <span class="n">can</span> <span class="n">Rust</span> <span class="n">make</span> <span class="n">its</span> <span class="n">own</span> <span class="n">analogous</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">the</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">R</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">is</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Of</span> <span class="n">course</span><span class="p">,</span> <span class="n">we</span> <span class="n">have</span> <span class="n">already</span> <span class="n">covered</span> <span class="n">that</span> <span class="n">this</span> <span class="n">will</span> <span class="kr">be</span> <span class="n">ambiguous</span> <span class="k">if</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">mere</span> <span class="k">type</span> <span class="p">(</span><span class="n">and</span> <span class="n">it</span> <span class="n">is</span> <span class="n">of</span> <span class="n">course</span> <span class="n">ambiguous</span> <span class="k">if</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">just</span> <span class="n">a</span> <span class="k">trait</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="n">what</span> <span class="k">if</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">referring</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="n">the</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">together</span><span class="o">:</span> <span class="n">the</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="k">trait</span><span class="p">)</span> <span class="n">pairing</span> <span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">T</span><span class="p">)</span><span class="o">?</span>  <span class="n">Clearly</span> <span class="kr">once</span> <span class="n">one</span> <span class="n">specifies</span> <span class="n">the</span>
</span><span class='line'><span class="n">pair</span><span class="p">,</span> <span class="n">then</span> <span class="n">it</span> <span class="n">is</span> <span class="n">easy</span> <span class="n">to</span> <span class="n">tell</span> <span class="n">what</span> <span class="n">items</span> <span class="n">are</span> <span class="n">associated</span> <span class="n">with</span> <span class="n">the</span> <span class="n">pair</span><span class="p">.</span>
</span><span class='line'><span class="n">Even</span> <span class="n">a</span> <span class="n">human</span> <span class="n">without</span> <span class="n">a</span> <span class="n">sophisticated</span> <span class="n">IDE</span> <span class="n">would</span> <span class="n">know</span> <span class="k">in</span> <span class="n">that</span> <span class="n">case</span> <span class="n">to</span> <span class="n">try</span>
</span><span class='line'><span class="n">invoking</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">grep</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">searching</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">impl</span> <span class="n">T</span><span class="p">.</span><span class="o">*</span> <span class="k">for</span> <span class="n">X</span><span class="p">.</span><span class="o">*&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">a</span> <span class="n">compiler</span> <span class="n">can</span> <span class="k">do</span> <span class="n">even</span> <span class="n">better</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Another</span> <span class="n">way</span> <span class="n">of</span> <span class="n">looking</span> <span class="n">at</span> <span class="n">this</span><span class="o">:</span> <span class="n">What</span> <span class="k">if</span> <span class="n">we</span> <span class="n">could</span> <span class="n">introduce</span> <span class="n">local</span> <span class="n">names</span>
</span><span class='line'><span class="k">for</span> <span class="n">the</span> <span class="k">impl</span> <span class="n">that</span> <span class="n">corresponds</span> <span class="n">to</span> <span class="n">the</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="k">trait</span><span class="p">)</span> <span class="n">pairing</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">I</span> <span class="n">started</span> <span class="n">working</span> <span class="n">on</span> <span class="n">ideas</span> <span class="n">all</span> <span class="n">centering</span> <span class="n">around</span> <span class="n">a</span> <span class="n">declaration</span>
</span><span class='line'><span class="n">form</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">let</span> <span class="n">R</span> <span class="o">=</span> <span class="k">trait</span> <span class="n">T</span> <span class="k">for</span> <span class="k">type</span> <span class="n">X</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">or</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">use</span> <span class="k">impl</span> <span class="n">R</span> <span class="o">=</span> <span class="n">T</span> <span class="k">for</span> <span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="n">other</span> <span class="n">variations</span> <span class="p">(</span><span class="n">I</span> <span class="n">think</span> <span class="n">Patrick</span> <span class="n">Walton</span> <span class="n">actually</span> <span class="n">deserves</span> <span class="n">credit</span>
</span><span class='line'><span class="k">for</span> <span class="n">that</span> <span class="n">last</span> <span class="n">one</span><span class="p">;</span> <span class="n">we</span> <span class="n">will</span> <span class="n">revisit</span> <span class="n">it</span> <span class="n">later</span><span class="p">).</span>  <span class="n">But</span> <span class="n">Niko</span> <span class="n">quickly</span> <span class="n">pointed</span>
</span><span class='line'><span class="n">the</span> <span class="n">huge</span> <span class="n">failing</span> <span class="n">of</span> <span class="n">all</span> <span class="n">of</span> <span class="n">these</span> <span class="n">declaration</span> <span class="n">forms</span><span class="o">:</span> <span class="n">a</span> <span class="n">very</span> <span class="n">common</span>
</span><span class='line'><span class="kn">use</span> <span class="n">case</span> <span class="k">for</span> <span class="n">associated</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">remember</span><span class="p">,</span> <span class="n">that</span> <span class="n">was</span> <span class="n">our</span> <span class="n">original</span> <span class="n">goal</span><span class="p">)</span>
</span><span class='line'><span class="n">is</span> <span class="k">for</span> <span class="n">function</span> <span class="n">signatures</span><span class="p">,</span> <span class="n">like</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>rust
fn distance&lt;F: Transformation>(x: Domain(F), y: Domain(F), f: F) -> DistanceType(F);</p>

<p>fn remove_edge&lt;G: IncidenceGraph + EdgeCollection>(g: &amp;mut G, e: Edge(G));
<code>``
where</code>Domain(F)<code>,</code>DistanceType(F)<code>, and</code>Edge(G)<code>are replaced
with appropriately Rust-friendly syntactic forms.  There is no *place*
there to put a declaration form</code>let &hellip;<code>or</code>use &hellip;<code>that refers to
</code>F`.  The same applies for other parameterized forms, such as structs,
enums, and traits.</p>

<p>So, back to the drawing board.</p>

<hr />

<a name="L.a.id..insight..An.Insight..a."></a>
<h2><a id="insight">An Insight</a></h2>

<p>Even though my attempt to solve this problem via a declaration form had
failed, I continued to focus on the fact that associated item access
is all about the (type, trait) pairing.  So how could I surmount the
parameterized signature wall?</p>

<p>After reflecting on the parameterized signature itself, I said, &ldquo;where
is a natural place to put a binding from an identifier to a (type,
trait) pair?&rdquo;  And this reduced to &ldquo;where does the (type, trait) pair
come from?&rdquo;  This was my insight: The parameterized signature</p>

<nobr>`<X: T>`</nobr>


<p> <em>itself</em> is where the pairing is defined;
(or in the case of <nobr><code>&lt;X: T + U&gt;</code></nobr>: <em>pairings</em>).</p>

<p>My only problem was to put the identifier binding in there.  Once I
saw the pairing waiting right in the parameter list, the place for the
identifier became clear: in-between the type and the trait:</p>

<nobr>`<X: R=T>`</nobr>


<p> binds <code>R</code> to the <code>impl T for X</code>;
for multiple traits, we have <nobr><code>&lt;X: R=T + R2=U&gt;</code></nobr>,
where <code>R</code> is bound as above, and <code>R2</code> is bound to the <code>impl U for X</code>.</p>

<p>And now we can consider writing our examples like so:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">:</span> <span class="n">T</span><span class="o">=</span><span class="n">Transformation</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">::</span><span class="n">DistanceType</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">remove_edge</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">G</span><span class="o">:</span> <span class="n">IncidenceGraph</span> <span class="o">+</span> <span class="n">EC</span><span class="o">=</span><span class="n">EdgeCollection</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">g</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">G</span><span class="p">,</span> <span class="n">e</span><span class="o">:</span> <span class="n">EC</span><span class="o">::</span><span class="n">Edge</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The other cute insight is this: the only time we need to add these
identifiers explicitly is when there are multiple trait bounds.
When there is a single trait bound <nobr><code>&lt;X:R=T&gt;</code></nobr>, the
identifier <code>X</code> is just as reasonable (or at least unambiguous) as <code>R</code>
is as a way to reference the impl.  So why not treat</p>

<nobr>`<X:T>`</nobr>


<p> as an abbreviation for <nobr><code>&lt;X:X=T&gt;</code></nobr>:
boom!  The biggest potential complaint with this extension (namely,
the notational complexity of making people pepper their code with
explicit bindings of the impls) goes away!  And our first example becomes:</p>

<pre><code class="rust">fn distance&lt;F: Transformation&gt;(x: F::Domain, y: F::Domain, f: F) -&gt; F::DistanceType;
</code></pre>

<p>(our second example remains unchanged, since <code>G</code> has two trait bounds there, and
so <code>G</code> alone cannot unambiguously denote a (type, trait) pair.</p>

<p>Note also that this binding form does not suffice on its own; in
particular, if one wants to introduce a binding for a (type,trait)
pairing that does not appear in the generic parameter bounds of the
signature.  But the latter is exactly the case that <em>is</em> handled by a
declaration form such as those <a href="#thinkbinding">proposed earlier</a>!</p>

<p>So neither solution suffices on its own, but the two together cover
many use cases of interest.</p>

<hr />

<a name="L.a.id..proposal..The.proposed.syntax.for.associated.items.in.Rust..a."></a>
<h2><a id="proposal">The proposed syntax for associated items in Rust</a></h2>

<p>So, with that insight explained, here is my proposal for associated items:</p>

<ol>
<li><p>A trait can now declare names for things besides methods.
 In terms of the grammar that John has been working on:</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_method* RBRACE ;
</code></pre>

<p> is replaced with</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_item* RBRACE ;
 trait_item: trait_method | trait_constant | trait_type
 trait_type: TYPE ident (generic_decls)? SEMI
           | TYPE ident (generic_decls)? COLON boundseq SEMI ;
 trait_const: STATIC ident COLON ty SEMI ;
</code></pre></li>
<li><p>The identifier bound by a trait types is in scope of its enclosing
 trait; trait method declarations and trait const declarations
 can reference it.</p></li>
<li><p>Extend the Rust grammar to allow an optional binding of
 an identifier to a (type, trait) pair in a type parameter bound.
 In terms of the grammar:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | obsoletekind ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | ident = trait | obsoletekind ;
</code></pre></li>
<li><p>Extend the Rust grammar to allow a declaration binding
 an identifier to a (type, trait) pair.
 In terms of the grammar, I <em>think</em> this is close to what I want:</p>

<pre><code class="`"> view_item : attrs_vis use ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> view_item : attrs_vis use | USE impl ident = trait for ty ;
</code></pre>

<p> Of potential interest, we do not allow visibility attributes
 on <code>use impl R = T for X;</code>, because these definitions are always
 local shorthands and thus private to the module.  (Maybe in
 the future we will see motivation to allow the bindings to
 be exposed, but I have not yet seen a motivation for this.)</p>

<p> I am not attached to the particulars of the syntax above;
 in particular, if someone wants to throw in the <code>trait</code>
 and/or <code>type</code> keywords into the above to make the purpose
 all the more clear, I will not object.  More so if it is
 somehow <em>necessary</em> for disambiguation, but I do not
 anticipate that being the case.</p></li>
<li><p>A bound of the form <code>R=T</code> (<code>ident = ty</code>) in the context of a <code>ty_param</code>
 production <code>X : ... [] ...</code> (<code>ident COLON bound + ... + [] + ... + bound</code>)
 (where <code>[]</code> denotes the contextual hole that the <code>R=T</code> is plugged into)
 is treated as binding <code>R</code> to the code defined by the <code>impl T for X</code>.
 The scope of the binding for <code>R</code> encompasses: the rest of the boundseq
 (to the right of the <nobr><code>"R=T"</code></nobr>) and the remainder of this decl
 that follows the generic_decls within which the <nobr><code>R=T</code></nobr> bound appears.</p></li>
<li><p>This binding of <code>R</code> can shadow earlier bindings of the same identifier
 (either other impl-bindings, or module names).  It seems like this
 should be a reasonable thing to signal via a lint-warning.</p></li>
<li><p>A path identifier component can now be an <code>R</code>, binding an <code>impl T for X</code>.</p>

<p>So one can access trait items (see trait_item above) as R::item.
 Associated items can be type-parametric whenever the corresponding
 item could be type-parameteric when exported from a module.</p></li>
<li><p>A boundseq with a single bound of variant <code>ty</code> above, where ty is
 itself of the form <code>ident</code> (i.e. the <code>&lt;X:T&gt;</code> case) is implicitly
 expanded into <code>&lt;X:X=T&gt;</code>.</p></li>
</ol>


<hr />

<a name="L.a.id..futurework..What.the.proposal.does.not.cover..a."></a>
<h2><a id="futurework">What the proposal does not cover</a></h2>

<p>There are cases of interest that are not covered by the above proposal.</p>

<p>Most obvious to me are situations where one wants to describe mutual
constraints <em>between</em> the items associated with type parameters.
(An example of this is provided by the <code>gen_orbit</code> example with
the constraint <code>DistanceType(I) = N</code>, and more generally much of the
content of the <code>requires(..)</code> clauses from EOP that I deliberately
ignored).  For the examples from EOP, C++ handles this by doing the
template instantiation blindly and applying the type checker to
code after concrete types have been substituted for the parameters;
this approach is not compatible with Rust&rsquo;s design where we want to
type-check a generic body of code in terms of the guarantees provided
by the trait-bounds, <em>not</em> delaying those checks until after
the concrete types have been plugged in.</p>

<p>Also, in the changes I proposed above to the Rust grammar (and
somewhat implicitly to its semantics), I deliberately constrained my
focus to the cases Niko described in his blog posts: types, functions,
and constants.  But one might consider further extensions, such as
allowing traits to define <em>other</em> traits.  (I found that subject hard
to wrap one&rsquo;s mind around, and I wanted to keep the focus limited for
Rust 1.0; we can leave generalizations of this approach for after Rust
1.0.)</p>

<p>Also, I&rsquo;m not sure whether there is need and/or utility in further
generalizing this topic to <a href="http://www.haskell.org/haskellwiki/GHC/Type_families#An_associated_data_type_example">associated data families</a>.  Again,
I want to limit the scope of the work to something we believe we can
accomplish for Rust 1.0.</p>

<p>What else have I missed?  Let me know, leave a comment.  (Or look
for me in the #rust irc channel.)</p>
]]></content>
  </entry>
  
</feed>
