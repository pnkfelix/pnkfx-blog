<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2021-04-26T17:15:35-04:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing Octopress Table Rendering]]></title>
    <link href="http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/"/>
    <updated>2015-12-18T22:00:00-05:00</updated>
    <id>http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering</id>
    <content type="html"><![CDATA[<p>Learn how I hacked the SCSS for my blog to get tables to look right,
without breaking everything else (I hope).</p>

<!-- more -->


<p>Here is a sample table.</p>

<table>
<thead>
<tr>
<th>key </th>
<th> value1 </th>
<th> value2</th>
</tr>
</thead>
<tbody>
<tr>
<td>a   </td>
<td> apple  </td>
<td> aardvark</td>
</tr>
<tr>
<td>b   </td>
<td> banana </td>
<td> bonobo</td>
</tr>
<tr>
<td>c   </td>
<td> clementine </td>
<td> cat</td>
</tr>
</tbody>
</table>


<p>It is written in my blog source via this source text:</p>

<pre><code>key | value1 | value2
----|--------|----------
a   | apple  | aardvark
b   | banana | bonobo
c   | clementine | cat
</code></pre>

<p>The default octopress presentation of such a table just smushes the
text into a grid, but does not render the division of the header,
rows, columns, nor cells in any way (no borders, no colors, et
cetera).</p>

<p>After hearing a colleague complain about how bad that default
presentation looked compared to what Github does with such tables, I
decided to try to figure out how to fix it.</p>

<p>First, I opened up gist.github.com and put my table into a gist there
(with a <code>.md</code>) extension, so I could see what github does to render
such tables.</p>

<p>By hitting &ldquo;Inpsect Element&rdquo; and looking at the
cascading style sheet (CSS) settings for the <code>table</code>, <code>tr</code>, <code>th</code>, and
<code>td</code> elements,<label for='&lsquo;settings&rsquo;' class='margin-toggle'> &#8853;</label><input type='checkbox' id='&lsquo;settings&rsquo;' class='margin-toggle'/><span class='marginnote'>&lsquo;Namely, </span>
I identified the things that needed to change.</p>

<p><label for='' class='margin-toggle'>&#8853;</label><input type='checkbox' id='' class='margin-toggle'/><span class='marginnote'>
The one trick I <em>will</em> note, since its a pretty cute hack on the
part of CSS, is the way it uses the <code>:nth-child</code> selector to
differentiate the even rows from the odd rows when deciding on the
background color.
</span>
You can see the specific changes, with comments, in the <code>.scss</code>
file transcribed below; I will not describe the effect of each one
here.</p>

<p>My usual tactic when doing this sort of interactive exploration of CSS
is to toggle each such setting on and off in the reference document
(the rendered gist, in this case), to see the effect of the setting on
the overall document, and then manually enter the setting into a
similarly inspected element in the target document where I am trying
to recreate the effect.</p>

<p>To limit the effect of the styling to just the tables that appear in a
blog post, I made sure that each CSS customization was prefixed by
<code>.entry-content</code>; I had determined via inspection that each block
entry is surrounded by a <code>&lt;div class="entry-content"&gt;</code>.</p>

<p>So, I added the customizations to my <code>sass/custom/_styles.scss</code>,
regenerated my site, and looked at the result. It was quite promising,
except for one big problem: I had changed the formatting for <em>all</em>
tables, including the ones that are used to render code snippets!</p>

<p><label for='' class='margin-toggle'>&#8853;</label><input type='checkbox' id='' class='margin-toggle'/><span class='marginnote'>
I will admit that I do not actually know the semantics of an
&ldquo;inherit&rdquo; setting. I assume it means something like &ldquo;inherit the
value from your parent element, based on the context of where you
appear in the document.&rdquo;
</span>
So I further revised the CSS so that, when you are in the context of a
<code>class="code"</code> underneath a <code>class="entry-content"</code>, <em>then</em> you should
just inherit the setting, rather than using the values specified here.</p>

<p>Anyway, <em>that</em> seemed to work great!</p>

<p>So here&rsquo;s my customized <code>_better_tables.scss</code> file (which is
imported into the aformentioned <code>_styles.scss</code> file via
<code>@import "better_tables";</code>)</p>

<pre><code class="scss">// make the text for the header row bold and centered.
// (I have not been able to figure out where jekyll/octopress are overriding
//  the text-align and setting it to `left`)
.entry-content th { font-weight: bold; text-align: center }

// typography for p/blockquote/ul/ol puts a 1.5em margin below those elements,
// so do the same for our tables ...
.entry-content table { margin-bottom: 1.5em }

// ... but undo that for tables for pygments-generated code
.entry-content .code table { margin-bottom: inherit }


// add a border around each cell and padding around its content ...
.entry-content th, .entry-content td {
  border: 1px solid #ddd;
  padding: 6px 13px;
}

// ... but undo that for tables for pygments-generated code
.entry-content .code th, .entry-content .code td {
  border: inherit; padding: inherit;
}


// zebra-stripe the rows (N.B. `nth-child(2n)` works too) ...
.entry-content tr                 { background-color: #FFFFFF }
.entry-content tr:nth-child(even) { background-color: #F8F8F8 }

// ... but undo that for tables for pygments-generated code
.entry-content .code tr                 { background-color: inherit }
.entry-content .code tr:nth-child(even) { background-color: inherit }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resurrected (Hello Again World)]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world/"/>
    <updated>2013-01-08T00:55:00-05:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world</id>
    <content type="html"><![CDATA[<a name="It.s.Clobbering.Time"></a>
<h2>It&rsquo;s Clobbering Time</h2>

<p>Remember that thing I said back <a href="/blog/2012/12/31/hello-world">at the end of 2012</a>?
That thing?
That thing about the important detail that:</p>

<blockquote><p>the <code>_deploy/</code> subdirectory is itself a clone of the targeted
github repository, with the <code>gh-pages</code> branch checked out.</p></blockquote>

<p>It turns out this is really important detail.</p>

<p>Here&rsquo;s why: For my first blogging act of the new year, I inadvertently destroyed
my own blog.</p>

<!-- more -->


<p>I attempted to write a post from a computer other than the one out of
which I had already worked all the octopress-compatibility kinks.
In the hustle of dealing with <code>rbenv</code> and various other ruby-oriented
dependencies, I forgot about the detail above.</p>

<p>And then when I ran <code>rake deploy</code>, I clobbered the live blog.</p>

<p>I may have been recovering from, or incapacitated by, New Years
revelry at the time, it is not clear to me at the current moment.  I
believe I identified the disaster right after it happened, but immediately
decided I did not have the time then to diagnose it, fix it,
or even to attempt to rollback the
state and repush to github.  I vaguely remember considering that last option
and deciding that even that was out of the question.  (I think a pending
trip to a Karaoke bar may have been involved in the decision-making
process here.)</p>

<p>So, tonight I diagnosed and fixed the problem.</p>

<p>At first I was just going to let the matter lie undocumented, and
pretend like it never happened.</p>

<p>But I realized that I may well again make the same mistake in the future,
and that it behooved me to at least document the issue in my commit
log for <a href="https://github.com/pnkfelix/pnkfx-blog/commits/blog.pnkfx.org">the blog source</a>.</p>

<p>And after writing that commit log entry and pushing it, I decided that
this story was in fact blog worthy; after all, what is the point of
a blog if not to freely broadcast your mistakes?  :)</p>

<p>So, directly from <a href="https://github.com/pnkfelix/pnkfx-blog/commit/f277b041de33a8e0eac02c6aecb3909231725db7">my commit message</a>, here is the description of how
I clobbered my own blog:</p>

<blockquote><p>The easy way to sum it up is: The model
employed by octopress when deploying to github is this: Your <em>deploy/
subdirectory must contain a checkout of the target repo, the one with
the gh-pages branch, and you must have that </em>deploy/ subdirectory
checked out and ready to go before running &lsquo;rake deploy&rsquo;.</p>

<p>If you do not have a _deploy/ subdirectory at all and you let &lsquo;rake
deploy&rsquo; create it for you but you also let &lsquo;rake deploy&rsquo; attempt to
push to github, and you are also managing the source itself on github,
you will enter a world of pain where the rake invocation will push
<em>this</em> root directory, presumably in the master branch (or in my case,
blog.pnkfx.org branch) to the target repo in the gh-pages/ branch.
Which will bust things terribly, especially if that causes the CNAME
file to get deleted from the gh-pages/ branch of the target repo.</p></blockquote>

<a name="A.note.on.self-reference"></a>
<h2>A note on self-reference</h2>

<p>Also, a quick half shout-out, or maybe corrective note, to
<a href="http://www.seamusbradley.net/blog/blog/2012/04/24/how-to-link-to-your-own-blog-posts-in-octopress/">seamusbradley</a> for pointing out some details about linking back to
one&rsquo;s own blog posts.</p>

<p>It is only a half shout-out because Seamus&rsquo;s note is only useful, I
think, if you have, like him, a customized setting for the <code>root:</code> in
your <code>_config.yml</code>.  That, or Seamus has confused himself and changed
his <code>root</code> setting in order to accommodate other url&rsquo;s that he
observed, but those urls are in fact actually generated by settings
for properties other than <code>root</code>.</p>

<p>Here&rsquo;s the concrete details: I read (misread?) Seamus&rsquo;s post at first
as saying that a customized setting of <code>root</code> to <code>/blog</code> is a
prerequisite for linking to your own posts.  It seems to me that the
relevant detail is what the <em>permalink</em> setting is, not the root.
(But then again, I have not played with changing my root setting,
apart from finding that when I did try changing it to <code>/blog</code> as
Seamus suggested, it seems like doing so broke <code>rake preview</code>.)</p>

<p>In my case, the <code>root</code> and <code>permalink</code> for my <code>_config.yml</code>
are set as follows:</p>

<pre><code>root: /
permalink: /blog/:year/:month/:day/:title/
</code></pre>

<p>and I format links to my own posts, such as the one you are reading,
like so:
<a href="/blog/2013/01/08/resurrected-hello-again-world"><code>/blog/2013/01/08/resurrected-hello-again-world</code></a>
as you can see from looking at the source for the line above,</p>

<pre><code>[`/blog/2013/01/08/resurrected-hello-again-world`](/blog/2013/01/08/resurrected-hello-again-world)
</code></pre>

<p>A bit of quoted self-reference is a good place to stop for the night.</p>
]]></content>
  </entry>
  
</feed>
