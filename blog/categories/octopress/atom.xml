<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2015-10-16T15:51:05+02:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Updating Octopress post-Mavericks upgrade.]]></title>
    <link href="http://blog.pnkfx.org/blog/2014/03/13/meta-updating-octopress-post-mavericks-upgrade/"/>
    <updated>2014-03-13T06:18:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2014/03/13/meta-updating-octopress-post-mavericks-upgrade</id>
    <content type="html"><![CDATA[<p>I decided this morning to write a blog post related to Rust.  I have
not posted to this blog in months, and in the meantime I had upgraded
this computer at home to Mac OS X Mavericks (10.9.2).</p>

<p>So of course my existing set of commands for Octopress workflow did
not work.</p>

<p>At first there were dependencies like <code>chunky_png-1.2.7</code> that had to
be satisfied (re-installed, I assume; I am pretty sure I blew away my
previous Homebrew setup during the upgrade; I do not know how much
that overlaps with Ruby&#39;s package management system).</p>

<p>The few step was just blind following of the suggestions made by my
tools: <code>rake</code> suggests to run <code>bundle install</code>, and I comply.  And the results
seem promising:
<code>text
% rake generate
Could not find chunky_png-1.2.7 in any of the sources
Run \`bundle install\` to install missing gems.
% bundle install
Fetching gem metadata from http://rubygems.org/.......
Fetching gem metadata from http://rubygems.org/..
Using rake (0.9.6) 
Using RedCloth (4.2.9) 
Installing chunky_png (1.2.7) 
Using fast-stemmer (1.0.2) 
Using classifier (1.3.3) 
Using fssm (0.2.10) 
Installing sass (3.2.5) 
Using compass (0.12.2) 
Using directory_watcher (1.4.1) 
Installing haml (3.1.8) 
Installing kramdown (0.13.8) 
Installing liquid (2.3.0) 
Using syntax (1.0.0) 
Using maruku (0.6.1) 
Using posix-spawn (0.3.6) 
Using yajl-ruby (1.1.0) 
Installing pygments.rb (0.3.7) 
Installing jekyll (0.12.0) 
Installing rack (1.4.5) 
Installing rack-protection (1.3.2) 
Using rb-fsevent (0.9.3) 
Using rdiscount (1.6.8) 
Using redcarpet (2.2.2) 
Using rubypants (0.2.0) 
Installing tilt (1.3.3) 
Installing sinatra (1.3.4) 
Installing stringex (1.4.0) 
Using bundler (1.3.5) 
Your bundle is complete!
Use \`bundle show [gemname]\` to see where a bundled gem is installed.
</code></p>

<p>But I
balked on the second step:
<code>
% rake generate
rake aborted!
You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:2:in \`&lt;top (required)&gt;&#39;
(See full trace by running task with --trace)
% bundle exec
bundler: exec needs a command to run
</code></p>

<p>I did not understand what <code>bundle exec</code> meant here, so I did not do the &quot;obvious thing&quot;, which apparently is to re-run generate but within bundle, like so:
<code>% bundle exec rake generate</code></p>

<p>Instead I fumbled around trying to figure out what my situation was
with respect to <code>rake:</code> do I need to downgrade to a previous version?
Or do I need to upgraade its subcomponents, and/or my whole site
configuration?</p>

<p>The first things I learned from a couple web interactions:</p>

<p>From <a href="http://stackoverflow.com/questions/17474969/you-have-already-activated-rake-0-9-6-but-your-gemfile-requires-rake-10-1-0-us">stackoverflow</a>
I learned:</p>

<ul>
<li>You can find out what version(s) of a gem you have install, with
the relatively obvious <code>gem list</code> command:
```
% gem list rake</li>
</ul>

<p>*** LOCAL GEMS ***</p>

<p>rake (10.1.0, 0.9.6)
```</p>

<ul>
<li>You can also remove particular versions of a gem, with the <code>gem
uninstall</code> command:
```
% gem uninstall rake</li>
</ul>

<p>Select gem to uninstall:
 1. rake-0.9.6
 2. rake-10.1.0
 3. All versions</p>

<blockquote>
<p>1
Successfully uninstalled rake-0.9.6
```</p>
</blockquote>

<p>But these facts and this process did not actually help, because I
still needed <code>rake-0.9.6</code> for my site configuration, for some reason I
have not yet determined (mostly due to lack of trying).</p>

<p>I then did some more guessing and followed some false paths, like
reinstalling the <code>bundler</code> gem, uninstalling and reinstalling rake
(which effectively led to me replacing rake-10.1.0 with rake-10.1.1).</p>

<p>At some point I ran this:
<code>
% bundle update rake
Fetching gem metadata from http://rubygems.org/........
Fetching gem metadata from http://rubygems.org/..
Resolving dependencies...
Installing rake (0.9.6) 
Using RedCloth (4.2.9) 
Using chunky_png (1.2.7) 
Using fast-stemmer (1.0.2) 
Using classifier (1.3.3) 
Using fssm (0.2.10) 
Using sass (3.2.5) 
Using compass (0.12.2) 
Using directory_watcher (1.4.1) 
Using haml (3.1.8) 
Using kramdown (0.13.8) 
Using liquid (2.3.0) 
Using syntax (1.0.0) 
Using maruku (0.6.1) 
Using posix-spawn (0.3.6) 
Using yajl-ruby (1.1.0) 
Using pygments.rb (0.3.7) 
Using jekyll (0.12.0) 
Using rack (1.4.5) 
Using rack-protection (1.3.2) 
Using rb-fsevent (0.9.3) 
Using rdiscount (1.6.8) 
Using redcarpet (2.2.2) 
Using rubypants (0.2.0) 
Using tilt (1.3.3) 
Using sinatra (1.3.4) 
Using stringex (1.4.0) 
Using bundler (1.3.5) 
Your bundle is updated!
</code>
but I still got the error:
<code>
% rake generate
rake aborted!
You have already activated rake 10.1.1, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:2:in \`&lt;top (required)&gt;&#39;
(See full trace by running task with --trace)
</code>
and this is when I finally saw that I had to do:
<code>
% bundle exec rake generate
</code></p>

<p>Except that this did not solve everything:
``` text
% bundle exec rake generate</p>

<h2 id="toc_0">Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
Configuration from /Users/pnkfelix/Dev/Sites/pnkfx-blog/_config.yml
Building site: source -&gt; public
YAML Exception reading 2013-04-12-better-command-completion-in-bash-aka-resolving-zsh-envy.markdown: invalid byte sequence in US-ASCII
/Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/backtick_code_block.rb:13:in `gsub&#39;: invalid byte sequence in US-ASCII (ArgumentError)
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/backtick_code_block.rb:13:in `render_code_block\&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/octopress_filters.rb:12:in `pre_filter&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/octopress_filters.rb:28:in `pre_render&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:112:in `block in pre_render&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:111:in `each&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:111:in `pre_render&#39;
    from /Users/pnkfelix/Dev/Sites/pnkfx-blog/plugins/post_filters.rb:166:in `do_layout&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in `render&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in `block in render&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `each&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `render&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in `process&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/bin/jekyll:264:in `<top (required)>&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/bin/jekyll:23:in `load&#39;
    from /Users/pnkfelix/.rbenv/versions/1.9.3-p194/bin/jekyll:23:in `<main>&#39;
```</p>

<p>Another web search brought me to a <a href="http://otfusion.org/blog/2013/10/27/os-x-mavericks/">post by a fellow Mavericks user</a> who seems to have a similar attitude to my own about ruby development.
And from that I found the full command I needed
```
% LANG=en_US.utf-8 bundle exec rake generate</p>

<h2 id="toc_1">Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
Configuration from /Users/pnkfelix/Dev/Sites/pnkfx-blog/_config.yml
Building site: source -&gt; public
Successfully generated site: source -&gt; public
```</p>

<p>And here we are!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resurrected (Hello Again World)]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world/"/>
    <updated>2013-01-08T00:55:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/01/08/resurrected-hello-again-world</id>
    <content type="html"><![CDATA[<h2 id="toc_0">It&#39;s Clobbering Time</h2>

<p>Remember that thing I said back <a href="/blog/2012/12/31/hello-world">at the end of 2012</a>?
That thing?
That thing about the important detail that:</p>

<blockquote>
<p>the <code>_deploy/</code> subdirectory is itself a clone of the targeted
github repository, with the <code>gh-pages</code> branch checked out.</p>
</blockquote>

<p>It turns out this is really important detail.</p>

<p>Here&#39;s why: For my first blogging act of the new year, I inadvertently destroyed
my own blog.</p>

<p>I attempted to write a post from a computer other than the one out of
which I had already worked all the octopress-compatibility kinks.
In the hustle of dealing with <code>rbenv</code> and various other ruby-oriented
dependencies, I forgot about the detail above.</p>

<p>And then when I ran <code>rake deploy</code>, I clobbered the live blog.</p>

<p>I may have been recovering from, or incapacitated by, New Years
revelry at the time, it is not clear to me at the current moment.  I
believe I identified the disaster right after it happened, but immediately
decided I did not have the time then to diagnose it, fix it,
or even to attempt to rollback the
state and repush to github.  I vaguely remember considering that last option
and deciding that even that was out of the question.  (I think a pending
trip to a Karaoke bar may have been involved in the decision-making
process here.)</p>

<p>So, tonight I diagnosed and fixed the problem.</p>

<p>At first I was just going to let the matter lie undocumented, and
pretend like it never happened.</p>

<p>But I realized that I may well again make the same mistake in the future,
and that it behooved me to at least document the issue in my commit
log for <a href="https://github.com/pnkfelix/pnkfx-blog/commits/blog.pnkfx.org">the blog source</a>.</p>

<p>And after writing that commit log entry and pushing it, I decided that
this story was in fact blog worthy; after all, what is the point of
a blog if not to freely broadcast your mistakes?  :)</p>

<p>So, directly from <a href="https://github.com/pnkfelix/pnkfx-blog/commit/f277b041de33a8e0eac02c6aecb3909231725db7">my commit message</a>, here is the description of how
I clobbered my own blog:</p>

<blockquote>
<p>The easy way to sum it up is: The model
employed by octopress when deploying to github is this: Your _deploy/
subdirectory must contain a checkout of the target repo, the one with
the gh-pages branch, and you must have that _deploy/ subdirectory
checked out and ready to go before running &#39;rake deploy&#39;.</p>

<p>If you do not have a _deploy/ subdirectory at all and you let &#39;rake
deploy&#39; create it for you but you also let &#39;rake deploy&#39; attempt to
push to github, and you are also managing the source itself on github,
you will enter a world of pain where the rake invocation will push
<em>this</em> root directory, presumably in the master branch (or in my case,
blog.pnkfx.org branch) to the target repo in the gh-pages/ branch.
Which will bust things terribly, especially if that causes the CNAME
file to get deleted from the gh-pages/ branch of the target repo.</p>
</blockquote>

<h2 id="toc_1">A note on self-reference</h2>

<p>Also, a quick half shout-out, or maybe corrective note, to
<a href="http://www.seamusbradley.net/blog/blog/2012/04/24/how-to-link-to-your-own-blog-posts-in-octopress/">seamusbradley</a> for pointing out some details about linking back to
one&#39;s own blog posts.</p>

<p>It is only a half shout-out because Seamus&#39;s note is only useful, I
think, if you have, like him, a customized setting for the <code>root:</code> in
your <code>_config.yml</code>.  That, or Seamus has confused himself and changed
his <code>root</code> setting in order to accommodate other url&#39;s that he
observed, but those urls are in fact actually generated by settings
for properties other than <code>root</code>.</p>

<p>Here&#39;s the concrete details: I read (misread?) Seamus&#39;s post at first
as saying that a customized setting of <code>root</code> to <code>/blog</code> is a
prerequisite for linking to your own posts.  It seems to me that the
relevant detail is what the <em>permalink</em> setting is, not the root.
(But then again, I have not played with changing my root setting,
apart from finding that when I did try changing it to <code>/blog</code> as
Seamus suggested, it seems like doing so broke <code>rake preview</code>.)</p>

<p>In my case, the <code>root</code> and <code>permalink</code> for my <code>_config.yml</code>
are set as follows:</p>
<div class="highlight"><pre><code class="text">root: /
permalink: /blog/:year/:month/:day/:title/
</code></pre></div>
<p>and I format links to my own posts, such as the one you are reading,
like so:
<a href="/blog/2013/01/08/resurrected-hello-again-world"><code>/blog/2013/01/08/resurrected-hello-again-world</code></a>
as you can see from looking at the source for the line above,</p>
<div class="highlight"><pre><code class="text">[`/blog/2013/01/08/resurrected-hello-again-world`](/blog/2013/01/08/resurrected-hello-again-world)
</code></pre></div>
<p>A bit of quoted self-reference is a good place to stop for the night.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.pnkfx.org/blog/2012/12/31/hello-world/"/>
    <updated>2012-12-31T14:34:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2012/12/31/hello-world</id>
    <content type="html"><![CDATA[<!---
Apparently Markdown syntax does not have any shorthand for comments
-->

<!---
First 7 lines of this file were generated by command invocation:
  % rake new_post["Hello World"]
-->

<p>First post!
I am attempting to move my blog to GitHub Pages.</p>

<p>After seeing the results of others, I figure I will start with Octopress
and see how that goes.</p>

<p>Just so I can remind myself of the Octopress basics in the immediate future:</p>

<ul>
<li><p>Much of the page generation is controlled by configuration file <code>_config.yml</code></p></li>
<li><p>The content is all stored in <code>source/_posts/</code></p></li>
<li><p>This particular entry corresponds to the file <code>2012-12-31-hello-world.markdown</code></p></li>
<li><p>The first 7 lines of that file were originally generated via the
<code>rake</code> command invocation:</p>

<p>% rake new_post[&quot;Hello World&quot;]</p></li>
<li><p>The command <code>rake generate</code> will convert the source into static html pages.</p></li>
<li><p>After generating the file (and during subsequent editting), one can preview
the state locally in a local Ruby webserver via:</p>

<p>% rake preview</p>

<p>and then <a href="http://localhost:4000/">browsing localhost port 4000</a>.
The <code>rake preview</code> invocation will continuously monitor your post
source files so that you can keep working on your post and then
reload in your web browser without rerunning <code>rake</code> itself.</p></li>
<li><p>The command <code>rake deploy</code> is supposed to deploy the content into its intended
live location.  I have been having difficulty using this command,
in part because I think it is written assuming you have your ssh-key
already set up and integrated with github (or something similar) so that
there would be no password prompts.</p>

<ul>
<li>But of course I have not done this yet.</li>
<li>One important detail about <code>rake deploy</code> with github pages is that
the <code>_deploy/</code> subdirectory is itself a clone of the targetted
github repository, with the <code>gh-pages</code> branch checked out.
This can be confusing if your main source tree (the parent
directory of <code>_deploy/</code>) is itself the same repository as the
targetted github repository.</li>
</ul></li>
<li><p>Update: <code>rake deploy</code> just worked fine for me, password prompts and all.
I think my earlier difficulty was an artifact of some previous bad
state, one of either:</p>

<ul>
<li>I had put in a malformatted url for the target repository</li>
<li>My target repository already had a <code>gh-pages</code> branch (from earlier
testing) that needed to be pulled-and-merged (or discarded in some
fashion, which was what my merge amounted to).</li>
</ul></li>
<li><p>Update (26 march 2012): there are still some hiccups with <code>rake deploy</code>;
you need to be careful about what you store in the <code>source/</code> directory.
In particular, I was working on a draft post and threw various
source files that I was hacking on in the same directory, along with
some <code>.gitignore</code> files so that <code>git</code> would ignore build products
generated when I compiled the source (to binaries or jars or fasls...).</p>

<p>The headache came when I did <code>rake deploy</code>, and hit this error:</p>
<div class="highlight"><pre><code class="bash">% rake deploy
cp -r <span class="nb">source</span>/_posts/.gitignore public/_posts/.gitignore
rake aborted!
No such file or directory - public/_posts/.gitignore
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:230:in <span class="sb">`</span>block <span class="o">(</span>2 levels<span class="o">)</span> in &lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="s1">&#39;</span>
<span class="s1">/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:229:in `block in &lt;top (required)&gt;&#39;</span>
/Users/pnkfelix/Dev/Sites/pnkfx-blog/Rakefile:219:in <span class="sb">`</span>block in &lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>
Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; copydot
<span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
%
</code></pre></div>
<p>The problem here, as far as I can tell, is that octopress
is aggressively trying to copy over all dotfiles it can find
(<a href="https://github.com/imathis/octopress/issues/104">Octopress Issue 104</a>)
and that code was not written to create any subdirectories as
necessary.</p>

<p>My Ruby development knowledge is sufficiently under-developed that I
am not going to try to fix this myself.  Instead I have simply
moved all of the source code I was hacking <em>out</em> of the <code>source/</code>
directory and into a separate <code>hacks/</code> directory.
This seems to have addressed the problem; I have also filed
<a href="https://github.com/imathis/octopress/issues/1151">an issue</a>
for this with Octopress.</p></li>
</ul>
]]></content>
  </entry>
  
</feed>
