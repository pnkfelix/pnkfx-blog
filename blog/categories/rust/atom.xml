<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rust | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org/"/>
  <updated>2015-11-27T15:06:05+01:00</updated>
  <id>http://blog.pnkfx.org/</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GC and Rust Part 1: Specifying the Problem]]></title>
    <link href="http://blog.pnkfx.org/blog/2015/11/10/gc-and-rust-part-1-specing-the-problem/"/>
    <updated>2015-11-10T17:45:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2015/11/10/gc-and-rust-part-1-specing-the-problem</id>
    <content type="html"><![CDATA[<p>This is the first in a series of posts will discuss why garbage
collection is hard, especially for Rust, and brainstorm about
solutions to the problems we face.</p>

<p>The relationship between garbage collection (GC) and the Rust
programming language has been an interesting one.</p>

<p>GC was originally deeply integrated into the language, complete with
dedicated syntax (good old <code>@T</code> &hellip;). Over time the team found ways to
lessen the dependency on GC, and then finally remove it from the
language entirely.</p>

<p>However, we still want to provide support for garbage collection.</p>

<p>To explain why, I need to define the actual problems we seek to solve.
So let us explore the problem space.</p>

<!-- more -->


<h1>&hellip; <a href="http://regex.info/blog/2006-09-15/247">now you have</a> two problems</h1>

<p>(The body of this post makes heavy use of client-side rendering,
because of author idiosyncrasies.  You may need to wait a moment while
the supporting Javascript loads.)</p>

<script src="http://blog.pnkfx.org/javascripts/viz.js" charset="utf-8"></script>


<script src="http://blog.pnkfx.org/javascripts/js_to_dot.js" charset="utf-8"></script>


<script src="http://blog.pnkfx.org/javascripts/gc_rendering.js" charset="utf-8"></script>


<h2>The Problem Space</h2>

<p>Now that we have <a href="/blog/2015/10/27/gc-and-rust-part-0-how-does-gc-work/">reviewed</a> what GC is and how it works, let us
discuss what GC could mean to Rust.</p>

<p>I have identified two distinct kinds of support that we could provide:
&ldquo;GC&rdquo; could describe a feature for pure Rust programs, or &ldquo;GC&rdquo; could mean a
3rd-party runtime interoperation feature. Let us discuss each in turn.</p>

<h3>One GC shared by every crate</h3>

<p>We could add a smart-pointer to <code>libstd</code>, e.g. a <code>Gc&lt;T&gt;</code> type, that
arbitrary library crates could use as they create or receive instances
of <code>T</code>. The intention here would be similar to how <code>Rc&lt;T&gt;</code> is used:
One does not want to track ownership precisely, but rather treat
ownership as shared amongst all users of a value, and let the runtime
system handle reclaiming the value.</p>

<p>So for example, we might want to write code that looks like this:</p>

<pre><code class="rust">use std::gc::Gc;

struct Cons&lt;T&gt; {
    head: T,
    tail: Cell&lt;Option&lt;Gc&lt;Self&gt;&gt;&gt;,
}

impl&lt;T&gt; Cons&lt;T&gt; {
    fn new(head: T, tail: Option&lt;Gc&lt;Self&gt;&gt;) -&gt; Self {
        Cons { head: head, tail: Cell::new(tail) }
    }
    fn head(&amp;self) -&gt; &amp;T { &amp;self.head }
    fn tail(&amp;self) -&gt; Option&lt;Gc&lt;Self&gt;&gt; { self.tail.get() }
}

#[test]
fn demo() {
    let a;
    let f: Gc&lt;_&gt;;
    {
            a = box Cons::new(1, None);
        let b = box Cons::new(2, Some(a));
        let c = box Cons::new(3, Some(a));
        let d = box Cons::new(4, Some(b));
        let e: Gc&lt;_&gt;;
            e = box Cons::new(a, Some(b));
            f = box Cons::new(c, Some(d));

        let mut g = box Cons::new(10, None);
        let     h = box Cons::new(20, Some(g));
        g.tail.set(Some(h));
    }
    // here, locals `a` and `f` are the roots
}
</code></pre>

<p>(The above snippet assumes we have extended <code>box EXPR</code> to an
overloaded operator in the manner similar to that described in
<a href="https://github.com/rust-lang/rfcs/blob/master/text/0809-box-and-in-for-stdlib.md">RFC 809</a>, so that <code>let g: Gc&lt;_&gt; = box EXPR;</code> works, and that
the type inference figures out that all the locals need to be
in <code>Gc&lt;_&gt;</code>.)</p>

<p>This results in a stack and heap modelled by this picture.</p>

<p id="target_anchor_gc_demo_1"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };
var a = object_record("A", "<head> head: 1 | <tail> tail: None");
var b = object_record("B", "<head> head: 2 | <tail> tail: Some(A)");
var c = object_record("C", "<head> head: 3 | <tail> tail: Some(A)");
var d = object_record("D", "<head> head: 4 | <tail> tail: Some(B)");
var e = object_record("E", "<head> head: A | <tail> tail: Some(B)");
var f = object_record("F", "<head> head: C | <tail> tail: Some(D)");
var g = object_record("G", "<head> head: 10 | <tail> tail: Some(H)");
var h = object_record("H", "<head> head: 20 | <tail> tail: Some(G)");

var local_a = { id: "local_a", label: "a", shape: "record" };
var local_f = { id: "local_f", label: "f", shape: "record" };

stack[1] = local_a;
stack[2] = local_f;

b.tail = edge_from_port(":tail", a);
c.tail = edge_from_port(":tail", a);
d.tail = edge_from_to_ports(":tail", ":id", b);
e.head = edge_from_port(":head", a);
e.tail = edge_from_to_ports(":tail", ":id", b);
f.head = edge_from_to_ports(":head", ":id", c);
f.tail = edge_from_to_ports(":tail", ":id", d);
g.tail = edge_from_to_ports(":tail", ":id", h);
h.tail = edge_from_to_ports(":tail", ":id", g);

local_a.ref = a;
local_f.ref = edge_to_port(":id", f);

gc_heap[0] = a;
gc_heap[1] = b;
gc_heap[2] = c;
gc_heap[3] = d;
gc_heap[4] = e;
gc_heap[5] = f;
gc_heap[6] = g;
gc_heap[7] = h;

var objects = [stack, gc_heap];
post_objects("target_anchor_gc_demo_1", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>The GC would be allowed to collect the objects labelled &ldquo;E&rdquo;, &ldquo;G&rdquo;, and
&ldquo;H&rdquo; in the picture, since they are not reachable from the roots.
(However, the GC is not obligated to reclaim them at any particular
time. Usually GC&rsquo;s provide little guarantees about how soon objects
will be reclaimed.)</p>

<p>This kind of feature could be useful in any Rust library.</p>

<h4>Advantages of Gc<T> over Rc<T></h4>

<p>The main hypothesized advantages over <code>Gc&lt;T&gt;</code> over <code>Rc&lt;T&gt;</code> are:</p>

<ul>
<li><p><code>Gc&lt;T&gt;</code> is <code>Copy</code>, which makes it possible to construct types like
<code>Cell&lt;Gc&lt;T&gt;&gt;</code>.</p>

<p>(It also has nicer programmer ergonomics in some cases; e.g. some
programmers dislike having to write <code>x.clone()</code> every time they
want to make a copy of ref-counted <code>x</code>.)</p></li>
<li><p><code>Gc&lt;T&gt;</code> allows cyclic structure to be reclaimed (e.g. the objects
 &ldquo;G&rdquo; and &ldquo;H&rdquo; in the picture above.</p></li>
<li><p>Using <code>Gc&lt;T&gt;</code> <em>might</em> have less overhead than <code>Rc&lt;T&gt;</code>: every time
you clone an <code>Rc&lt;T&gt;</code> it incurs reference-count overhead, while
<code>Gc&lt;T&gt;</code> just copies the reference.</p>

<p>(However, this stated advantage must be tempered by the
realization that GC incurs its own separate overheads, as
discussed in the <a href="/blog/2015/10/27/gc-and-rust-part-0-how-does-gc-work/">background post</a>.</p></li>
</ul>


<h4>Drawbacks of one GC for everyone</h4>

<p>There are two immediate drawbacks with this kind of collector
support.</p>

<p>First, adding it would require that the standard library either
provide a garbage collector (that all clients of <code>Gc&lt;T&gt;</code> would have to
link in), or at least standardize a fixed API that third-party
collector implementations would have to satisfy to support <code>Gc&lt;T&gt;</code>.</p>

<p>Second, it is difficult to provide the ergonomics that one expects
from a smart-pointer<sup><a href="#footnote1">1</a></sup> type analogous to
<code>Rc&lt;T&gt;</code>.</p>

<p>Okay, so that&rsquo;s the outline of the tradeoffs of providing
a &ldquo;GC for everyone&rdquo; in <code>libstd</code>.  What about a more limited
GC feature, where the audience is not &ldquo;every Rust crate&rdquo;, but instead
just the crates linking to a managed runtime.</p>

<h3>GC as Interoperation Feature</h3>

<p>GC as an interoperation feature means that Rust would provide
introspective hooks to improve integration with application frameworks
that are using their own garbage collector. One example of this is
Servo&rsquo;s use of the SpiderMonkey Virtual Machine for its Javascript
support.</p>

<p>Servo is relying on SpiderMonkey&rsquo;s garbage collection for memory
management, not only for Javascript values, but even for
<a href="https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/">native-code DOM objects</a>.</p>

<p>That post describes (unchecked) scenarios where one can end up with
dangling pointers &ndash; that is, they invite unsoundness.  Proper support
for GC-interoperation in Rust could address this; I will discuss this
further down in this post.</p>

<p>Critically, GC-interoperation does not require the same level of
ergonomics that <code>Rc&lt;T&gt;</code> provides. For example, in this context it is
acceptable for <code>Gc&lt;T&gt;</code> to not support <a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"><code>Deref</code></a>.</p>

<p>(Furthermore, in this context, it may even be acceptable to require
unchecked constraints like &ldquo;the programmer must ensure the collector
is not invoked during this extent&rdquo;, or perhaps &ldquo;the programmer must
periodically invoke a call that tells the GC that this is an
acceptable time to do collection work that could move objects.&rdquo;)</p>

<p>Without a <code>Deref</code> trait and with such unchecked requriements, such
interoperation might end up looking something like this:</p>

<pre><code class="rust">fn double_last(x: Gc&lt;Vec&lt;i32&gt;&gt;) {
    unsafe {
        let ptr: *mut Vec&lt;i32&gt; = x.get_ptr();

        // during the extent of this block, it is the responsibility
        // of the double_last author to ensure the GC never gets
        // invoked (i.e., do not do any allocations to the GC'ed heap
        // during this unsafe-block).

        if Some(i) = (*ptr).last_mut() {
            *i = *i * 2;
        }
    }
}
</code></pre>

<p>In this context, interoperation still requires defining a standard
interface that the third-party collector implementation has to conform
with.</p>

<p>In a simple world (e.g., a conservative collector designed to
interoperate with C/C++, such as <a href="http://www.hboehm.info/gc/">boehm-demers-weiser</a> (BDW)), this
standard interface could be nothing more than just &ldquo;swap in a
different <a href="https://doc.rust-lang.org/nightly/book/custom-allocators.html">#[allocator] crate</a> that your GC provides.&rdquo;</p>

<p>(The actual interface is unlikely to be so
simple<sup><a href="#footnote2">2</a></sup>, but the point is, there is a wide
design space to be explored here.)</p>

<h4>Interoperation with a &ldquo;black box&rdquo; GC</h4>

<p>One way to look at the difference between &ldquo;GC for pure Rust programs&rdquo;
versus &ldquo;GC for interoperation&rdquo; is that in the former case, the GC
feels deeply integrated with the language and standard library, while
in the latter case, the GC is clearly the concern of some entity
outside the language (and we are just trying to accommodate it as best
we can).</p>

<p>An extreme instance of a GC that is definitely an entity outside the
language is a case where the whole GC heap is treated like a black
box, and the objects inside the heap are never directly exposed to the
application code outside the box.</p>

<p>For example, one can imagine a virtual machine (VM) interface where
the code outside the VM is never given addresses of objects on the
heap. Instead, such foreign code only has <em>handles</em> that indirectly
point to those objects.</p>

<p id="target_anchor_black_box_gc_1"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var rust_heap = { rankdir:"LR", id: "cluster_rust_heap", label: "Rust Heap", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };
var handles = object_record("handles", "<h2> Y | <h1> X | <h3> X");

var c = object_record("C", "<f0> Gc(X) | <f1> Box(O)");
c.style = "rounded";
var o = object_record("O", "<f0> Handle(2)");
var x = object_record("X", "<f0> 'a' | <f1> next");
var y = object_record("Y", "<f0> 'b' | <f1> next");
var z = object_record("Z", "<f0> 'c' | <f1> (next)");
x.style = "rounded";
y.style = "rounded";
z.style = "rounded";
var local_x = { id: "local_x", label: "handle_x", shape: "record" };
var local_y = { id: "local_y", label: "handle_y", shape: "record" };
var local_o = { id: "local_o", label: "boxed_o", shape: "record" };

x.next = edge_from_to_ports(":f1", ":id:sw", y);
y.next = edge_from_to_ports(":f1", ":id", z);

o.f0 = edge_from_to_ports(":f0", ":h3", handles);

c.f0 = edge_from_to_ports(":f0", ":id", x);
c.f1 = edge_from_to_ports(":f1", ":id", o);

stack[1] = local_x;
stack[2] = local_y;
stack[3] = local_o;

rust_heap[0] = o;
gc_heap[0] = handles;
handles.x1 = edge_from_to_ports(":h1", ":id", x);
handles.y2 = edge_from_to_ports(":h2", ":id", y);
handles.x3 = edge_from_to_ports(":h3", ":id:sw", x);
local_x.handle = edge_to_port(":h1", handles);
local_y.handle = edge_to_port(":h2", handles);
local_o.box = edge_to_port(":id", o);
gc_heap[2] = x;
gc_heap[3] = y;
gc_heap[4] = z;

var objects = [stack, gc_heap, rust_heap];
post_objects("target_anchor_black_box_gc_1", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>In this setting, direct references to objects <em>never</em> escape the black
box. Instead, by setting up a level of indirection, the management of
the objects within the GC heap is completely abstracted away.</p>

<p>In a black box GC setting, one would not expose the data structure of
the objects (since they can never be directly addressed
anyway). Instead, one would define functions on handles that extract
the fields and maps them to handles when necessary:</p>

<pre><code class="rust">extern fn handle_data(a: Handle) -&gt; char;
extern fn handle_next(a: Handle) -&gt; Option&lt;Handle&gt;;
extern fn handle_set_next(a: Handle, b: Option&lt;Handle&gt;);

// sample code interacting with the black box GC

// all of these predicates hold of the above heap diagram
assert_eq!(handle_data(handle_x), 'a');
assert_eq!(handle_data(handle_next(handle_y).unwrap()), 'c');
assert!(handle_next(handle_next(handle_y).unwrap()).is_none());

// this changes the heap to match the diagram below.
handle_set_next(handle_x, handle_next(handle_y));
</code></pre>

<p id="target_anchor_black_box_gc_2"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var rust_heap = { rankdir:"LR", id: "cluster_rust_heap", label: "Rust Heap", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };
// var handles = object_record("handles", "<h2> Y | <h1> X | <h3> X | <h4> (temp for Z)");
var handles = object_record("handles", "<h2> Y | <h1> X | <h3> X");

var c = object_record("C", "<f0> Gc(X) | <f1> Box(O)");
c.style = "rounded";
var o = object_record("O", "<f0> Handle(2)");
var x = object_record("X", "<f0> 'a' | <f1> next");
var y = object_record("Y", "<f0> 'b' | <f1> next");
var z = object_record("Z", "<f0> 'c' | <f1> (next)");
x.style = "rounded";
y.style = "rounded";
z.style = "rounded";
var local_x = { id: "local_x", label: "handle_x", shape: "record" };
var local_y = { id: "local_y", label: "handle_y", shape: "record" };
var local_o = { id: "local_o", label: "boxed_o", shape: "record" };

x.next = edge_from_to_ports(":f1", ":id:w", z);
y.next = edge_from_to_ports(":f1", ":id:n", z);

o.f0 = edge_from_to_ports(":f0", ":h3", handles);

c.f0 = edge_from_to_ports(":f0", ":id", x);
c.f1 = edge_from_to_ports(":f1", ":id", o);

stack[1] = local_x;
stack[2] = local_y;
stack[3] = local_o;

rust_heap[0] = o;
gc_heap[0] = handles;
handles.x1 = edge_from_to_ports(":h1", ":id", x);
handles.y2 = edge_from_to_ports(":h2", ":id", y);
handles.x3 = edge_from_to_ports(":h3", ":id:sw", x);
// handles.z4 = edge_from_to_ports(":h4", ":id:sw", z);
local_x.handle = edge_to_port(":h1", handles);
local_y.handle = edge_to_port(":h2", handles);
local_o.box = edge_to_port(":id", o);
gc_heap[2] = x;
gc_heap[3] = y;
gc_heap[4] = z;

var objects = [stack, gc_heap, rust_heap];
post_objects("target_anchor_black_box_gc_2", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>In case it isn&rsquo;t clear, supporting interoperation with this kind of
&ldquo;black box&rdquo; GC requires very little from the Rust side; potentially
nothing at all. The object addresses are hidden, so the GC could move
an object and update its address in the handle
array.<sup><a href="#footnote3">3</a></sup></p>

<p>However, this so-called interoperation is also quite limited in
expressiveness. The defining property of the &ldquo;black box&rdquo; GC, the fact
that it does not expose the addresses of the objects held within, also
means that we cannot expose <code>&amp;</code>-references to the objects or the state
within them, which means we cannot use these objects with the large
number of Rust functions that operate on <code>&amp;</code>-references and slices.</p>

<p>Also, the hidden object addresses may complicate client code trying to
instantiate GC objects with its own types.<sup><a href="#footnote4">4</a></sup></p>

<p>In any case, interoperation with a blackbox GC is not a primary goal,
since the level of indirection and handles array maintainence is not
ideal.</p>

<h2>Objectives and Requirements (oh no, now five problems)</h2>

<p>The two (or perhaps three) kinds of support described above are
distinct features; there is overlap between them, but trying to find a
single solution that solves both problems completely may not be
possible, and in any case we do not want to wait for that single
solution to be discovered.</p>

<p>Since <code>Rc&lt;T&gt;</code> is already a workable solution for many (though not all)
use cases of <code>Gc&lt;T&gt;</code>, the above idealized &ldquo;one GC shared by every
crate&rdquo; is not a main priority right now (and may never be added to the
Rust language).</p>

<p>Let us focus on GC as an interop feature, and dive into what we would
want to get out of it.</p>

<p>There are a number of objectives for Rust/GC integration that are
worth noting, which I will list here and then define and discuss
below.</p>

<ol>
<li><a href="#safety">Safe</a></li>
<li><a href="#modularity">Modular</a></li>
<li><a href="#zero-cost">Zero-Cost</a></li>
<li><a href="#compositionality">Compositional</a></li>
<li><a href="#precision">Precise (Space-Efficient)</a></li>
</ol>


<h3><span id="safety">Safety with respect to GC</span></h3>

<p>If a Rust crate does not use <code>unsafe</code> constructs (<code>unsafe</code> blocks,
attributes or types with &ldquo;unsafe&rdquo; in their name, etc.), then linking
it with a sound set of crates that use GC must maintain soundness.</p>

<p>In other words, linking in a crate that uses no <code>unsafe</code> construct
should not inject any dereferences of dangling pointers, nor any data
races.</p>

<p>By the way, we absolutely do need to provide criteria that says what
<code>unsafe</code> code <em>is</em> allowed to do when linked with a crate that uses
GC. I am going to assume for these initial posts that we will solve
that problem eventually, but not attempt to address it at the outset.</p>

<h3><span id="modularity">Modularity with respect to GC</span></h3>

<p>A Rust program that uses GC should be able to link to a crate whose
source code was authored without knowledge of GC.</p>

<p>For example, if I make a parsing library today that works on string
slices <code>&amp;str</code>, you should be able to link that parsing library into a
program that uses GC, without having to worry about whether the
parsing library carries hidden requirements that invalidate
assumptions made by the GC.</p>

<p>Note: A crate being &ldquo;authored without knowledge of GC&rdquo; is a
property of the source code, not the generated object code. Given
such a crate, the Rust compiler may itself inject metadata
related to GC, such as descriptions of object layout, or
automatically-generated code that dictate how objects should
traced by the collector.</p>

<p>Note: A crate being &ldquo;authored without knowledge of GC&rdquo; is entirely
distinct a crate not supporting GC. That is, we may add well a way for
a crate to declare that it is not compatible with GC. (This would
count as having knowledge of GC; in fact, enough knowledge to know, or
at least guess, that its presence would cause the GC to break, or vice
versa.)</p>

<p>If we cannot satisfy this requirement, then the addition of GC
will, at best, split the growing space of library crates (such as
those available on <a href="https://crates.io/">crates.io</a>) into two disjoint
sub-communities: crates that support GC, and those that do not
(since the latter were written without accounting for the
potential presence of a GC).</p>

<p>An aside: I would really like to find a way to combine the
descriptions of &ldquo;modularity&rdquo; and &ldquo;safety&rdquo;, since they seem to be
attempted to express similar or related objectives.</p>

<p>A final note: There are some features available to crates, such as
requiring a specific low-level allocator, that are likely to be
incompatible with a program that uses GC. We need to define these
caveats and incorporate them into the above definition of
&ldquo;modularity&rdquo;, without weakening it to the point of uselessness.
(However, I will not attempt to tackle that here.)</p>

<h3><span id="zero-cost">Zero-Cost GC</span></h3>

<p>If you don&rsquo;t use the GC feature (in whatever form it takes), your code
should not pay for it.</p>

<p>This applies to the quality of the generated code (in execution
time and code size), and also to the source code, with respect to
difficulty in writing a program or library.</p>

<p>There are two forms of the zero-cost property relevant here:</p>

<ol>
<li><p>Strongly zero-cost: A unit of code generation that does not use
 GC should not pay for it.</p>

<p> For example, in the above example of the string parsing module,
 ideally the code generated for parsing <code>&amp;str</code> values should have
 the same performance characteristics, regardless of whether it is
 linked into a program that uses GC or not.</p></li>
<li><p>Weakly zero-cost: A program that does not use GC should not pay
 for it.</p>

<p> (At worst, one can imagine ensuring this property by compiling
 two different versions of each code unit, and then linking to the
 appropriate one. Hopefully we will not need to resort to that.)</p></li>
</ol>


<p>Strongly zero-cost implies weakly zero-cost, but not vice-versa.</p>

<h3><span id="compositionality">Compositional GC</span></h3>

<p>One can use a reference to a gc-allocated object (call it a <code>GcRef</code>)
as the field type in a <code>struct</code>, store it into a <code>Vec&lt;GcRef&gt;</code>, and
in general do anything with it that one can do with a normal Rust value.</p>

<p>Furthermore, one should be able to describe, via a Rust type
definition, the layout of a value allocated on the GC heap, allocate
such values there, and acquire a suitable <code>GcRef</code> to the allocated
object.</p>

<p>To be concrete about this, consider the following program,
which uses a hypothetical <code>make_gc_ref</code> function to move
values into a newly-allocated spot on the GC heap, and returns
a reference to that spot. (In the future one will probably use
the <code>box</code> syntax for this, and rely on type-context to inform
box that this is a GC-allocation.)</p>

<pre><code class="rust">fn demo() {
    let gc_v = {
        let ref_x1 = make_gc_ref("data_one");
        let ref_x2 = make_gc_ref("data_two");
        let v = vec![x1, x1, x2];
        make_gc_ref(v)
    };
    ...
}
</code></pre>

<p>This results in the following diagram:</p>

<p id="target_anchor_demo_composition_1"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var rust_heap = { rankdir:"LR", id: "cluster_rust_heap", label: "Rust Heap", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };

var x1 = object_record("X1", "<f0> 'data_one'");
var x2 = object_record("X2", "<f0> 'data_two'");

x1.style = "rounded";
x2.style = "rounded";

var gc_v = { id: "gc_v", label: "Gc(V)", shape: "record" };

var v = object_record("V", "<f0> len: 3 | cap: 4 | <f2> ptr: Arr");
v.style = "rounded";
var arr = object_record("Arr", "<f0> Gc(X1) | <f1> Gc(X1) | <f2> Gc(X2)");
arr.color = "blue";

v.f2 = edge_from_to_ports(":f2", ":id", arr);
gc_v.f0 = edge_to_port(":id", v);

arr.f0 = edge_from_to_ports(":f0", ":id", x1);
arr.f1 = edge_from_to_ports(":f1", ":id", x1);
arr.f2 = edge_from_to_ports(":f2", ":id", x2);

stack[0] = gc_v;
rust_heap[0] = arr;
gc_heap[0] = v;
gc_heap[1] = x1;
gc_heap[2] = x2;

var objects = [stack, gc_heap, rust_heap];
post_objects("target_anchor_demo_composition_1", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>Here, I have made explicit the heap-allocated backing store <code>Arr</code> (in
blue) for the vector that holds the references to <code>x1</code> and <code>x2</code>.</p>

<p>This shows that if we want GC to reasonably usable (i.e., allow GC
references to be used like other Rust values), we need to support
references out of the GC heap and into the Rust heap, and likewise
references out of the Rust heap and into the GC heap.</p>

<p>It can sometimes be simpler (without necessarily eliminating the
fundamental problem) to just a <code>Box</code> rather than a <code>Vec</code>:</p>

<p id="target_anchor_demo_composition_2"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var rust_heap = { rankdir:"LR", id: "cluster_rust_heap", label: "Rust Heap", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };
var c = object_record("C", "<f0> Gc(X) | <f1> Box(O)");
c.style = "rounded";
var o = object_record("O", "<f0> Gc(X)");
var x = object_record("X", "<f0> 'data'");
x.style = "rounded";
var gc_a = { id: "gc_c", label: "Gc(C)", shape: "record" };

gc_a.f0 = edge_to_port(":id", c);

o.f0 = edge_from_to_ports(":f0", ":id", x);

c.f0 = edge_from_to_ports(":f0", ":id", x);
c.f1 = edge_from_to_ports(":f1", ":id", o);

stack[0] = gc_a;
rust_heap[0] = o;
gc_heap[0] = c;
gc_heap[1] = x;

var objects = [stack, gc_heap, rust_heap];
post_objects("target_anchor_demo_composition_2", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>The program to construct the above picture might look like
this:</p>

<pre><code class="rust">fn demo() {
    struct C(Gc&lt;str&gt;, Box&lt;Gc&lt;str&gt;&gt;);
    let gc_c = {
        let ref_x = make_gc_ref("data");
        let box_o = Box::new(ref_x);
        make_gc_ref(C(ref_x, box_o))
    };
    ...
}
</code></pre>

<p>(The types in the demo program above assume certain features like
allowing <code>Gc&lt;T&gt;</code> for <code>T: ?Sized</code>, which may or may not be reasonable.)</p>

<p>The compositionality constraint may seem obvious (especially if one
starts by assuming that references to gc-allocated objects will be
values of type <code>Gc&lt;T&gt;</code> for arbtrary <code>T</code>).</p>

<p>But using &ldquo;black box&rdquo; GC interop (as described above) would likely
<em>defeat</em> compositionality.  That is why I point out this objective
explicitly.</p>

<h3><a id="precision">Precision (Space-Efficiency)</a></h3>

<p>A 100% precise GC is one that knows the type of every object and field
that it encounters, in terms of being able to classify a word of
memory as an integer or a pointer, and also classify whether a given
word of memory is actually usable according to the type of the value
the word is embedded within.</p>

<p>A space-efficient GC, in essence, is one that is eventually able to
reclaim all garbage, without being subverted by particular details of
the host program or the system state.</p>

<p>(Calling a language implementation space-efficient is a reference to
the <a href="http://www.cesura17.net/~will/professional/research/papers/tail.pdf">asymptotic space complexity</a> of a language implementation.  I am
employing the term here because the objective I want to capture is
more general than just precision.)</p>

<p>A <a href="/blog/2015/10/27/gc-and-rust-part-0-how-does-gc-work/#conservative-gc">conservative GC</a> lacks precision. In other words,
a precise GC is more space-efficient than a conservative GC: There
exists a program that will exhibit worse (asymptotic) space
performance atop a conservative GC than it would atop a precise GC.</p>

<p>We would like Rust to be able to interoperate with 100% precise
collectors.</p>

<p>Ideally, we would also like to be able to interoperate with collectors
that do not support <a href="/blog/2015/10/27/gc-and-rust-part-0-how-does-gc-work/#pinning-support">pinning</a>.</p>

<p>Finally, we would like to ensure that the heap patterns associated
with <a href="#compositionality">Compositionality</a> do not cause garbage to go unreclaimed.</p>

<ul>
<li>Note that a precise GC that treats <em>all</em> objects on the &ldquo;Rust Heap&rdquo;
as roots is not very space-efficient: it will fail to collect
cyclic garbage structure like the below.</li>
</ul>


<p id="target_anchor_demo_garbage_cycle_thru_rust_heap"></p>


<script>
var stack = { id: "cluster_stack", label: "Stack", is_subgraph: true };
var rust_heap = { rankdir:"LR", id: "cluster_rust_heap", label: "Rust Heap", is_subgraph: true };
var gc_heap = { id: "cluster_gc_heap", label: "GC Heap", is_subgraph: true, style: "rounded" };

var local_a = { id: "local_a", label: "a", shape: "record" };

var a = object_record("A", "<f0> Some(Gc(B)) | <f1> None");
a.style = "rounded";
var b = object_record("B", "<f0> None | <f1> None");
b.style = "rounded";
var c = object_record("C", "<f0> Some(Gc(B)) | <f1> Some(Box(O))");
c.style = "rounded";
var o = object_record("O", "<f0> Gc(C)");

a.f0 = edge_from_to_ports(":f0", ":id:n", b);

c.f0 = edge_from_to_ports(":f0", ":id", b);
c.f1 = edge_from_to_ports(":f1:s", ":id", o);
o.f0 = edge_from_to_ports(":f0", ":id", c);

stack[1] = local_a;
local_a.ref = edge_to_port(":id", a);

gc_heap[0] = a;
gc_heap[1] = b;
gc_heap[2] = c;
rust_heap[0] = o;

var objects = [stack, gc_heap, rust_heap];
post_objects("target_anchor_demo_garbage_cycle_thru_rust_heap", objects, { rankdir:"LR", nodesep:0.2 });
</script>


<p>In the above diagram, &ldquo;C&rdquo; and &ldquo;O&rdquo; are unreachable by the program
itself (&ldquo;O&rdquo; is owned by the gc-allocated &ldquo;C&rdquo;), but if you treat all
objects in the Rust Heap as roots, then it will classify &ldquo;O&rdquo; as a
root, and &ldquo;C&rdquo; will never be reclaimed.</p>

<p>This is why compositionality can interact with space-efficiency.
Allowing gc-allocated objects to own data allocated on the Rust heap,
while also allowing references to gc-allocated objects to be stored in
values on the Rust heap, then you will encounter cyclic structure like
this. (This was the design bug that led me to withdraw my &ldquo;Take II&rdquo;
<a href="https://github.com/rust-lang/rfcs/pull/244">allocator RFC</a>.)</p>

<h2>Conclusion</h2>

<p>This post was dedicated to identifying criteria that we would
like GC-integration with Rust to satisfy.</p>

<p>Next up: Why is it hard to satisfy the above criteria simultaneously?</p>

<h2>Footnotes</h2>

<p><a name="footnote1">1.</a> In particular, smart-pointers in Rust
require at <em>least</em> support for the <a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"><code>Deref</code> trait</a>, so
that dereferencing expressions like <code>gc_ref.field</code> and
<code>gc_ref.method()</code> are compiled into code that resolves the <code>gc_ref</code> to
a<code>&amp;T</code> reference (and then the subsequent field or method lookup is
performed with respect to that <code>&amp;T</code> reference).</p>

<p>As a reminder, the signature of the <code>deref</code> method, before lifetime
elision, is <code>fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Target</code> (and the
associated <code>Target</code> type for <code>Gc&lt;T&gt;</code> would be <code>T</code>).  Thus, the
compiler will ensure that the reference <code>&amp;'a T</code> we extract from the
<code>gc_ref</code> outlive the <code>gc_ref</code> itself; this means that the <code>gc_ref</code>
will be one (of potentially many) root keeping the object from being
reclaimed for the entirety of the lifetime <code>'a</code>, and thus supporting
the <code>Deref</code> trait design on a <code>Gc&lt;T&gt;</code> could work seamlessly on an
entirely non-moving GC.</p>

<p>However, moving objects complicate <code>Deref</code> support; now one needs to
ensure not only that the object remains alive, but also that the
reference <code>&amp;'a T</code> consistently points to the same object that the
original <code>Gc&lt;T&gt;</code> pointed to, and that references to substructure
within the object (e.g. a <code>&amp;Left</code> within a <code>Gc&lt;(Left, Right)&gt;</code> that
has been deref'ed to <code>&amp;(Left, Right)</code>) also retain a consistent view
of the heap structure. Doing this at an acceptable cost is difficult;
I may discuss this more in a future post.</p>

<p><a name="footnote2">2.</a> In truth, even for a conservative collector
like <a href="http://www.hboehm.info/gc/">BDW</a>, one must do more than just &ldquo;swap in a new
<code>#[allocator]</code>&rdquo; to actually integrate it properly; the current Rust
standard library does not provide a way to intercept thread spawns and
register the new stack associated with each new thread. I only
realized this only
<a href="https://github.com/swgillespie/boehm_gc_allocator/issues/2">recently</a>.</p>

<p><a name="footnote3">3.</a> If the GC Heap is exposed to multiple
threads, then there are complications even with the seemingly simple
task of updating the handles array, since one must ensure that if two
threads have consistent views of the heap object graph.</p>

<p><a name="footnote4">4.</a> It is not clear whether client code hooking
into the &ldquo;black box&rdquo; GC would be able to instantiate the GC objects
with its own types.</p>

<p>For example, one might think that the objects in the GC heap could be
defined via type parameterization: <code>fn bbox_gc_alloc&lt;T&gt;(t: T) -&gt; Handle;</code>
would create an object on the heap, copy <code>t</code> into it, and return a
handle to that object.</p>

<p>For this to work, the layout of the list cells in the GC heap above
would need to look something like this:</p>

<pre><code class="rust">struct Cons&lt;T&gt; {
    data: T,
    next: Option&lt;GcPtr&lt;Cons&lt;T&gt;&gt;&gt;,
}
</code></pre>

<p>Then constructing a list like the &ldquo;X, Y, Z&rdquo; in the heap diagrams
above would look like:</p>

<pre><code class="rust">let handle_z = bbox_gc_alloc(Cons { data: 'c', next: None });
let handle_y = bbox_gc_alloc(Cons { data: 'b', next: None });
let handle_x = bbox_gc_alloc(Cons { data: 'a', next: None });
handle_set_next(handle_y, handle_z);
handle_set_next(handle_x, handle_y);
</code></pre>

<p>But there are two (related) problems:</p>

<ol>
<li><p>How does one instantiate values that <em>unconditionally</em> hold
 pointers to GC objects.  (For example, how do we allocate an
 instance of <code>Cons&lt;GcPtr&lt;Cons&lt;char&gt;&gt;&gt;</code>?)</p>

<p> We have already established that the address in the GC Heap are
 not exposed outside of the heap, so the approach of passing in an
 <code>T</code> value that we used with <code>bbox_gc_alloc</code> above will not work,
 because we cannot put our hands on a <code>GcPtr</code> to use for the
 <code>data</code> field.</p></li>
<li><p>How do we get from the <code>struct</code> definition for <code>Cons</code> to
 the family of methods defined in terms of <code>Handle</code>?</p>

<p> Every occurrence of <code>GcPtr</code> used for the struct (as seen from
 the point of view of the GC Heap) needs to be mapped to
 a <code>Handle</code> in the functions exposed to the functions outside
 of GC Heap.</p></li>
</ol>


<p>It could be that there is a solution to the problem lurking here; but
as stated in the text, interoperation with a fully &ldquo;black box&rdquo; GC is
not a primary goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An insight regarding DST grammar for Rust]]></title>
    <link href="http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust/"/>
    <updated>2014-03-13T07:04:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2014/03/13/an-insight-regarding-dst-grammar-for-rust</id>
    <content type="html"><![CDATA[<p>Executive summary: <code>type</code> = <code>unsized</code> ⊎ <code>sized</code>, so we should use
<code>type</code> as our generalization marker, not <code>unsized</code>.</p>

<!-- more -->


<ul>
<li><a href="#background_dst">Background: Dynamically Sized Types (DST)</a></li>
<li><a href="#the_insight">The Insight: <code>type</code> is a better generalization marker</a></li>
<li><a href="#the_examples">Examples ported from DST, Take 5</a></li>
</ul>


<h2><a id="background_dst">Background: Dynamically Sized Types (DST)</a></h2>

<p>The Rust team has been discussing incorporating &ldquo;dynamically-sized
types&rdquo; into the static semantics for Rust.  Essentially the idea is to
allow code to describe and name static types whose size is only known
at Runtime.  E.g. the integer vector <code>[int, ..5]</code> is known at compile
time to have five elements, and is considered (statically) sized,
while the vector <code>[int]</code> has unknown size at compile time, and so that
type is called unsized.</p>

<p><a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">There</a>
is <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">a</a>
series <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/26/thoughts-on-dst-1/">of</a>
blog <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-2">posts</a>
about <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/27/thoughts-on-dst-3/">dynamically</a>
sized <a href="http://smallcultfollowing.com/babysteps/blog/2013/12/02/thoughts-on-dst-4/">types</a>
on <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">niko&rsquo;s</a>
blog.
So I will not dive into the details too much here</p>

<p>The main points are that the compiler wants to know whether a type is
meant to always have a static size, or if it can potentially be
unsized.  In a language without type polymorphism, this might be easy
to determine directly from the parsed type expression (such as in the
vector examples I gave at the outset).  But once you add polymorphism,
things get a litle harder for the compiler.</p>

<p>Anyway, the plan drafted in Niko&rsquo;s
<a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">&ldquo;DST, Take 5&rdquo;</a>
is to add an <code>unsized</code> keyword, and then use it as a marker to make
certain spots more general than they are by default.  The reasoning
here is that in the common case, you want a type parameter to
represent a sized type.  (Since there are certain operations you
cannot do with a value of an unsized type, such copying the value into
some other location, the compiler needs to know its size statically so
that it can allocate an appopriate amount of space for it.)</p>

<p>So under that scheme, to write type parameter of most general type,
e.g. for a <code>struct</code> definition that ends with an unsized field,
you need to write:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Named</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span><span class="o">:</span> <span class="o">~</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>    <span class="n">payload</span><span class="o">:</span> <span class="n">T</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Accepts solely &lt;em&gt;sized&lt;/em&gt; Named&lt;T&gt;.</span>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Accepts both sized and &lt;em&gt;unsized&lt;/em&gt; Named&lt;T&gt;</span>
</span><span class='line'><span class="k">fn</span> <span class="n">bar</span><span class="o">&lt;</span><span class="kr">unsized</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">Named</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That is, you need to use what I will call a &ldquo;generalization&rdquo; marker at
the spot where you bind a type variable, to indicate that the domain of
that type variable is more general than the common-case default of
a sized type.</p>

<p>For defining a trait that can be implemented on any possible type,
including unsized ones, you would need to use the <code>unsized</code> keyword
somewhere there as well.  &ldquo;DST, Take 5&rdquo; proposed
<code>trait Foo&lt;unsized Self&gt; : NormalBounds { ... }</code>
(or <code>trait Foo : unsized + NormalBounds { ... }</code>, but this is broken for
various reasons).
I had been suggesting <code>unsized trait Foo : NormalBounds { ... }</code>,
which Niko rightly objected to (since it is not the trait that is
unsized, but rather potentially its Self type).
Over the Rust work week last week I suggested
<code>trait Foo for unsized : NormalBounds</code> { &hellip; }, which I think is the first
suggestion that Niko and myself could both stomach.  (The reasoning
behind the latter suggestion is that we write <code>impl Trait for
SelfType</code>, so it makes sense to put the generalization marker into the
same position, i.e. filling the placeholder in: <code>Trait for _</code>.)</p>

<h2><a id="the_insight">The Insight: <code>type</code> is a better generalization marker</a></h2>

<p>One of the concerns that Niko has pointed out to me is that it is easy
to (mis)read <code>unsized T</code> as saying &ldquo;<code>T</code> must be unsized&rdquo;.  But that is not
what it is saying; it is saying &ldquo;<code>T</code> <em>can</em> be unsized&rdquo;; you can still pass in
a sized type for <code>T</code>.</p>

<p>I was reflecting on that this morning, and I realized something:
The whole point of DST is to partition the type universe into (Sized ⊎ Unsized).
So if you want this construct to be more self-documenting, the
generalization marker should be using some name to describe that union
(Sized ⊎ Unsized), rather than the name <code>unsized</code>.</p>

<p>But we already have a very appropriate name for that union: <code>type</code>!</p>

<p>So that started me thinking: Why don&rsquo;t we use <code>type</code> as our generalization marker?
So the definition of <code>bar</code> in the example above would be written
<code>rust
fn bar&lt;type T&gt;(&amp;Named&lt;T&gt;) { ... }
</code>
In fact, this can have a very simple explanation: If we keep the <code>Sized</code> trait bound,
then you can just say that
<code>rust
fn foo&lt;T&gt;(args, ...){ ... }
</code>
desugars to
<code>rust
fn foo&lt;type T:Sized&gt;(args, ...) { ... }
</code>
and in general, any type variable formal binding <code>&lt;T:Bounds&gt;</code> desugars
to <code>&lt;type T:Sized+Bounds&gt;</code></p>

<p>I admit, when I first wrote this, I said &ldquo;hmm, this looks a bit like
C++, is that a problem?&rdquo;  But I&rsquo;m coming to like it.  The biggest
problem I can foresee is that a developer might be confused about when
they are suppposed to write <code>foo&lt;type T&gt;</code> versus <code>foo&lt;T&gt;</code>.  But chances
are that someone who does not understand the distinction will <em>not</em>
suffer if they just guess the answer; if they over-generalize, either:</p>

<ul>
<li><p>the code will compile successfully anyway, in which case there is
no harm, except perhaps w.r.t. forward-compatibility of their
library when they may have wished they had imposed the <code>Sized</code>
bound, or</p></li>
<li><p>the compiler will flag a problem in their code, in which case
hopefully our error messages will suggest to add a <code>:Sized</code> bound
or to just not use <code>type</code> in the binding for <code>T</code>.</p></li>
</ul>


<p>If they under-generalize, then they (or their library&rsquo;s clients) will
discover the problem when they apply <code>foo</code>.</p>

<p>For the trait case, it is a little less obvious what to do.
I think we could likewise write:
<code>trait Foo for type : NormalBounds</code>
for the maximally general case.
<code>trait Foo : NormalBounds</code> would then desugar to
<code>trait Foo for type : Sized + NormalBounds</code></p>

<p>So the point is that you would only use the <code>type</code> keyword when you
wanted to explicitly say &ldquo;I am generalizing over <em>all</em> types, not just
sized ones&rdquo;, and thus are opting into the additional constraints that
that scenario presents.</p>

<p>This approach wouldn&rsquo;t be so palatable under earlier envisioned
designs for DST where e.g. you were restricted to write explicitly
<code>unsized struct S { ... }</code> for structs that could end up being
unsized.  But at this point I think we have collectively decided that
such a restriction is unnecessary and undesired, so there is no worry
that someone might end up having to write <code>type struct S { ... }</code>,
which definitely looks nonsensical.</p>

<p>There is another potential advantage to this approach that I have not
explored much yet: we could also add an <code>Unsized</code> trait bound, and
allow people to write <code>&lt;type X:Unsized&gt;</code> for when they want to
restrict <code>X</code> to unsized types alone.  I am not sure whether this is
actual value in this, but it does not seem absurd to put in a special
case in the coherence checker to allow one to write
<code>impl&lt;X:Sized&gt; SomeTrait for X { ... }</code>
and
<code>impl&lt;X:Unsized&gt; SomeTrait for X { ... }</code>
in order to get full coverage of <code>SomeTrait</code> for all types.</p>

<p>Finally, another obvious (though obviously post Rust 1.0) direction
that this approach suggests is that if we decide to add
parameterization over constants, we can likewise use the <code>const</code>
keyword in the spot where I have written the generalization marker
<code>type</code>, e.g.
<code>rust
fn foo&lt;const N:int&gt;(nums: &amp;[f64, ..N]) { ... }
</code>
(In this case <code>const</code> would not be a generalization marker but instead
a <em>kind</em> marker, since it is changing the domain of the parameter from
being that of a type to being some value within a type.)</p>

<h2><a id="the_examples">Examples ported from DST, Take 5</a></h2>

<p>Here are the ported definitions of <code>Rc</code> and <code>RcData</code>.
(Update: had to turn off syntax highlighting to work-around a rendering bug on <code>*</code>.)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>struct Rc&lt;type T&gt; {
</span><span class='line'>    ptr: *RcData&lt;T&gt;,
</span><span class='line'>    // (a dummy field, just for illustrative purposes)
</span><span class='line'>    dummy: uint,
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;struct RcData&lt;type T&gt; {
</span><span class='line'>    ref_count: uint,&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#[max_alignment]
</span><span class='line'>data: T
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;impl&lt;type T&gt; Drop for Rc&lt;T&gt; {
</span><span class='line'>    fn drop&amp;lt;&amp;lsquo;a&gt;(&amp;amp;&#39;a mut self) {
</span><span class='line'>        unsafe {
</span><span class='line'>            intrinsics::drop(&amp;amp;mut (*self.ptr).data);
</span><span class='line'>            libc::free(self.ptr);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></p>

<p>Here is the <code>ImmDeref</code> example:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">impl</span><span class="o">&lt;</span><span class="k">type</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">ImmDeref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Rc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;a</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">ptr</span><span class="p">).</span><span class="n">data</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>(I think I need a wider variety of examples, but this is good enough for now.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detective Work on Rust Closures]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/"/>
    <updated>2013-06-07T10:17:00+02:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#background_fns">Background: Closures (recurring and otherwise)</a></li>
<li><a href="#background_dst">Background: DST</a></li>
<li><a href="#the_problem">The Problem: DST and Closures</a>

<ul>
<li><a href="#is_fn_too_ugly">Is fn~ too ugly?</a></li>
<li><a href="#leveraging_proc">Leveraging a proc keyword/expression</a></li>
<li><a href="#other_ways_to_proc">Other ways to express proc</a>

<ul>
<li><a href="#digression_on_macros">A Personal Digression on Macros</a></li>
</ul>
</li>
<li><a href="#more_followup_on_procs_and_fns">More followups on procs and fns</a></li>
</ul>
</li>
<li><a href="#where_are_we">So where are we?</a></li>
</ul>


<p>I have recently been trying to keep myself abreast of a flurry of
discussion about reforming the design of Rust closures.  Niko has a
series of blog posts (<a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/dynamically-sized-types/">2</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/">3</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/">4</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">5</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/">6</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">7</a>, <a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">8</a>); the
content of some of those posts were further discussed at Rust team
meetings (<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-04-30">11</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-07">12</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-14">13</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-21">14</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-05-28">15</a>, <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04">16</a>), and there have been some
more formalized proposals with their own set of discussions: (<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform">9</a>,
<a href="https://github.com/mozilla/rust/wiki/Proposal-for-closure-reform-%28specific%29">10</a>).</p>

<p>There are also associated github issues (<a href="https://github.com/mozilla/rust/issues/2202">17</a>, <a href="https://github.com/mozilla/rust/issues/3569">18</a>, <a href="https://github.com/mozilla/rust/issues/6308">19</a>), though
without sufficient context the discussion in the github issues may not
always be intelligible.</p>

<p>Some of the links above are more about &ldquo;Dynamically Sized Types&rdquo;
(DST), a related topic, as we shall see.</p>

<p>This post is my attempt to condense all of this information down into
something where I can see all the pieces at once, and discard the
red herrings along the way.</p>

<!-- more -->


<h2><a id="background_fns">Background: Closures (recurring and otherwise)</a></h2>

<p>In Rust circa version 0.6, closures have three categories according to
the type system (<code>&amp;fn</code>, <code>@fn</code>, and <code>~fn</code>), but <a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">as Niko describes</a>,
they can be divided into two kinds: by-reference closures and copying
closures.  By-reference closures are also referred to as
stack-allocated closures or sometimes &ldquo;stack closure.&rdquo;
(There is also a orthogonal division of <code>once</code> closures, versus
closures that can be invoked more than once; some of these things are,
to my knowledge, only part of planned future implementation.  Niko
discusses them in the blog posts but I&rsquo;m mostly sidestep them here.)</p>

<p>As Niko states in the first paragraph of <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">1</a>, a stack closure is
allocated on the stack, and can refer to and manipulate the local
variables of the enclosing stack frame (by reference).</p>

<p>In Rust (as of version 0.6), one creates a stack-allocated closure by
writing an expression <code>|x ...| { ... }</code> within an expression context
dictating that it wants a closure of <code>&amp;fn</code> type.  Analogously, a
closure allocated on the exchange-heap is expressed by putting the
expression into a context of <code>~fn</code> type, et cetera.  Since a
stack-allocated closure is currently expressed solely by use of <code>&amp;fn</code>
type, Niko often uses the term <code>&amp;fn</code> closure synonymously with
stack-allocated closure.</p>

<p>(However, Niko also points out (first section of
<a href="http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/">&ldquo;Procedures, Continued&rdquo;</a>) that one can borrow a <code>@fn</code> or <code>~fn</code> to
a <code>&amp;fn</code>, so the type does <em>not</em> tell you whether you actually have a
by-reference or a copying-closure.)</p>

<p>Here is the example of an unsound function that Niko described in
his <a href="http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/">Case of the Recurring Closure</a> post from 2013-04-30,
making use of higher-order functions to express a fixed-point
combinator:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">R</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="bp">self</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This struct is needed to create the</span>
</span><span class='line'>    <span class="c1">// otherwise infinite type of a fn that</span>
</span><span class='line'>    <span class="c1">// accepts itself as argument:</span>
</span><span class='line'>    <span class="n">c</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;self</span> <span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">R</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">innocent_looking_victim</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">vec</span> <span class="o">=</span> <span class="o">~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">conspirator</span><span class="p">(</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">vec</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">100</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">vec</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">vec</span><span class="p">.</span><span class="n">each</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">f</span><span class="p">.</span><span class="n">c</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">conspirator</span><span class="p">(</span><span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">R</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">R</span> <span class="p">{</span><span class="n">c</span><span class="o">:</span> <span class="n">f</span><span class="p">};</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">As</span> <span class="n">Niko</span> <span class="n">explains</span><span class="p">,</span> <span class="n">the</span> <span class="n">vector</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span> <span class="n">is</span> <span class="n">mutated</span> <span class="k">while</span> <span class="n">being</span> <span class="n">traversed</span> <span class="n">by</span>
</span><span class='line'><span class="n">an</span> <span class="n">iterator</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span> <span class="n">illegal</span><span class="p">.</span>  <span class="n">The</span> <span class="n">closure</span> <span class="err">`</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="err">`</span> <span class="n">captures</span>
</span><span class='line'><span class="n">a</span> <span class="n">reference</span> <span class="n">to</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span><span class="p">,</span> <span class="n">and</span> <span class="n">Rust</span><span class="nl">&#39;s</span> <span class="n">borrow</span> <span class="n">checker</span> <span class="n">is</span> <span class="n">not</span> <span class="n">treating</span> <span class="n">the</span> <span class="n">argument</span>
</span><span class='line'><span class="err">`</span><span class="n">f</span><span class="err">`</span> <span class="k">as</span> <span class="n">a</span> <span class="n">potential</span> <span class="n">source</span> <span class="n">of</span> <span class="n">aliases</span> <span class="n">to</span> <span class="err">`</span><span class="n">vec</span><span class="err">`</span><span class="p">,</span> <span class="n">even</span> <span class="n">though</span> <span class="n">it</span> <span class="n">does</span> <span class="n">alias</span>
</span><span class='line'><span class="err">`</span><span class="n">vec</span><span class="err">`</span> <span class="n">because</span> <span class="err">`</span><span class="n">f</span><span class="err">`</span> <span class="n">ends</span> <span class="n">up</span> <span class="n">being</span> <span class="n">bound</span> <span class="n">to</span> <span class="n">the</span> <span class="n">closure</span> <span class="err">`</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="err">`</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">An</span> <span class="n">important</span> <span class="n">detail</span> <span class="n">here</span> <span class="n">is</span> <span class="n">that</span> <span class="n">the</span> <span class="n">closure</span> <span class="k">in</span> <span class="n">question</span> <span class="n">is</span>
</span><span class='line'><span class="n">a</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Niko</span> <span class="n">has</span> <span class="n">described</span> <span class="n">his</span> <span class="n">solution</span> <span class="n">to</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="n">it</span> <span class="n">would</span>
</span><span class='line'><span class="n">entail</span> <span class="n">adding</span> <span class="n">some</span> <span class="n">new</span> <span class="n">rules</span> <span class="n">about</span> <span class="n">how</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">invoked</span>
</span><span class='line'><span class="n">and</span> <span class="n">passed</span> <span class="k">as</span> <span class="n">parameters</span><span class="p">.</span>  <span class="n">One</span> <span class="n">of</span> <span class="n">the</span> <span class="n">main</span> <span class="n">changes</span> <span class="n">imposed</span> <span class="n">by</span> <span class="n">his</span>
</span><span class='line'><span class="n">solution</span> <span class="n">was</span> <span class="n">that</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">would</span> <span class="n">become</span> <span class="n">non</span><span class="o">-</span><span class="n">aliasable</span><span class="p">;</span>
</span><span class='line'><span class="n">this</span> <span class="n">would</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">one</span> <span class="n">could</span> <span class="n">not</span> <span class="n">express</span> <span class="n">the</span> <span class="n">Y</span><span class="o">-</span><span class="n">combinator</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">restriction</span> <span class="n">to</span> <span class="n">ensure</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="err">`</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">unaliasable</span> <span class="n">interacts</span>
</span><span class='line'><span class="n">with</span> <span class="n">other</span> <span class="n">proposals</span><span class="p">,</span> <span class="k">as</span> <span class="n">we</span> <span class="n">shall</span> <span class="n">see</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">Note</span> <span class="n">that</span> <span class="n">Rust</span> <span class="n">does</span> <span class="n">have</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">expressing</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">aliasable</span> <span class="n">pointer</span>
</span><span class='line'><span class="n">to</span> <span class="err">`</span><span class="n">T</span><span class="err">`</span> <span class="k">for</span> <span class="n">any</span> <span class="err">`</span><span class="n">T</span><span class="err">`</span><span class="o">:</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">T</span><span class="err">`</span><span class="p">.)</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;background_dst&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Background</span><span class="o">:</span> <span class="n">DST</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">heart</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Dynamically</span> <span class="nb">Sized</span> <span class="n">Types</span> <span class="n">proposal</span> <span class="n">is</span> <span class="n">the</span> <span class="n">discrepancy</span>
</span><span class='line'><span class="n">described</span> <span class="k">in</span> <span class="n">Niko</span><span class="nl">&#39;s</span> <span class="p">[</span><span class="n">DST</span><span class="p">,</span> <span class="n">Revisited</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="n">post</span> <span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span>
</span><span class='line'><span class="p">(</span><span class="n">published</span> <span class="n">contemporaneously</span> <span class="n">with</span> <span class="p">[</span><span class="n">Case</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Recurring</span> <span class="n">Closure</span><span class="p">][</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">has</span> <span class="n">been</span> <span class="n">wrestling</span> <span class="n">with</span> <span class="n">the</span> <span class="n">idea</span> <span class="k">for</span> <span class="n">a</span> <span class="k">while</span><span class="p">,</span> <span class="k">as</span> <span class="n">one</span> <span class="n">can</span> <span class="n">see</span> <span class="n">on</span>
</span><span class='line'><span class="n">his</span> <span class="n">posts</span> <span class="n">from</span> <span class="p">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">23</span><span class="p">][</span><span class="mi">20</span><span class="p">]</span> <span class="n">and</span> <span class="p">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">27</span><span class="p">][</span><span class="mi">21</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">vectors</span> <span class="p">(</span><span class="n">and</span> <span class="n">strings</span><span class="p">,</span> <span class="n">which</span> <span class="n">we</span> <span class="n">will</span> <span class="n">treat</span> <span class="k">as</span> <span class="n">a</span> <span class="n">special</span> <span class="n">case</span>
</span><span class='line'><span class="n">of</span> <span class="n">vectors</span><span class="p">)</span> <span class="n">come</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">forms</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span> <span class="n">dynamic</span><span class="o">-</span><span class="n">length</span><span class="o">:</span> <span class="n">heap</span><span class="o">-</span><span class="n">allocated</span><span class="p">,</span> <span class="n">carries</span> <span class="n">its</span> <span class="n">length</span> <span class="n">N</span> <span class="k">as</span> <span class="n">part</span> <span class="n">of</span> <span class="n">its</span>
</span><span class='line'>  <span class="n">record</span> <span class="n">structure</span><span class="p">.</span>  <span class="n">Consists</span> <span class="n">of</span> <span class="n">some</span> <span class="n">amount</span> <span class="n">of</span> <span class="n">meta</span><span class="o">-</span><span class="n">data</span><span class="p">,</span> <span class="n">including</span>
</span><span class='line'>  <span class="n">the</span> <span class="n">length</span> <span class="n">word</span><span class="p">,</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">the</span> <span class="n">inline</span><span class="o">-</span><span class="n">allocated</span> <span class="n">array</span> <span class="n">of</span> <span class="n">N</span>
</span><span class='line'>  <span class="n">elements</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'><span class="o">*</span> <span class="n">slice</span><span class="o">:</span> <span class="n">represents</span> <span class="n">a</span> <span class="n">substring</span> <span class="n">of</span> <span class="n">a</span> <span class="n">vector</span><span class="p">;</span> <span class="n">consists</span> <span class="n">of</span> <span class="n">two</span> <span class="n">words</span><span class="o">:</span> <span class="n">a</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">payload</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">length</span> <span class="n">bound</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'><span class="o">*</span> <span class="n">fixed</span><span class="o">-</span><span class="n">length</span><span class="o">:</span> <span class="n">represents</span> <span class="n">exactly</span> <span class="n">N</span> <span class="n">elements</span><span class="p">,</span> <span class="n">where</span> <span class="n">N</span> <span class="n">is</span> <span class="n">statically</span>
</span><span class='line'>  <span class="n">tracked</span> <span class="n">at</span> <span class="n">compile</span><span class="o">-</span><span class="n">time</span><span class="p">.</span>  <span class="n">Consists</span> <span class="n">of</span> <span class="n">just</span> <span class="n">the</span> <span class="n">array</span> <span class="n">of</span> <span class="n">elements</span><span class="p">,</span>
</span><span class='line'>  <span class="err">`</span><span class="n">T</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="err">`</span><span class="p">,</span> <span class="n">and</span> <span class="n">nothing</span> <span class="n">more</span><span class="p">.</span>  <span class="n">Expressed</span> <span class="k">as</span> <span class="err">`</span><span class="p">[</span><span class="n">T</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span><span class="err">`</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="n">a</span> <span class="n">slice</span><span class="nl">&#39;s</span> <span class="n">two</span><span class="o">-</span><span class="n">word</span> <span class="n">representation</span> <span class="n">is</span> <span class="n">quite</span>
</span><span class='line'><span class="n">different</span> <span class="n">from</span> <span class="n">the</span> <span class="n">representations</span> <span class="n">of</span> <span class="n">the</span> <span class="n">other</span> <span class="n">variants</span><span class="p">.</span>  <span class="n">His</span>
</span><span class='line'><span class="n">proposal</span> <span class="n">is</span> <span class="n">to</span> <span class="n">unify</span> <span class="n">the</span> <span class="n">first</span> <span class="n">two</span> <span class="n">representations</span><span class="p">,</span> <span class="n">by</span> <span class="n">laying</span> <span class="n">out</span>
</span><span class='line'><span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="k">as</span> <span class="n">pairs</span> <span class="n">of</span> <span class="n">words</span> <span class="p">(</span><span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">boxed</span> <span class="n">elements</span>
</span><span class='line'><span class="n">array</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">length</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="n">Niko</span> <span class="n">claimed</span> <span class="n">that</span> <span class="n">this</span> <span class="n">makes</span> <span class="n">a</span> <span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">and</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">valid</span> <span class="n">slices</span><span class="p">,</span> <span class="s">&quot;apart</span>
</span><span class='line'><span class="s">from the box header&quot;</span><span class="p">;</span> <span class="n">it</span> <span class="n">seems</span> <span class="n">to</span> <span class="n">me</span> <span class="n">like</span> <span class="n">the</span> <span class="k">box</span> <span class="n">header</span> <span class="n">is</span> <span class="n">quite</span>
</span><span class='line'><span class="n">relevant</span> <span class="n">here</span><span class="p">,</span> <span class="n">unless</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">is</span> <span class="n">that</span> <span class="n">when</span> <span class="n">you</span> <span class="n">coerce</span> <span class="n">a</span> <span class="err">`</span><span class="o">@</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="err">`</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">slice</span><span class="p">,</span> <span class="n">you</span> <span class="n">increment</span> <span class="n">the</span> <span class="n">pointer</span> <span class="n">value</span> <span class="n">accordingly</span><span class="p">...)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Then</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">classifies</span> <span class="n">the</span> <span class="n">types</span> <span class="n">of</span> <span class="n">Rust</span> <span class="n">into</span> <span class="n">two</span> <span class="n">categories</span><span class="o">:</span> <span class="nb">Sized</span> <span class="n">and</span>
</span><span class='line'><span class="n">Unsized</span><span class="p">;</span> <span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.,</span> <span class="n">size</span> <span class="n">is</span> <span class="n">statically</span> <span class="n">known</span><span class="p">,</span> <span class="n">versus</span> <span class="n">size</span> <span class="n">is</span> <span class="n">tracked</span> <span class="n">at</span>
</span><span class='line'><span class="n">runtime</span> <span class="p">(</span><span class="n">maybe</span> <span class="n">the</span> <span class="n">letters</span> <span class="n">S</span> <span class="n">and</span> <span class="n">R</span> <span class="n">would</span> <span class="n">have</span> <span class="n">been</span> <span class="n">more</span> <span class="n">appropriate</span>
</span><span class='line'><span class="n">than</span> <span class="n">S</span> <span class="n">and</span> <span class="n">U</span><span class="p">...).</span>  <span class="n">The</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">cannot</span> <span class="n">themselves</span> <span class="kr">be</span> <span class="n">assigned</span>
</span><span class='line'><span class="k">as</span> <span class="n">types</span> <span class="n">of</span> <span class="n">local</span> <span class="n">variables</span><span class="p">,</span> <span class="n">and</span> <span class="n">you</span> <span class="n">cannot</span> <span class="n">have</span> <span class="n">vectors</span> <span class="n">of</span> <span class="n">elements</span>
</span><span class='line'><span class="n">of</span> <span class="kr">unsized</span> <span class="k">type</span><span class="p">;</span> <span class="n">this</span> <span class="n">all</span> <span class="n">stems</span> <span class="n">from</span> <span class="n">the</span> <span class="n">fact</span> <span class="n">that</span> <span class="s">&quot;unsized types&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="n">not</span> <span class="n">have</span> <span class="n">a</span> <span class="k">static</span> <span class="n">size</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">The</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">are</span> <span class="n">arguably</span> <span class="n">not</span> <span class="n">actually</span> <span class="n">types</span><span class="p">;</span> <span class="n">we</span> <span class="n">might</span> <span class="kr">be</span>
</span><span class='line'><span class="n">well</span><span class="o">-</span><span class="n">served</span> <span class="n">by</span> <span class="n">referring</span> <span class="n">to</span> <span class="n">them</span> <span class="k">as</span> <span class="s">&quot;pretypes&quot;</span> <span class="n">or</span> <span class="n">something</span><span class="p">).</span>
</span><span class='line'><span class="n">But</span> <span class="n">pointers</span> <span class="n">to</span> <span class="kr">unsized</span> <span class="n">types</span> <span class="n">are</span> <span class="n">valid</span> <span class="n">types</span><span class="p">.</span>  <span class="n">Such</span> <span class="n">pointers</span> <span class="n">are</span> <span class="n">the</span>
</span><span class='line'><span class="n">pairs</span> <span class="n">of</span> <span class="n">words</span> <span class="n">discussed</span> <span class="n">above</span><span class="p">,</span> <span class="n">aka</span> <span class="s">&quot;fat pointers&quot;</span><span class="o">:</span> <span class="err">`</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">meta</span><span class="p">)</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'><span class="n">where</span> <span class="err">`</span><span class="n">payload</span><span class="err">`</span> <span class="n">is</span> <span class="n">the</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">the</span> <span class="n">data</span><span class="p">,</span> <span class="n">and</span> <span class="err">`</span><span class="n">meta</span><span class="err">`</span> <span class="n">is</span> <span class="n">the</span>
</span><span class='line'><span class="n">descriptor</span> <span class="n">that</span> <span class="n">includes</span> <span class="n">some</span> <span class="n">way</span> <span class="n">to</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">the</span> <span class="n">payload</span>
</span><span class='line'><span class="p">(</span><span class="n">to</span> <span class="n">support</span> <span class="n">runtime</span> <span class="n">bounds</span> <span class="n">checks</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">fact</span> <span class="n">that</span> <span class="s">&quot;unsized types&quot;</span> <span class="n">need</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">treated</span> <span class="n">specially</span> <span class="n">leads</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">complication</span><span class="p">,</span> <span class="n">discussed</span> <span class="n">further</span> <span class="k">in</span> <span class="n">the</span> <span class="n">post</span><span class="p">;</span> <span class="n">how</span> <span class="n">to</span> <span class="n">differentiate</span>
</span><span class='line'><span class="n">between</span> <span class="k">type</span><span class="o">-</span><span class="n">parameterized</span> <span class="n">code</span> <span class="n">that</span> <span class="n">works</span> <span class="n">on</span> <span class="n">both</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">types</span><span class="p">,</span>
</span><span class='line'><span class="n">versus</span> <span class="n">typed</span><span class="o">-</span><span class="n">parameterized</span> <span class="n">code</span> <span class="n">that</span> <span class="n">solely</span> <span class="n">operates</span> <span class="n">on</span> <span class="n">sized</span> <span class="n">types</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">method</span> <span class="n">proposed</span> <span class="k">in</span> <span class="n">the</span> <span class="n">post</span> <span class="n">is</span> <span class="n">to</span> <span class="n">express</span> <span class="n">the</span> <span class="n">distinction</span> <span class="n">via</span> <span class="n">a</span>
</span><span class='line'><span class="k">trait</span> <span class="n">bound</span><span class="o">:</span> <span class="n">the</span> <span class="err">`</span><span class="nb">Sized</span><span class="err">`</span> <span class="n">bound</span> <span class="n">would</span> <span class="n">restrict</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">to</span>
</span><span class='line'><span class="n">one</span> <span class="n">of</span> <span class="n">statically</span><span class="o">-</span><span class="n">known</span> <span class="n">size</span><span class="p">;</span> <span class="n">you</span> <span class="n">would</span> <span class="n">not</span> <span class="kr">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">express</span>
</span><span class='line'><span class="n">types</span> <span class="n">like</span> <span class="err">`</span><span class="p">[</span><span class="n">X</span><span class="p">,</span> <span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="err">`</span> <span class="p">(</span><span class="n">a</span> <span class="n">fixed</span><span class="o">-</span><span class="n">length</span> <span class="n">vector</span> <span class="n">of</span> <span class="mi">3</span> <span class="n">X</span><span class="nl">&#39;es</span><span class="p">),</span> <span class="n">unless</span> <span class="n">you</span>
</span><span class='line'><span class="n">include</span> <span class="n">the</span> <span class="n">bound</span> <span class="err">`</span><span class="n">X</span><span class="o">:</span><span class="nb">Sized</span><span class="err">`</span><span class="p">.</span>  <span class="p">(</span><span class="n">There</span> <span class="n">is</span> <span class="n">more</span> <span class="n">on</span> <span class="n">this</span> <span class="n">restriction</span>
</span><span class='line'><span class="n">and</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">ease</span> <span class="n">it</span> <span class="n">further</span> <span class="n">down</span><span class="p">.)</span>
</span><span class='line'>
</span><span class='line'><span class="n">One</span> <span class="n">of</span> <span class="n">the</span> <span class="n">benefits</span> <span class="n">of</span> <span class="n">DST</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">proposes</span> <span class="n">early</span> <span class="n">on</span> <span class="n">is</span> <span class="n">that</span>
</span><span class='line'><span class="n">Traits</span> <span class="n">and</span> <span class="n">closures</span> <span class="n">are</span> <span class="n">other</span> <span class="n">instances</span> <span class="n">of</span> <span class="kr">unsized</span> <span class="n">types</span><span class="p">,</span> <span class="n">so</span> <span class="n">that</span>
</span><span class='line'><span class="n">Rust</span><span class="nl">&#39;s</span> <span class="k">type</span> <span class="n">hierarchy</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">presented</span> <span class="n">uniformly</span> <span class="n">like</span> <span class="n">so</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>            <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>            <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="n">T</span>        <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>           <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>           <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>     <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>         <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>          <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>          <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>        <span class="c1">// existential (&amp;ldquo;exists S:Trait.S&amp;rdquo;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">S</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="p">(</span><span class="n">Note</span> <span class="n">that</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">types</span> <span class="n">assigned</span> <span class="n">to</span> <span class="n">expressions</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">instances</span>
</span><span class='line'><span class="n">of</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">S</span><span class="err">`</span> <span class="n">according</span> <span class="n">to</span> <span class="n">this</span> <span class="n">grammar</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;the_problem&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">Problem</span><span class="o">:</span> <span class="n">DST</span> <span class="n">and</span> <span class="n">Closures</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span><span class="p">,</span> <span class="n">from</span> <span class="n">the</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Case</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Recurring</span> <span class="n">Closure</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">we</span> <span class="n">saw</span> <span class="n">that</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">were</span> <span class="n">to</span> <span class="n">become</span> <span class="n">non</span><span class="o">-</span><span class="n">copyable</span><span class="p">.</span>
</span><span class='line'><span class="n">But</span> <span class="n">under</span> <span class="n">the</span> <span class="n">DST</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">generic</span> <span class="n">code</span> <span class="n">should</span> <span class="kr">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">treat</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">the</span> <span class="n">same</span> <span class="k">for</span> <span class="n">all</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">including</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">when</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">some</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>
</span><span class='line'><span class="n">These</span> <span class="n">two</span> <span class="n">criteria</span> <span class="n">are</span> <span class="n">not</span> <span class="n">compatible</span><span class="p">;</span> <span class="n">Niko</span> <span class="n">has</span> <span class="n">lots</span> <span class="n">more</span> <span class="n">explanation</span>
</span><span class='line'><span class="k">in</span> <span class="n">his</span> <span class="n">corresponding</span> <span class="n">post</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/13/recurring-closures-and-dynamically-sized-types/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Recurring</span> <span class="n">Closures</span> <span class="n">and</span> <span class="n">Dynamically</span> <span class="nb">Sized</span> <span class="n">Types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mf">13.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">immediate</span> <span class="n">proposals</span> <span class="n">to</span> <span class="n">resolve</span> <span class="n">this</span> <span class="n">were</span> <span class="n">either</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">we</span> <span class="n">write</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">instead</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">all</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">including</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span> <span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">is</span> <span class="n">forced</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">unaliasable</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="n">borrow</span><span class="o">-</span><span class="n">checker</span><span class="p">,</span> <span class="n">and</span> <span class="n">so</span> <span class="n">the</span> <span class="n">hole</span> <span class="n">goes</span> <span class="n">away</span><span class="p">,</span> <span class="n">or</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">we</span> <span class="n">change</span> <span class="n">notation</span><span class="p">,</span> <span class="n">and</span> <span class="n">move</span> <span class="n">the</span> <span class="n">sigils</span> <span class="k">for</span> <span class="n">closures</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">after</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="k">fn</span><span class="p">,</span>
</span><span class='line'><span class="n">side</span><span class="o">-</span><span class="n">stepping</span> <span class="n">the</span> <span class="n">special</span> <span class="n">treatment</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">versus</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">by</span> <span class="n">getting</span>
</span><span class='line'><span class="n">rid</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="n">replacing</span> <span class="n">it</span> <span class="n">with</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;is_fn_too_ugly&quot;</span><span class="o">&gt;</span><span class="n">Is</span> <span class="k">fn</span><span class="o">~</span> <span class="n">too</span> <span class="n">ugly</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">at</span> <span class="n">first</span> <span class="n">favored</span> <span class="n">the</span> <span class="n">latter</span><span class="p">,</span> <span class="n">then</span> <span class="n">he</span> <span class="n">wrote</span> <span class="n">a</span> <span class="n">second</span> <span class="n">post</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/13/mutable-fn-alternatives/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">Mutable</span> <span class="n">Fn</span> <span class="n">Alternatives</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">on</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">13</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">reconsidered</span> <span class="n">whether</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">~&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">too</span> <span class="n">ugly</span><span class="p">,</span> <span class="n">and</span> <span class="n">included</span>
</span><span class='line'><span class="n">new</span> <span class="n">survey</span> <span class="n">of</span> <span class="n">the</span> <span class="n">options</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Maybe</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">not</span> <span class="n">that</span> <span class="n">bad</span><span class="p">,</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Maybe</span> <span class="n">make</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">all</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">borrowed</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span><span class="p">),</span> <span class="n">removing</span>
</span><span class='line'><span class="n">the</span> <span class="n">need</span> <span class="k">for</span> <span class="n">any</span> <span class="n">sigil</span><span class="p">,</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Make</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">denote</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closures</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">replace</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">~&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">with</span> <span class="n">a</span> <span class="n">new</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="p">(</span><span class="n">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">variation</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">bullet</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">the</span> <span class="n">second</span> <span class="n">and</span> <span class="n">third</span> <span class="n">bullets</span><span class="p">,</span> <span class="n">the</span> <span class="n">main</span> <span class="n">point</span> <span class="n">is</span><span class="o">:</span> <span class="n">If</span> <span class="n">you</span> <span class="n">need</span> <span class="n">to</span>
</span><span class='line'><span class="n">capture</span> <span class="n">state</span> <span class="k">in</span> <span class="n">a</span> <span class="n">manner</span> <span class="n">that</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">expressed</span> <span class="n">via</span> <span class="n">the</span> <span class="n">available</span>
</span><span class='line'><span class="n">options</span> <span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span><span class="p">,</span> <span class="n">or</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">if</span> <span class="n">present</span><span class="p">),</span> <span class="n">then</span> <span class="n">you</span>
</span><span class='line'><span class="n">have</span> <span class="n">to</span> <span class="kn">use</span> <span class="n">an</span> <span class="k">trait</span> <span class="n">instead</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">an</span> <span class="n">object</span> <span class="n">or</span> <span class="n">a</span> <span class="n">record</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="n">I</span> <span class="n">personally</span> <span class="n">am</span> <span class="n">not</span> <span class="n">thrilled</span> <span class="n">about</span> <span class="n">losing</span> <span class="n">the</span> <span class="n">option</span> <span class="n">of</span> <span class="n">using</span>
</span><span class='line'><span class="n">closures</span> <span class="n">to</span> <span class="n">express</span> <span class="n">combinator</span> <span class="n">libraries</span><span class="p">,</span> <span class="n">a</span> <span class="kn">use</span> <span class="n">case</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">@&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;leveraging_proc&quot;</span><span class="o">&gt;</span><span class="n">Leveraging</span> <span class="n">a</span> <span class="k">proc</span> <span class="n">keyword</span><span class="o">/</span><span class="n">expression</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Then</span> <span class="n">a</span> <span class="n">third</span> <span class="n">post</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/14/procedures/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Procedures</span><span class="p">,</span> <span class="n">Continued</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">from</span>
</span><span class='line'><span class="mi">2013</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="n">refined</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">proposal</span> <span class="n">a</span> <span class="n">bit</span> <span class="n">further</span><span class="p">.</span>  <span class="n">As</span> <span class="n">stated</span> <span class="k">in</span>
</span><span class='line'><span class="n">the</span> <span class="n">background</span> <span class="n">on</span> <span class="n">closures</span><span class="p">,</span> <span class="n">Rust</span> <span class="n">has</span> <span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closures</span> <span class="n">and</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closures</span><span class="p">;</span> <span class="n">the</span> <span class="n">choice</span> <span class="n">of</span> <span class="n">which</span> <span class="n">variant</span> <span class="n">to</span> <span class="n">construct</span> <span class="n">is</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="k">type</span> <span class="n">expected</span> <span class="n">by</span> <span class="n">the</span> <span class="n">context</span> <span class="n">of</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;|</span><span class="n">x</span> <span class="p">...</span><span class="o">|</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">expression</span><span class="p">.</span>
</span><span class='line'><span class="n">In</span> <span class="n">this</span> <span class="n">post</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">proposed</span> <span class="n">that</span> <span class="n">the</span> <span class="n">distinction</span> <span class="n">here</span> <span class="n">deserves</span> <span class="n">a</span>
</span><span class='line'><span class="n">starker</span> <span class="n">line</span> <span class="n">between</span> <span class="n">the</span> <span class="n">two</span> <span class="n">forms</span><span class="p">.</span>  <span class="p">(</span><span class="n">In</span> <span class="n">that</span> <span class="n">post</span><span class="p">,</span> <span class="n">he</span> <span class="n">proposed</span> <span class="n">both</span> <span class="n">a</span>
</span><span class='line'><span class="n">revision</span> <span class="n">to</span> <span class="n">English</span> <span class="n">jargon</span> <span class="n">and</span> <span class="n">also</span> <span class="n">to</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">syntax</span><span class="p">;</span> <span class="n">I</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">m</span> <span class="n">going</span> <span class="n">to</span>
</span><span class='line'><span class="n">focus</span> <span class="n">solely</span> <span class="n">on</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">syntax</span> <span class="n">changes</span><span class="p">,</span> <span class="n">and</span> <span class="kd">let</span> <span class="n">those</span> <span class="n">guide</span> <span class="n">the</span>
</span><span class='line'><span class="n">changes</span> <span class="n">to</span> <span class="n">my</span> <span class="n">own</span> <span class="n">jargon</span> <span class="n">here</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">Niko</span> <span class="n">proposes</span> <span class="n">distinguishing</span> <span class="n">a</span> <span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closure</span> <span class="n">from</span> <span class="n">a</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closure</span> <span class="n">via</span> <span class="n">keywords</span><span class="p">.</span>  <span class="n">A</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closure</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">constructed</span>
</span><span class='line'><span class="n">solely</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="n">a</span> <span class="n">copying</span> <span class="n">closure</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">constructed</span> <span class="n">solely</span> <span class="n">via</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">While</span> <span class="n">discussing</span> <span class="n">this</span> <span class="n">proposal</span> <span class="n">henceforth</span><span class="p">,</span> <span class="n">I</span> <span class="n">will</span> <span class="n">refer</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'><span class="n">by</span><span class="o">-</span><span class="n">reference</span> <span class="n">closure</span> <span class="k">as</span> <span class="n">an</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closure</span> <span class="n">and</span> <span class="n">a</span> <span class="n">copying</span> <span class="n">closure</span> <span class="k">as</span> <span class="n">a</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closure</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="k">type</span> <span class="n">hierarchy</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">then</span> <span class="n">provides</span> <span class="k">for</span> <span class="n">this</span> <span class="n">is</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="o">=</span> <span class="n">S</span>               <span class="c1">// sized types</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">U</span>               <span class="c1">// unsized types</span>
</span><span class='line'><span class="n">S</span> <span class="o">=</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span>     <span class="c1">// closures (*)</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nl">&#39;r</span> <span class="n">T</span>           <span class="c1">// region ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">@</span><span class="n">T</span>              <span class="c1">// managed ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">~</span><span class="n">T</span>              <span class="c1">// unique ptr</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">S</span><span class="p">,</span> <span class="p">..</span><span class="n">N</span><span class="p">]</span>        <span class="c1">// fixed-length array</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">uint</span>            <span class="c1">// scalars</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">...</span>
</span><span class='line'><span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="n">S</span><span class="p">]</span>             <span class="c1">// vectors</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">str</span>             <span class="c1">// string</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Trait</span>           <span class="c1">// existential (&quot;exists S:Trait.S&quot;)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">proc</span><span class="p">(</span><span class="n">S</span><span class="o">*</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">S</span>   <span class="c1">// procedures (*)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Now</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">are</span> <span class="n">considered</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sized</span> <span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">because</span> <span class="n">they</span> <span class="n">are</span>
</span><span class='line'><span class="n">always</span> <span class="n">represented</span> <span class="n">by</span> <span class="n">two</span> <span class="n">words</span><span class="o">:</span> <span class="n">a</span> <span class="p">(</span><span class="n">borrowed</span><span class="p">)</span> <span class="n">environment</span> <span class="n">pointer</span> <span class="p">(</span><span class="n">to</span>
</span><span class='line'><span class="n">the</span> <span class="n">stack</span> <span class="k">in</span> <span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">though</span> <span class="n">perhaps</span> <span class="n">it</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">generalized</span>
</span><span class='line'><span class="n">to</span> <span class="n">point</span> <span class="n">elsewhere</span><span class="p">)</span> <span class="n">and</span> <span class="n">a</span> <span class="n">function</span> <span class="n">pointer</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">are</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="kr">unsized</span> <span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">because</span> <span class="n">their</span> <span class="n">copied</span> <span class="n">lexical</span> <span class="n">environment</span> <span class="n">is</span> <span class="n">of</span> <span class="n">some</span>
</span><span class='line'><span class="n">dynamically</span><span class="o">-</span><span class="n">determined</span> <span class="n">size</span> <span class="n">that</span> <span class="n">they</span> <span class="n">must</span> <span class="n">carry</span> <span class="k">in</span> <span class="n">their</span> <span class="n">record</span>
</span><span class='line'><span class="n">structure</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">this</span> <span class="n">version</span> <span class="n">of</span> <span class="n">the</span> <span class="n">proposal</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">can</span> <span class="n">now</span> <span class="kr">be</span> <span class="n">allocated</span> <span class="n">to</span> <span class="n">either</span>
</span><span class='line'><span class="n">the</span> <span class="n">exchange</span> <span class="n">heap</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">or</span> <span class="n">the</span> <span class="n">task</span> <span class="n">heap</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;@</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">).</span>  <span class="n">So</span> <span class="n">this</span>
</span><span class='line'><span class="n">brings</span> <span class="n">back</span> <span class="n">the</span> <span class="n">ability</span> <span class="n">to</span> <span class="n">express</span> <span class="n">combinator</span> <span class="n">libraries</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">post</span> <span class="n">provides</span> <span class="n">further</span> <span class="n">detail</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">dissection</span> <span class="n">of</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closure</span> <span class="n">types</span> <span class="p">(</span><span class="n">which</span> <span class="n">include</span> <span class="n">important</span> <span class="n">details</span> <span class="n">like</span> <span class="n">the</span>
</span><span class='line'><span class="n">lifetime</span> <span class="n">and</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bounds</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">the</span> <span class="n">closed</span><span class="o">-</span><span class="n">over</span> <span class="n">variables</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span>
</span><span class='line'><span class="n">important</span> <span class="n">since</span> <span class="n">with</span> <span class="n">a</span> <span class="n">separate</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">now</span> <span class="n">reasonable</span> <span class="k">for</span>
</span><span class='line'><span class="n">different</span> <span class="n">defaults</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">chosen</span> <span class="k">for</span> <span class="n">two</span> <span class="n">cases</span><span class="p">;</span> <span class="n">useful</span> <span class="k">for</span> <span class="n">making</span> <span class="n">the</span>
</span><span class='line'><span class="n">common</span> <span class="n">case</span> <span class="n">succinct</span><span class="p">).</span>  <span class="n">He</span> <span class="n">also</span> <span class="n">describes</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">variations</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">theme</span><span class="p">,</span> <span class="n">including</span> <span class="n">modeling</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">closures</span> <span class="n">via</span> <span class="n">traits</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span> <span class="n">boxed</span>
</span><span class='line'><span class="n">traits</span> <span class="n">are</span> <span class="n">objects</span> <span class="n">carrying</span> <span class="n">virtual</span> <span class="n">method</span> <span class="n">dispatch</span> <span class="n">tables</span><span class="p">),</span> <span class="n">and</span> <span class="n">then</span>
</span><span class='line'><span class="n">expressing</span> <span class="n">them</span> <span class="n">via</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macro</span> <span class="p">(</span><span class="n">which</span> <span class="n">means</span> <span class="n">they</span> <span class="n">could</span> <span class="kr">be</span> <span class="n">left</span>
</span><span class='line'><span class="n">out</span> <span class="n">of</span> <span class="n">the</span> <span class="n">core</span> <span class="n">language</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;other_ways_to_proc&quot;</span><span class="o">&gt;</span><span class="n">Other</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">express</span> <span class="k">proc</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">his</span> <span class="n">next</span> <span class="n">post</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/05/30/removing-procs/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Removing</span> <span class="n">Procs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">elaborates</span> <span class="n">further</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">need</span> <span class="n">not</span> <span class="kr">be</span> <span class="n">supported</span> <span class="k">in</span> <span class="n">the</span> <span class="n">language</span> <span class="n">at</span> <span class="n">all</span><span class="p">.</span>
</span><span class='line'><span class="n">Stack</span><span class="o">-</span><span class="n">allocated</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">closures</span> <span class="n">would</span> <span class="n">remain</span><span class="p">,</span> <span class="n">expressed</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fn</span><span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">the</span> <span class="n">language</span> <span class="n">already</span> <span class="n">supports</span> <span class="n">raw</span> <span class="p">(</span><span class="n">environment</span><span class="o">-</span><span class="n">less</span><span class="p">)</span> <span class="n">function</span>
</span><span class='line'><span class="n">pointers</span> <span class="n">via</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">extern</span> <span class="s">&quot;ABI&quot;</span> <span class="k">fn</span><span class="p">(</span><span class="n">S</span> <span class="p">...)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">two</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">re</span><span class="o">-</span><span class="n">express</span> <span class="n">copying</span> <span class="n">closures</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">One</span> <span class="n">could</span> <span class="n">pass</span> <span class="n">around</span> <span class="n">function</span> <span class="n">pointers</span> <span class="n">along</span> <span class="n">with</span>
</span><span class='line'><span class="n">records</span> <span class="n">that</span> <span class="n">carry</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">environment</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span> <span class="n">basically</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://matt.might.net/articles/closure-conversion/&quot;</span><span class="o">&gt;</span><span class="n">lambda</span><span class="o">-</span><span class="n">lifting</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">the</span> <span class="n">variant</span> <span class="n">that</span> <span class="n">turns</span> <span class="n">the</span> <span class="n">free</span> <span class="n">variables</span>
</span><span class='line'><span class="n">into</span> <span class="n">fields</span> <span class="n">of</span> <span class="n">a</span> <span class="n">single</span> <span class="n">environment</span> <span class="n">structure</span><span class="p">,</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">passing</span> <span class="n">each</span>
</span><span class='line'><span class="n">variable</span> <span class="k">as</span> <span class="n">a</span> <span class="n">separate</span> <span class="n">parameter</span><span class="p">),</span> <span class="n">or</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">As</span> <span class="n">stated</span> <span class="n">earlier</span><span class="p">,</span> <span class="p">(</span><span class="n">boxed</span><span class="p">)</span> <span class="n">traits</span> <span class="n">can</span> <span class="n">used</span> <span class="n">to</span> <span class="n">express</span> <span class="n">copying</span>
</span><span class='line'><span class="n">closures</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">surveyed</span> <span class="n">how</span> <span class="n">these</span> <span class="n">patterns</span> <span class="n">would</span> <span class="n">look</span> <span class="k">in</span> <span class="n">his</span> <span class="n">post</span><span class="p">,</span> <span class="n">by</span> <span class="n">considered</span>
</span><span class='line'><span class="n">existing</span> <span class="kn">use</span> <span class="n">cases</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;@</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span> <span class="n">standard</span> <span class="n">libraries</span><span class="p">,</span>
</span><span class='line'><span class="n">namely</span> <span class="n">task</span> <span class="n">spawning</span> <span class="n">and</span> <span class="n">futures</span><span class="p">.</span>  <span class="n">Without</span> <span class="n">more</span> <span class="n">language</span> <span class="n">support</span><span class="p">,</span> <span class="n">the</span>
</span><span class='line'><span class="n">lambda</span><span class="o">-</span><span class="n">lifting</span> <span class="n">transformation</span> <span class="n">requires</span> <span class="n">that</span> <span class="n">one</span> <span class="n">list</span> <span class="n">the</span> <span class="n">captures</span>
</span><span class='line'><span class="n">variables</span> <span class="p">(</span><span class="n">at</span> <span class="n">least</span> <span class="kr">once</span><span class="p">,</span> <span class="n">though</span> <span class="n">further</span> <span class="n">repetitions</span> <span class="n">can</span> <span class="kr">be</span> <span class="n">avoided</span>
</span><span class='line'><span class="n">via</span> <span class="n">appropriate</span> <span class="n">macro</span> <span class="n">definitions</span><span class="p">).</span>  <span class="n">I</span> <span class="n">am</span> <span class="n">personally</span> <span class="n">hesistant</span> <span class="n">to</span>
</span><span class='line'><span class="n">approve</span> <span class="n">of</span> <span class="n">removing</span> <span class="n">non</span> <span class="n">stack</span><span class="o">-</span><span class="n">allocated</span> <span class="n">closures</span> <span class="n">wholesale</span><span class="p">,</span> <span class="n">though</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">if</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">it</span> <span class="n">turns</span> <span class="n">out</span> <span class="n">that</span> <span class="n">capture</span> <span class="n">clauses</span> <span class="n">are</span> <span class="n">essentially</span> <span class="n">unavoidable</span> <span class="p">(</span><span class="n">or</span>
</span><span class='line'><span class="k">if</span> <span class="n">understanding</span> <span class="n">behavior</span> <span class="n">without</span> <span class="n">them</span> <span class="n">is</span> <span class="n">unworkable</span><span class="p">),</span> <span class="n">then</span> <span class="n">my</span> <span class="n">main</span>
</span><span class='line'><span class="n">problem</span> <span class="n">with</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macros</span> <span class="p">(</span><span class="n">the</span> <span class="n">explicit</span> <span class="n">list</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span><span class="p">)</span>
</span><span class='line'><span class="n">would</span> <span class="n">go</span> <span class="n">away</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Alternatively</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">system</span> <span class="n">were</span> <span class="n">somehow</span> <span class="n">extended</span> <span class="n">to</span> <span class="n">allow</span> <span class="n">a</span>
</span><span class='line'><span class="n">macro</span> <span class="n">to</span> <span class="n">query</span> <span class="n">an</span> <span class="n">expression</span> <span class="k">for</span> <span class="n">its</span> <span class="n">free</span> <span class="n">variables</span><span class="p">,</span> <span class="n">then</span> <span class="n">that</span> <span class="n">might</span>
</span><span class='line'><span class="n">help</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;digression_on_macros&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">Personal</span> <span class="n">Digression</span> <span class="n">on</span> <span class="n">Macros</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Actually</span><span class="p">,</span> <span class="n">this</span> <span class="n">latter</span> <span class="n">idea</span> <span class="n">brings</span> <span class="n">up</span> <span class="n">a</span> <span class="n">problem</span> <span class="n">with</span> <span class="n">the</span> <span class="n">explicit</span> <span class="n">list</span>
</span><span class='line'><span class="n">of</span> <span class="n">captured</span> <span class="n">variables</span> <span class="n">that</span> <span class="n">I</span> <span class="n">had</span> <span class="n">not</span> <span class="n">thought</span> <span class="n">of</span> <span class="n">before</span><span class="o">:</span> <span class="n">some</span> <span class="n">macros</span>
</span><span class='line'><span class="n">may</span> <span class="n">intentionally</span> <span class="n">inject</span> <span class="n">references</span> <span class="n">to</span> <span class="n">free</span> <span class="n">variables</span><span class="p">,</span> <span class="n">where</span> <span class="n">the</span>
</span><span class='line'><span class="n">injected</span> <span class="n">free</span> <span class="n">variables</span> <span class="n">are</span> <span class="n">not</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">part</span> <span class="n">of</span> <span class="n">the</span> <span class="n">public</span>
</span><span class='line'><span class="n">interface</span> <span class="n">of</span> <span class="n">the</span> <span class="n">macro</span> <span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.,</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">is</span> <span class="n">enforcing</span> <span class="n">some</span> <span class="n">protocol</span> <span class="n">of</span>
</span><span class='line'><span class="n">usage</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">variable</span> <span class="n">is</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">otherwise</span> <span class="n">private</span> <span class="n">to</span> <span class="n">the</span> <span class="n">module</span>
</span><span class='line'><span class="n">where</span> <span class="n">the</span> <span class="n">macro</span> <span class="n">is</span> <span class="n">defined</span><span class="p">).</span>  <span class="n">I</span> <span class="n">know</span> <span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">currently</span> <span class="n">have</span> <span class="n">macros</span>
</span><span class='line'><span class="n">exported</span> <span class="n">from</span> <span class="n">modules</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">thought</span> <span class="n">it</span> <span class="n">was</span> <span class="n">supposed</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">part</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'><span class="n">long</span> <span class="n">term</span> <span class="n">plans</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Do</span> <span class="n">we</span> <span class="n">intend</span> <span class="n">to</span> <span class="n">disallow</span> <span class="n">the</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">such</span> <span class="n">macros</span> <span class="n">within</span> <span class="n">copying</span> <span class="n">closures</span><span class="o">?&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Will</span> <span class="n">we</span> <span class="n">require</span> <span class="n">the</span> <span class="n">modules</span> <span class="n">to</span> <span class="n">expose</span> <span class="n">those</span> <span class="n">variable</span> <span class="n">names</span><span class="p">,</span> <span class="n">solely</span>
</span><span class='line'><span class="n">so</span> <span class="n">that</span> <span class="n">they</span> <span class="n">can</span> <span class="kr">be</span> <span class="n">included</span> <span class="n">on</span> <span class="n">the</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span><span class="o">?&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Or</span><span class="p">,</span> <span class="k">if</span> <span class="n">a</span> <span class="n">macro</span> <span class="n">could</span> <span class="n">query</span> <span class="n">an</span> <span class="n">expression</span> <span class="k">for</span> <span class="n">its</span> <span class="n">free</span> <span class="n">variables</span>
</span><span class='line'><span class="p">(</span><span class="n">where</span> <span class="n">even</span> <span class="n">module</span><span class="o">-</span><span class="n">private</span> <span class="n">identifiers</span> <span class="n">might</span> <span class="kr">be</span> <span class="n">included</span> <span class="n">on</span> <span class="n">such</span>
</span><span class='line'><span class="n">a</span> <span class="n">list</span><span class="p">),</span> <span class="n">that</span> <span class="n">might</span> <span class="n">help</span> <span class="n">impose</span> <span class="n">a</span> <span class="n">usage</span> <span class="n">discipline</span> <span class="n">that</span> <span class="n">would</span>
</span><span class='line'><span class="n">support</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">macro</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Or</span><span class="p">,</span> <span class="n">this</span> <span class="n">whole</span> <span class="n">example</span> <span class="n">might</span> <span class="n">serve</span> <span class="k">as</span> <span class="n">an</span> <span class="n">argument</span> <span class="k">for</span> <span class="n">keeping</span>
</span><span class='line'><span class="n">copying</span> <span class="n">closures</span> <span class="k">as</span> <span class="n">a</span> <span class="n">primitive</span> <span class="n">linguistic</span> <span class="n">construct</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Okay</span><span class="p">,</span> <span class="n">end</span> <span class="n">of</span> <span class="n">digression</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;more_followup_on_procs_and_fns&quot;</span><span class="o">&gt;</span><span class="n">More</span> <span class="n">followups</span> <span class="n">on</span> <span class="n">procs</span> <span class="n">and</span> <span class="n">fns</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">few</span> <span class="n">days</span> <span class="n">passed</span><span class="p">,</span> <span class="n">then</span> <span class="n">Niko</span> <span class="n">had</span> <span class="n">a</span> <span class="n">fourth</span> <span class="n">post</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">More</span> <span class="n">on</span> <span class="n">Fns</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">from</span> <span class="mi">2013</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mf">03.</span>
</span><span class='line'><span class="n">This</span> <span class="n">proposal</span> <span class="n">renamed</span> <span class="n">of</span> <span class="n">a</span> <span class="n">proposed</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Task</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Thunk</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">since</span>
</span><span class='line'><span class="n">Niko</span> <span class="n">felt</span> <span class="n">that</span> <span class="n">the</span> <span class="n">concept</span> <span class="n">at</span> <span class="n">hand</span> <span class="p">(</span><span class="n">an</span> <span class="n">encapsulated</span> <span class="n">function</span> <span class="n">and</span> <span class="n">the</span>
</span><span class='line'><span class="n">parameters</span> <span class="n">it</span> <span class="n">needs</span><span class="p">)</span> <span class="n">is</span> <span class="n">better</span> <span class="n">reflected</span> <span class="n">by</span> <span class="n">that</span> <span class="n">name</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">More</span> <span class="n">importantly</span><span class="p">,</span> <span class="n">given</span> <span class="n">the</span> <span class="n">immediately</span> <span class="n">preceding</span> <span class="n">digression</span><span class="p">,</span> <span class="n">the</span> <span class="n">form</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">would</span> <span class="n">automatically</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">variables</span>
</span><span class='line'><span class="n">instead</span> <span class="n">of</span> <span class="n">requiring</span> <span class="n">an</span> <span class="n">explicit</span> <span class="n">list</span><span class="p">;</span> <span class="n">this</span> <span class="n">sidesteps</span> <span class="n">the</span> <span class="n">whole</span> <span class="n">question</span>
</span><span class='line'><span class="n">of</span> <span class="n">how</span> <span class="n">to</span> <span class="n">handle</span> <span class="n">macros</span> <span class="n">that</span> <span class="n">inject</span> <span class="n">new</span> <span class="n">free</span> <span class="n">variable</span> <span class="n">references</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">There</span> <span class="n">is</span> <span class="n">then</span> <span class="n">much</span> <span class="n">discussion</span> <span class="n">of</span> <span class="n">whether</span> <span class="n">or</span> <span class="n">not</span> <span class="n">to</span> <span class="n">support</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">once</span> <span class="k">fn</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">s</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">I</span> <span class="n">won</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">summarize</span> <span class="n">here</span><span class="p">.</span>  <span class="n">The</span> <span class="n">important</span> <span class="n">detail</span> <span class="n">of</span> <span class="n">the</span> <span class="n">post</span> <span class="n">is</span>
</span><span class='line'><span class="n">that</span> <span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">necessarily</span> <span class="n">have</span> <span class="n">to</span> <span class="n">list</span> <span class="n">the</span> <span class="n">captured</span> <span class="n">variables</span>
</span><span class='line'><span class="n">explicitly</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">After</span> <span class="n">a</span> <span class="n">few</span> <span class="n">more</span> <span class="n">days</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">had</span> <span class="n">a</span> <span class="n">followup</span> <span class="n">on</span> <span class="n">the</span> <span class="n">related</span> <span class="n">topic</span> <span class="n">of</span>
</span><span class='line'><span class="n">dynamically</span> <span class="n">sized</span> <span class="n">types</span> <span class="p">(</span><span class="n">DST</span><span class="p">),</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/&quot;</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Reducing</span> <span class="n">DST</span> <span class="n">Annotation</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">from</span>
</span><span class='line'><span class="mi">2013</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mf">06.</span>  <span class="n">It</span> <span class="n">took</span> <span class="n">into</span> <span class="n">account</span> <span class="n">an</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/mozilla/rust/issues/6308#issuecomment-18880575&quot;</span><span class="o">&gt;</span><span class="n">investigation</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">by</span> <span class="n">Ben</span> <span class="n">Blum</span>
</span><span class='line'><span class="n">on</span> <span class="n">the</span> <span class="n">implications</span> <span class="n">of</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">trait</span> <span class="n">bound</span><span class="p">.</span>  <span class="n">This</span> <span class="n">led</span> <span class="n">to</span> <span class="n">Niko</span>
</span><span class='line'><span class="n">exploring</span> <span class="n">some</span> <span class="n">alternatives</span> <span class="n">to</span> <span class="n">adopting</span> <span class="n">DST</span> <span class="n">with</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">bound</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Abandon</span> <span class="n">DST</span> <span class="n">altogether</span><span class="o">:</span> <span class="n">Niko</span> <span class="n">summarizes</span> <span class="n">what</span> <span class="n">DST</span> <span class="n">still</span> <span class="n">buys</span> <span class="n">us</span><span class="p">,</span> <span class="n">but</span>
</span><span class='line'><span class="n">also</span> <span class="n">points</span> <span class="n">out</span> <span class="n">where</span> <span class="n">it</span> <span class="n">does</span> <span class="n">not</span> <span class="n">live</span> <span class="n">up</span> <span class="n">to</span> <span class="n">its</span> <span class="n">original</span> <span class="n">promises</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Make</span> <span class="k">type</span> <span class="n">parameters</span> <span class="n">default</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="n">adopt</span> <span class="n">a</span> <span class="n">different</span>
</span><span class='line'><span class="n">syntactic</span> <span class="n">mechanism</span> <span class="n">to</span> <span class="n">distinguish</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Unsized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">such</span> <span class="k">as</span>
</span><span class='line'><span class="n">a</span> <span class="n">keyword</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Use</span> <span class="n">some</span> <span class="n">sort</span> <span class="n">of</span> <span class="n">inference</span><span class="o">:</span> <span class="n">the</span> <span class="k">type</span><span class="o">-</span><span class="n">checker</span> <span class="n">can</span> <span class="kn">use</span> <span class="n">properties</span>
</span><span class='line'><span class="n">of</span> <span class="n">a</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">parameter</span> <span class="n">list</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">feedback</span>
</span><span class='line'><span class="n">on</span> <span class="n">whether</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">has</span> <span class="n">an</span> <span class="n">implicit</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Sized</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">bound</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">Niko</span> <span class="n">wonders</span> <span class="k">if</span> <span class="n">this</span> <span class="n">approach</span> <span class="n">is</span> <span class="n">too</span> <span class="n">clever</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">inclined</span> <span class="n">to</span>
</span><span class='line'> <span class="n">affirm</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;where_are_we&quot;</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">where</span> <span class="n">are</span> <span class="n">we</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">above</span> <span class="n">summarizes</span> <span class="n">the</span> <span class="n">series</span> <span class="n">of</span> <span class="n">blog</span> <span class="n">posts</span> <span class="n">from</span> <span class="n">Niko</span><span class="p">.</span>  <span class="n">I</span> <span class="n">had</span> <span class="n">hoped</span>
</span><span class='line'><span class="n">to</span> <span class="n">get</span> <span class="n">through</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">proposals</span> <span class="p">(</span><span class="n">and</span> <span class="n">maybe</span> <span class="n">also</span> <span class="n">the</span> <span class="n">team</span> <span class="n">meeting</span>
</span><span class='line'><span class="n">notes</span><span class="p">),</span> <span class="n">but</span> <span class="n">at</span> <span class="n">this</span> <span class="n">point</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">late</span> <span class="n">enough</span> <span class="k">in</span> <span class="n">the</span> <span class="n">day</span> <span class="n">and</span> <span class="n">this</span> <span class="n">post</span>
</span><span class='line'><span class="n">is</span> <span class="n">long</span> <span class="n">enough</span> <span class="n">that</span> <span class="n">I</span> <span class="n">think</span> <span class="n">I</span> <span class="n">will</span> <span class="n">stop</span> <span class="n">here</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">language</span> <span class="n">is</span> <span class="n">young</span><span class="p">,</span> <span class="n">and</span> <span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">Rust</span> <span class="n">novice</span><span class="p">.</span>  <span class="n">So</span><span class="p">,</span> <span class="n">grains</span> <span class="n">of</span> <span class="n">salt</span>
</span><span class='line'><span class="k">for</span> <span class="n">everyone</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">My</span> <span class="n">intuition</span> <span class="n">is</span> <span class="n">that</span> <span class="n">we</span> <span class="n">should</span> <span class="n">leave</span> <span class="k">in</span> <span class="n">copying</span> <span class="n">closures</span> <span class="k">in</span> <span class="n">some</span> <span class="n">form</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">The</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">expression</span> <span class="n">might</span> <span class="n">suffice</span><span class="p">,</span> <span class="n">but</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">not</span> <span class="n">yet</span>
</span><span class='line'><span class="n">convinced</span> <span class="n">that</span> <span class="n">I</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">satisfied</span> <span class="n">using</span> <span class="n">boxed</span> <span class="n">traits</span>
</span><span class='line'><span class="n">to</span> <span class="n">express</span> <span class="n">the</span> <span class="n">cases</span> <span class="n">that</span> <span class="n">need</span> <span class="n">input</span> <span class="n">arguments</span> <span class="p">(</span><span class="n">like</span> <span class="n">combinator</span>
</span><span class='line'><span class="n">libraries</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">am</span> <span class="n">not</span> <span class="n">thrilled</span> <span class="n">by</span> <span class="n">the</span> <span class="n">idea</span> <span class="n">of</span> <span class="n">writing</span> <span class="n">out</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">free</span>
</span><span class='line'><span class="n">variables</span><span class="p">.</span>  <span class="n">Of</span> <span class="n">course</span><span class="p">,</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="n">systems</span> <span class="n">programming</span> <span class="n">language</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">such</span> <span class="n">a</span> <span class="n">list</span> <span class="n">may</span> <span class="n">simply</span> <span class="kr">be</span> <span class="n">the</span> <span class="n">simplest</span> <span class="n">way</span> <span class="n">to</span> <span class="n">accomplish</span>
</span><span class='line'><span class="n">certain</span> <span class="n">goals</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">to</span> <span class="n">indicate</span> <span class="n">whether</span> <span class="n">a</span> <span class="n">referenced</span> <span class="n">value</span>
</span><span class='line'><span class="n">is</span> <span class="n">moved</span> <span class="n">or</span> <span class="n">copied</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">we</span> <span class="k">do</span> <span class="n">require</span> <span class="n">a</span> <span class="n">list</span> <span class="n">of</span> <span class="n">free</span> <span class="n">variables</span> <span class="k">in</span> <span class="n">our</span> <span class="n">copying</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">proc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;/&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">thunk</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;/</span><span class="n">etc</span><span class="p">,</span> <span class="n">please</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">the</span> <span class="n">question</span> <span class="n">of</span> <span class="n">free</span>
</span><span class='line'><span class="n">variables</span> <span class="n">injected</span> <span class="n">by</span> <span class="n">macro</span> <span class="n">invocations</span> <span class="n">is</span> <span class="n">addressed</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="k">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Designing</span> <span class="n">syntax</span> <span class="k">for</span> <span class="n">associated</span> <span class="n">items</span> <span class="k">in</span> <span class="n">Rust</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2013</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">22</span><span class="n">T14</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">02</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="n">http</span><span class="o">:</span><span class="c1">//blog.pnkfx.org/blog/2013/04/22/designing-syntax-for-associated-items-in-rust&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="k">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#background&quot;</span><span class="o">&gt;</span><span class="n">Background</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">Encoding</span> <span class="n">via</span> <span class="n">parameters</span> <span class="n">is</span> <span class="n">unpalatable</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#rustspec&quot;</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">-</span><span class="n">specific</span> <span class="n">issues</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#nikoposts&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">blog</span> <span class="n">posts</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#thinkbinding&quot;</span><span class="o">&gt;</span><span class="n">Simpler</span> <span class="n">syntax</span><span class="o">:</span> <span class="n">What</span> <span class="n">about</span> <span class="n">binding</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#insight&quot;</span><span class="o">&gt;</span><span class="n">Insight</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#proposal&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">proposed</span> <span class="n">syntax</span> <span class="k">for</span> <span class="n">associated</span> <span class="n">items</span> <span class="k">in</span> <span class="n">Rust</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#futurework&quot;</span><span class="o">&gt;</span><span class="n">What</span> <span class="n">the</span> <span class="n">proposal</span> <span class="n">does</span> <span class="n">not</span> <span class="n">cover</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Executive</span> <span class="n">summary</span><span class="o">:</span> <span class="k">if</span> <span class="n">you</span> <span class="n">don</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">want</span> <span class="n">or</span> <span class="n">need</span> <span class="n">the</span> <span class="n">background</span> <span class="n">information</span>
</span><span class='line'><span class="n">or</span> <span class="n">the</span> <span class="n">discussion</span> <span class="n">motivating</span> <span class="n">the</span> <span class="n">proposal</span><span class="p">,</span> <span class="n">then</span> <span class="n">just</span> <span class="n">jump</span>
</span><span class='line'><span class="n">straight</span> <span class="n">to</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#proposal&quot;</span><span class="o">&gt;</span><span class="n">proposal</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">itself</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="n">more</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;background&quot;</span><span class="o">&gt;</span><span class="n">Background</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Early</span> <span class="k">in</span> <span class="n">my</span> <span class="n">experimentation</span> <span class="n">with</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">I</span> <span class="n">thought</span> <span class="n">a</span> <span class="n">reasonable</span> <span class="n">exercise</span>
</span><span class='line'><span class="n">would</span> <span class="kr">be</span> <span class="n">to</span> <span class="n">take</span> <span class="n">the</span> <span class="n">simple</span> <span class="n">C</span><span class="o">++</span> <span class="n">programs</span> <span class="n">from</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.elementsofprogramming.com/&quot;</span><span class="o">&gt;</span><span class="n">Elements</span> <span class="n">of</span> <span class="n">Programming</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">Stepanov</span> <span class="n">and</span> <span class="n">McJones</span><span class="p">),</span> <span class="n">which</span> <span class="n">make</span> <span class="n">heavy</span> <span class="n">yet</span>
</span><span class='line'><span class="n">disciplined</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">abstraction</span> <span class="n">and</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">to</span> <span class="n">encode</span> <span class="n">various</span>
</span><span class='line'><span class="n">mathematical</span> <span class="n">concepts</span><span class="p">.</span>  <span class="n">The</span> <span class="n">early</span> <span class="n">chapters</span> <span class="n">of</span> <span class="n">the</span> <span class="n">book</span> <span class="kn">use</span> <span class="n">templates</span>
</span><span class='line'><span class="n">rather</span> <span class="n">than</span> <span class="n">classes</span> <span class="k">as</span> <span class="n">the</span> <span class="n">means</span> <span class="n">of</span> <span class="n">code</span> <span class="n">reuse</span><span class="p">,</span> <span class="n">so</span> <span class="n">translating</span> <span class="n">those</span>
</span><span class='line'><span class="n">examples</span> <span class="n">seemed</span> <span class="n">like</span> <span class="n">a</span> <span class="n">good</span> <span class="n">way</span> <span class="n">to</span> <span class="n">exercise</span> <span class="n">Rust</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">generic</span> <span class="k">type</span> <span class="n">and</span>
</span><span class='line'><span class="k">trait</span> <span class="n">systems</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">However</span><span class="p">,</span> <span class="n">almost</span> <span class="n">immediately</span> <span class="n">after</span> <span class="n">starting</span> <span class="n">the</span> <span class="n">experiment</span><span class="p">,</span> <span class="n">I</span> <span class="n">encountered</span>
</span><span class='line'><span class="n">a</span> <span class="n">problem</span><span class="o">:</span> <span class="n">code</span> <span class="n">that</span> <span class="n">makes</span> <span class="n">heavy</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">is</span> <span class="n">quite</span> <span class="n">likely</span>
</span><span class='line'><span class="n">to</span> <span class="kn">use</span> <span class="n">particular</span> <span class="n">features</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">templates</span> <span class="n">that</span> <span class="n">are</span> <span class="n">not</span> <span class="n">a</span> <span class="n">universal</span>
</span><span class='line'><span class="n">part</span> <span class="n">of</span> <span class="n">another</span> <span class="n">language</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">generic</span> <span class="k">type</span> <span class="n">system</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">particular</span><span class="p">,</span> <span class="n">the</span> <span class="n">code</span> <span class="n">from</span> <span class="n">Elements</span> <span class="n">of</span> <span class="n">Programming</span> <span class="p">(</span><span class="n">hereby</span>
</span><span class='line'><span class="n">abbreviated</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">EOP</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">in</span> <span class="n">this</span> <span class="n">post</span><span class="p">)</span> <span class="n">almost</span> <span class="n">immediately</span> <span class="n">makes</span> <span class="kn">use</span> <span class="n">of</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">such</span> <span class="k">as</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">definition</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">distance</span><span class="p">(</span><span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">x</span><span class="p">,</span> <span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Precondition: $y$ is reachable from $x$ under $f$</span>
</span><span class='line'>    <span class="n">typedef</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">N</span> <span class="n">n</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">N</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">interesting</span> <span class="n">thing</span> <span class="n">about</span> <span class="n">the</span> <span class="n">above</span> <span class="n">code</span> <span class="n">is</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">parameterized</span>
</span><span class='line'><span class="n">over</span> <span class="n">one</span> <span class="k">type</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">but</span> <span class="n">it</span> <span class="n">uses</span> <span class="n">other</span> <span class="k">type</span> <span class="n">expressions</span> <span class="n">within</span> <span class="n">the</span> <span class="n">body</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">procedure</span><span class="p">,</span> <span class="n">namely</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Domain</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="n">that</span><span class="p">,</span> <span class="n">given</span> <span class="n">a</span>
</span><span class='line'><span class="n">Transformation</span> <span class="p">(</span><span class="n">which</span> <span class="n">we</span> <span class="n">can</span> <span class="n">think</span> <span class="n">of</span> <span class="k">as</span> <span class="n">some</span> <span class="k">type</span> <span class="n">classifying</span> <span class="n">a</span>
</span><span class='line'><span class="n">set</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">functions</span> <span class="k">for</span> <span class="n">some</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">returns</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:</span> <span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="n">that</span><span class="p">,</span> <span class="n">given</span> <span class="n">a</span>
</span><span class='line'><span class="n">Transformation</span><span class="p">,</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">numeric</span> <span class="k">type</span> <span class="p">(</span><span class="n">think</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uint8_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uint32_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uintptr_t</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">BigNum</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">etc</span><span class="p">)</span> <span class="n">suitable</span> <span class="k">for</span> <span class="n">counting</span> <span class="n">the</span>
</span><span class='line'><span class="n">minimum</span> <span class="n">number</span> <span class="n">of</span> <span class="n">applications</span> <span class="n">of</span> <span class="n">the</span> <span class="n">transformation</span> <span class="n">necessary</span> <span class="n">to</span>
</span><span class='line'><span class="n">get</span> <span class="n">from</span> <span class="n">any</span> <span class="n">particular</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">value</span> <span class="n">to</span> <span class="n">some</span> <span class="n">other</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Operators</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">to</span> <span class="n">my</span> <span class="n">mind</span><span class="p">,</span> <span class="n">only</span> <span class="n">makes</span> <span class="n">sense</span> <span class="n">when</span> <span class="n">you</span>
</span><span class='line'> <span class="n">look</span> <span class="n">at</span> <span class="n">things</span> <span class="n">simultaneously</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">bytes</span> <span class="n">of</span> <span class="n">memory</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'> <span class="n">machine</span> <span class="n">and</span> <span class="n">also</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="kr">pure</span> <span class="n">abstract</span> <span class="n">mathematical</span> <span class="n">values</span><span class="p">.</span>  <span class="n">If</span>
</span><span class='line'> <span class="n">you</span> <span class="n">omit</span> <span class="n">either</span> <span class="n">perspective</span><span class="p">,</span> <span class="n">then</span> <span class="n">the</span> <span class="n">operator</span> <span class="n">appears</span> <span class="n">either</span>
</span><span class='line'> <span class="n">pointless</span> <span class="n">or</span> <span class="n">nonsensical</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">It</span> <span class="n">also</span> <span class="n">requires</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">obeys</span> <span class="n">a</span> <span class="n">constraint</span><span class="p">,</span> <span class="n">specified</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">requires</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">clause</span><span class="p">;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">going</span> <span class="n">to</span> <span class="n">conveniently</span> <span class="n">ignore</span> <span class="n">this</span> <span class="n">detail</span> <span class="k">for</span>
</span><span class='line'><span class="n">now</span><span class="p">.</span>  <span class="p">(</span><span class="n">The</span> <span class="n">C</span><span class="o">++</span> <span class="n">code</span> <span class="k">for</span> <span class="n">EOP</span> <span class="n">even</span> <span class="n">macro</span><span class="o">-</span><span class="n">expands</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">requires</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">into</span> <span class="n">whitespace</span><span class="p">,</span>
</span><span class='line'><span class="n">so</span> <span class="n">treating</span> <span class="n">them</span> <span class="k">as</span> <span class="n">helpful</span> <span class="n">comments</span> <span class="k">for</span> <span class="n">the</span> <span class="n">time</span> <span class="n">being</span> <span class="n">is</span> <span class="n">not</span> <span class="n">absurd</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Type</span> <span class="n">expressions</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">triple</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">assuming</span> <span class="n">three</span> <span class="k">type</span> <span class="n">expressions</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">are</span> <span class="n">the</span> <span class="n">bread</span><span class="o">-</span><span class="n">and</span><span class="o">-</span><span class="n">butter</span> <span class="n">of</span> <span class="n">any</span> <span class="n">generic</span> <span class="k">type</span>
</span><span class='line'><span class="n">system</span><span class="p">.</span>  <span class="n">But</span> <span class="n">these</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operators</span> <span class="n">are</span> <span class="n">interesting</span><span class="p">.</span>  <span class="n">How</span> <span class="n">are</span>
</span><span class='line'><span class="n">they</span> <span class="n">implemented</span><span class="o">?</span>  <span class="n">Here</span> <span class="n">is</span> <span class="n">a</span> <span class="n">snippet</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">type_functions</span><span class="p">.</span><span class="n">h</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="n">EOP</span> <span class="n">source</span> <span class="n">code</span> <span class="n">distribution</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="n">Transformation</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If all transformations on a type T have the same distance type,</span>
</span><span class='line'><span class="c1">// then DistanceType(T) is defined and returns that type.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For any fixed-size type T, there is an integral type of the same</span>
</span><span class='line'><span class="c1">// size that is a valid distance type for T.</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">define</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="n">typename</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="k">type</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">This</span> <span class="n">code</span> <span class="n">is</span> <span class="n">making</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">a</span> <span class="n">C</span><span class="o">-</span><span class="n">style</span> <span class="n">macro</span> <span class="n">to</span> <span class="n">define</span> <span class="n">a</span> <span class="n">easy</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">read</span>
</span><span class='line'><span class="n">interface</span> <span class="k">for</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operator</span> <span class="p">(</span><span class="n">the</span> <span class="n">subset</span> <span class="n">of</span> <span class="n">C</span><span class="o">++</span> <span class="n">used</span>
</span><span class='line'><span class="k">for</span> <span class="n">EOP</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">textbook</span> <span class="n">examples</span> <span class="n">is</span> <span class="n">meant</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">LL</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">but</span> <span class="n">the</span> <span class="n">implementation</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">operator</span> <span class="n">is</span> <span class="n">using</span> <span class="n">C</span><span class="o">++&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">template</span> <span class="n">system</span> <span class="n">to</span> <span class="n">define</span> <span class="n">a</span> <span class="n">partial</span>
</span><span class='line'><span class="n">mapping</span> <span class="n">from</span> <span class="n">types</span> <span class="n">to</span> <span class="p">(</span><span class="n">integral</span><span class="p">)</span> <span class="n">types</span><span class="p">.</span>  <span class="n">One</span> <span class="n">can</span> <span class="n">add</span> <span class="n">new</span> <span class="n">entries</span> <span class="n">to</span>
</span><span class='line'><span class="n">this</span> <span class="n">mapping</span> <span class="n">by</span> <span class="n">defining</span> <span class="n">a</span> <span class="n">new</span> <span class="n">template</span> <span class="n">instantiation</span> <span class="n">of</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">as</span> <span class="n">illustrated</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tests</span><span class="p">.</span><span class="n">h</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">the</span> <span class="n">following</span>
</span><span class='line'><span class="n">transformation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++&quot;</span><span class="o">&gt;</span><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">I</span><span class="p">,</span> <span class="n">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="nb">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">gen_orbit</span> <span class="c1">// transformation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gen_orbit_predicate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gen_orbit</span><span class="p">(</span><span class="n">I</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">N</span> <span class="n">h</span><span class="p">,</span> <span class="n">N</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Precondition: h &amp;lt; N(MaximumValue(I)) &amp;amp;&amp;amp; c &amp;lt; N(MaximumValue(I))</span>
</span><span class='line'>        <span class="c1">// Precondition: !negative(h) &amp;amp;&amp;amp; !negative(c)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">I</span> <span class="n">operator</span><span class="p">()</span> <span class="p">(</span><span class="n">I</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">successor</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">c</span><span class="p">))</span> <span class="n">x</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x_0</span> <span class="o">+</span> <span class="n">I</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">h</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">typename</span> <span class="n">I</span><span class="p">,</span> <span class="n">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">requires</span><span class="p">(</span><span class="nb">Integer</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">DistanceType</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">=</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">distance_type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">gen_orbit</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">typedef</span> <span class="n">N</span> <span class="k">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Thus</span><span class="p">,</span> <span class="n">the</span> <span class="n">definition</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">including</span> <span class="n">its</span> <span class="n">instantiation</span> <span class="n">of</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance_type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">collaborates</span> <span class="n">with</span> <span class="n">the</span> <span class="n">definition</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">to</span>
</span><span class='line'><span class="n">indicate</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">gen_orbit</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">I</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">N</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">As</span> <span class="n">one</span> <span class="n">adds</span> <span class="n">new</span>
</span><span class='line'><span class="n">structs</span> <span class="p">(</span><span class="n">classes</span><span class="p">)</span> <span class="n">representing</span> <span class="n">other</span> <span class="n">transformations</span><span class="p">,</span> <span class="n">one</span> <span class="n">is</span> <span class="n">expected</span>
</span><span class='line'><span class="n">to</span> <span class="n">instantiate</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance_type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="k">as</span> <span class="n">well</span> <span class="k">as</span> <span class="n">a</span> <span class="n">host</span> <span class="n">of</span> <span class="n">other</span>
</span><span class='line'><span class="n">template</span><span class="o">-</span><span class="n">abstracted</span> <span class="n">structs</span><span class="p">)</span> <span class="n">accordingly</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span><span class="p">,</span> <span class="n">what</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">the</span> <span class="n">problem</span> <span class="n">here</span><span class="o">?</span>  <span class="n">Well</span><span class="p">,</span> <span class="n">Rust</span><span class="p">,</span> <span class="n">much</span> <span class="n">like</span> <span class="n">Java</span><span class="p">,</span> <span class="n">does</span> <span class="n">not</span>
</span><span class='line'><span class="n">provide</span> <span class="n">a</span> <span class="n">way</span> <span class="n">to</span> <span class="n">define</span> <span class="n">general</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span> <span class="n">like</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="p">(</span><span class="n">F</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">One</span> <span class="n">can</span> <span class="n">try</span> <span class="n">to</span> <span class="n">work</span> <span class="n">around</span> <span class="n">this</span> <span class="n">via</span> <span class="n">a</span> <span class="n">code</span> <span class="n">transformation</span> <span class="n">and</span> <span class="n">lift</span> <span class="n">any</span>
</span><span class='line'><span class="k">type</span> <span class="n">of</span> <span class="n">interest</span> <span class="n">up</span> <span class="n">to</span> <span class="n">a</span> <span class="n">generic</span> <span class="n">class</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">,</span> <span class="n">like</span> <span class="n">this</span>
</span><span class='line'><span class="n">example</span> <span class="k">in</span> <span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">trait</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DISTANCETYPE</span><span class="p">,</span> <span class="n">DOMAIN</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">apply</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="bp">self</span><span class="p">,</span> <span class="n">elem</span><span class="o">:</span> <span class="n">DOMAIN</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">DOMAIN</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">or</span> <span class="k">if</span> <span class="n">you</span> <span class="n">prefer</span> <span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DISTANCETYPE</span><span class="p">,</span> <span class="n">DOMAIN</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DOMAIN</span> <span class="n">apply</span><span class="p">(</span><span class="n">DOMAIN</span> <span class="n">elem</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">At</span> <span class="n">first</span> <span class="n">glance</span><span class="p">,</span> <span class="n">one</span> <span class="n">might</span> <span class="n">think</span> <span class="n">this</span> <span class="n">does</span> <span class="n">not</span> <span class="n">look</span> <span class="n">so</span> <span class="n">bad</span><span class="p">;</span> <span class="n">after</span> <span class="n">all</span><span class="p">,</span>
</span><span class='line'><span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gen_orbit</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">similarly</span> <span class="n">was</span> <span class="n">parameterized</span> <span class="n">over</span> <span class="n">a</span> <span class="n">domain</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">I</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="n">a</span> <span class="n">distance</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">N</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">However</span><span class="p">,</span> <span class="n">the</span> <span class="n">problem</span> <span class="n">comes</span> <span class="n">when</span> <span class="n">one</span>
</span><span class='line'><span class="n">then</span> <span class="n">attempts</span> <span class="n">to</span> <span class="n">write</span> <span class="n">a</span> <span class="n">function</span> <span class="n">like</span> <span class="n">distance</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">x</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="o">???</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">???</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span> <span class="n">extends</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">???</span> <span class="n">distance</span><span class="p">(</span><span class="o">???</span> <span class="n">x</span><span class="p">,</span> <span class="o">???</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">What</span> <span class="k">do</span> <span class="n">we</span> <span class="n">put</span> <span class="k">in</span> <span class="k">for</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;???&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">portions</span><span class="o">?</span>  <span class="n">We</span> <span class="n">already</span> <span class="n">established</span> <span class="n">that</span>
</span><span class='line'><span class="n">we</span> <span class="k">do</span> <span class="n">not</span> <span class="n">have</span> <span class="n">general</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">operators</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">cannot</span> <span class="n">just</span>
</span><span class='line'><span class="n">derive</span> <span class="n">it</span> <span class="n">form</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">And</span> <span class="k">for</span> <span class="n">that</span> <span class="n">matter</span><span class="p">,</span> <span class="n">where</span> <span class="n">did</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">come</span> <span class="n">from</span><span class="o">?</span>  <span class="n">In</span> <span class="n">Rust</span> <span class="n">and</span> <span class="n">Java</span><span class="p">,</span> <span class="n">we</span> <span class="n">cannot</span> <span class="n">just</span> <span class="n">make</span> <span class="n">up</span> <span class="n">fresh</span> <span class="k">type</span>
</span><span class='line'><span class="n">variables</span> <span class="n">and</span> <span class="n">then</span> <span class="n">add</span> <span class="n">constraints</span> <span class="n">upon</span> <span class="n">them</span> <span class="n">after</span> <span class="n">the</span> <span class="n">fact</span><span class="p">.</span>  <span class="n">The</span> <span class="n">only</span>
</span><span class='line'><span class="n">option</span> <span class="n">is</span> <span class="n">to</span> <span class="n">make</span> <span class="n">any</span> <span class="k">type</span> <span class="n">we</span> <span class="n">wish</span> <span class="n">to</span> <span class="kn">use</span> <span class="n">an</span> <span class="n">additional</span> <span class="k">type</span> <span class="n">parameter</span>
</span><span class='line'><span class="n">to</span> <span class="n">the</span> <span class="n">generic</span> <span class="n">method</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rust</span>
</span><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">x</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">DT</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Java</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="p">,</span> <span class="n">F</span> <span class="n">extends</span> <span class="n">Transformation</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DT</span><span class="p">,</span> <span class="n">DOM</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DT</span> <span class="n">distance</span><span class="p">(</span><span class="n">DOM</span> <span class="n">x</span><span class="p">,</span> <span class="n">DOM</span> <span class="n">y</span><span class="p">,</span> <span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">Encoding</span> <span class="n">via</span> <span class="n">parameters</span> <span class="n">is</span> <span class="n">unpalatable</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">Rust</span> <span class="n">and</span> <span class="n">Java</span> <span class="n">results</span> <span class="n">above</span> <span class="n">are</span> <span class="n">made</span> <span class="n">barely</span> <span class="n">readable</span> <span class="n">by</span> <span class="n">using</span>
</span><span class='line'><span class="n">short</span> <span class="p">(</span><span class="n">obscure</span><span class="p">)</span> <span class="n">parameter</span> <span class="n">names</span><span class="p">.</span>  <span class="n">More</span> <span class="n">troubling</span> <span class="n">is</span> <span class="n">the</span> <span class="n">fact</span> <span class="n">that</span> <span class="n">this</span>
</span><span class='line'><span class="n">pollution</span> <span class="n">of</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span> <span class="n">will</span> <span class="n">bubble</span> <span class="n">transitively</span> <span class="n">backwards</span>
</span><span class='line'><span class="n">through</span> <span class="n">the</span> <span class="n">callers</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">until</span> <span class="n">we</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">point</span> <span class="n">where</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">F</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">is</span> <span class="n">instantiated</span><span class="p">.</span>  <span class="nb">Any</span> <span class="kn">use</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">needs</span> <span class="n">to</span> <span class="kr">be</span>
</span><span class='line'><span class="n">parameterized</span> <span class="k">in</span> <span class="n">the</span> <span class="n">same</span> <span class="n">manner</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">It</span> <span class="n">also</span> <span class="n">makes</span> <span class="n">explicit</span> <span class="n">instantiation</span> <span class="n">of</span> <span class="n">a</span> <span class="n">parameterized</span> <span class="n">method</span> <span class="n">or</span>
</span><span class='line'><span class="n">class</span> <span class="n">quite</span> <span class="n">painful</span><span class="p">.</span>  <span class="p">(</span><span class="n">This</span> <span class="n">pain</span> <span class="n">is</span> <span class="n">somewhat</span> <span class="n">alleviated</span> <span class="k">in</span> <span class="n">the</span>
</span><span class='line'><span class="n">presence</span> <span class="n">of</span> <span class="k">type</span><span class="o">-</span><span class="n">inference</span><span class="p">,</span> <span class="n">at</span> <span class="n">least</span> <span class="k">in</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">what</span> <span class="n">text</span> <span class="n">ends</span> <span class="n">up</span> <span class="k">in</span>
</span><span class='line'><span class="n">the</span> <span class="n">final</span> <span class="n">code</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">argue</span> <span class="n">that</span> <span class="n">that</span> <span class="k">in</span> <span class="n">this</span> <span class="n">case</span> <span class="n">the</span> <span class="n">pain</span> <span class="n">has</span> <span class="k">in</span>
</span><span class='line'><span class="n">fact</span> <span class="n">been</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">shifted</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;:</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">having</span> <span class="n">pain</span> <span class="k">while</span> <span class="n">reading</span> <span class="n">the</span> <span class="n">code</span><span class="p">,</span>
</span><span class='line'><span class="n">one</span> <span class="n">instead</span> <span class="n">suffers</span> <span class="n">when</span> <span class="n">trying</span> <span class="n">to</span> <span class="n">wade</span> <span class="n">through</span> <span class="k">type</span><span class="o">-</span><span class="n">errors</span> <span class="n">that</span>
</span><span class='line'><span class="n">inevitably</span> <span class="n">arise</span> <span class="n">during</span> <span class="n">the</span> <span class="n">compile</span><span class="o">-</span><span class="n">edit</span> <span class="n">cycle</span><span class="p">.)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">anything</span><span class="p">,</span> <span class="n">the</span> <span class="n">above</span> <span class="n">presentation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">understates</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">problem</span><span class="p">,</span> <span class="n">since</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">has</span> <span class="n">only</span> <span class="n">one</span> <span class="n">argument</span> <span class="k">in</span> <span class="n">its</span> <span class="n">domain</span><span class="p">,</span> <span class="n">and</span> <span class="n">its</span> <span class="n">codomain</span>
</span><span class='line'> <span class="n">is</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="n">its</span> <span class="n">domain</span><span class="p">;</span> <span class="n">many</span> <span class="n">real</span> <span class="n">traits</span> <span class="n">with</span> <span class="n">associated</span> <span class="n">types</span>
</span><span class='line'> <span class="n">are</span> <span class="n">each</span> <span class="n">likely</span> <span class="n">to</span> <span class="n">require</span> <span class="n">multiple</span> <span class="n">parameters</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">above</span> <span class="n">example</span> <span class="n">has</span> <span class="n">direct</span> <span class="n">uses</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">the</span> <span class="n">domain</span>
</span><span class='line'> <span class="n">and</span> <span class="n">codomain</span><span class="p">,</span> <span class="n">respectively</span><span class="p">,</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span>  <span class="n">However</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">every</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">client</span>
</span><span class='line'> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">will</span> <span class="kr">be</span> <span class="n">forced</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">parameterized</span> <span class="n">over</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="k">while</span> <span class="n">it</span> <span class="n">is</span> <span class="n">likely</span> <span class="n">that</span> <span class="n">any</span> <span class="n">client</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Transformation</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">likely</span>
</span><span class='line'> <span class="n">to</span> <span class="n">need</span> <span class="n">to</span> <span class="n">refer</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DOM</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">many</span> <span class="n">are</span> <span class="n">likely</span> <span class="n">to</span> <span class="n">not</span> <span class="n">require</span>
</span><span class='line'> <span class="kn">use</span> <span class="n">of</span> <span class="n">the</span> <span class="n">distance</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DT</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">their</span> <span class="n">public</span> <span class="n">interface</span> <span class="n">or</span> <span class="n">even</span> <span class="k">in</span>
</span><span class='line'> <span class="n">the</span> <span class="n">internals</span> <span class="n">of</span> <span class="n">their</span> <span class="n">code</span><span class="p">.</span>  <span class="n">Thus</span><span class="p">,</span> <span class="n">our</span> <span class="n">abstraction</span> <span class="n">is</span> <span class="n">not</span> <span class="n">very</span> <span class="n">abstract</span>
</span><span class='line'> <span class="n">at</span> <span class="n">all</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">As</span> <span class="n">a</span> <span class="n">follow</span><span class="o">-</span><span class="n">on</span> <span class="n">to</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">point</span><span class="o">:</span> <span class="n">We</span> <span class="n">are</span> <span class="n">only</span> <span class="n">illustrating</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">one</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">added</span> <span class="n">concept</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DistanceType</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">each</span> <span class="n">additional</span> <span class="n">concept</span>
</span><span class='line'> <span class="n">would</span> <span class="n">require</span> <span class="n">a</span> <span class="n">new</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">to</span> <span class="kr">be</span> <span class="n">threaded</span> <span class="n">through</span> <span class="n">the</span>
</span><span class='line'> <span class="n">parameter</span> <span class="n">lists</span> <span class="n">of</span> <span class="n">all</span> <span class="n">methods</span> <span class="n">and</span> <span class="n">classes</span><span class="p">.</span>  <span class="n">This</span> <span class="n">blows</span> <span class="n">up</span> <span class="n">to</span> <span class="n">an</span>
</span><span class='line'> <span class="n">unmaintainable</span> <span class="n">mess</span> <span class="n">fairly</span> <span class="n">quickly</span><span class="p">,</span> <span class="n">discouraging</span> <span class="kn">use</span> <span class="n">of</span> <span class="n">generics</span>
</span><span class='line'> <span class="n">to</span> <span class="n">define</span> <span class="n">these</span> <span class="n">abstractions</span> <span class="p">(</span><span class="n">and</span> <span class="n">instead</span> <span class="n">relying</span> <span class="n">on</span>
</span><span class='line'> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">separate</span> <span class="n">class</span><span class="o">-</span><span class="n">hierarchies</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;rustspec&quot;</span><span class="o">&gt;</span><span class="n">Rust</span><span class="o">-</span><span class="n">specific</span> <span class="n">issues</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">encountered</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">while</span> <span class="n">porting</span> <span class="n">EOP</span> <span class="n">code</span> <span class="n">to</span> <span class="n">Rust</span><span class="p">.</span>  <span class="n">After</span>
</span><span class='line'><span class="n">wrestling</span> <span class="n">with</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">lists</span> <span class="k">for</span> <span class="n">a</span> <span class="k">while</span><span class="p">,</span> <span class="n">I</span> <span class="n">eventually</span>
</span><span class='line'><span class="n">wised</span> <span class="n">up</span> <span class="n">and</span> <span class="n">asked</span> <span class="n">on</span> <span class="n">the</span> <span class="err">#</span><span class="n">rust</span> <span class="n">IRC</span> <span class="n">channel</span> <span class="k">if</span> <span class="n">there</span> <span class="n">was</span> <span class="n">a</span> <span class="n">better</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span>  <span class="n">Tim</span> <span class="n">Chevalier</span> <span class="n">informed</span> <span class="n">me</span> <span class="n">of</span> <span class="n">the</span> <span class="n">relevant</span> <span class="n">terminology</span><span class="o">:</span>
</span><span class='line'><span class="n">the</span> <span class="n">feature</span> <span class="n">I</span> <span class="n">want</span> <span class="n">is</span> <span class="n">called</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span> <span class="n">access</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">(</span><span class="n">or</span> <span class="n">often</span> <span class="n">just</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="n">An</span> <span class="n">associated</span> <span class="k">type</span> <span class="n">specifies</span> <span class="n">a</span> <span class="n">mapping</span> <span class="n">from</span> <span class="n">some</span> <span class="k">type</span> <span class="n">to</span> <span class="n">another</span> <span class="k">type</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Associated</span> <span class="k">type</span> <span class="n">access</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">is</span> <span class="n">listed</span> <span class="k">as</span> <span class="n">one</span> <span class="n">of</span> <span class="n">eight</span> <span class="n">properties</span> <span class="n">considered</span> <span class="n">important</span> <span class="k">in</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://osl.iu.edu/publications/prints/2003/comparing_generic_programming03.pdf&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">comparative</span> <span class="n">study</span> <span class="n">of</span> <span class="n">language</span> <span class="n">support</span> <span class="k">for</span> <span class="n">generic</span> <span class="n">programming</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">Garcia</span> <span class="n">et</span> <span class="n">al</span><span class="p">.,</span> <span class="mi">2003</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://dl.acm.org/citation.cfm?id=949317&quot;</span><span class="o">&gt;</span><span class="n">ACM</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">).</span>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">found</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#encodingunpalatable&quot;</span><span class="o">&gt;</span><span class="n">the</span> <span class="n">argument</span> <span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">unconvincing</span><span class="p">,</span>
</span><span class='line'><span class="n">you</span> <span class="n">should</span> <span class="n">read</span> <span class="n">the</span> <span class="n">Garcia</span> <span class="n">paper</span> <span class="k">for</span> <span class="n">a</span> <span class="n">completely</span> <span class="n">different</span> <span class="n">example</span> <span class="n">motivated</span> <span class="n">by</span>
</span><span class='line'><span class="n">a</span> <span class="n">Graph</span> <span class="n">abstraction</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">After</span> <span class="n">I</span> <span class="n">read</span> <span class="n">the</span> <span class="n">Garcia</span> <span class="n">paper</span><span class="p">,</span> <span class="n">I</span> <span class="n">promptly</span> <span class="n">filed</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/mozilla/rust/issues/5033&quot;</span><span class="o">&gt;</span><span class="n">an</span> <span class="n">RFC</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">Rust</span> <span class="n">github</span> <span class="n">repository</span> <span class="n">requesting</span> <span class="n">support</span> <span class="k">for</span> <span class="n">Associated</span> <span class="n">Type</span>
</span><span class='line'><span class="n">Synonyms</span><span class="p">.</span>  <span class="n">After</span> <span class="n">this</span><span class="p">,</span> <span class="n">I</span> <span class="n">had</span> <span class="n">several</span> <span class="n">discussions</span> <span class="n">with</span> <span class="n">Niko</span> <span class="n">Matsakis</span><span class="p">,</span>
</span><span class='line'><span class="n">both</span> <span class="n">over</span> <span class="n">IRC</span> <span class="n">and</span> <span class="k">in</span> <span class="n">person</span><span class="p">,</span> <span class="n">on</span> <span class="n">the</span> <span class="n">problems</span> <span class="n">that</span> <span class="n">associated</span> <span class="n">types</span>
</span><span class='line'><span class="n">present</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;nikoposts&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">blog</span> <span class="n">posts</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">see</span> <span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">thorough</span> <span class="n">overview</span> <span class="n">of</span> <span class="n">the</span> <span class="n">matter</span><span class="p">,</span>
</span><span class='line'><span class="n">including</span> <span class="n">his</span> <span class="n">natural</span> <span class="n">generalization</span> <span class="n">of</span> <span class="n">the</span> <span class="n">topic</span> <span class="n">from</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span>
</span><span class='line'><span class="n">types</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">items</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">on</span> <span class="n">his</span> <span class="n">pair</span> <span class="n">of</span> <span class="n">blog</span> <span class="n">posts</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/02/associated-items/&quot;</span><span class="o">&gt;</span><span class="n">part</span>
</span><span class='line'><span class="n">I</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/&quot;</span><span class="o">&gt;</span><span class="n">part</span> <span class="n">II</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">).</span>  <span class="n">The</span> <span class="n">generalization</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">associated</span> <span class="n">items</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">enables</span> <span class="n">one</span> <span class="n">to</span> <span class="n">define</span><span class="p">,</span> <span class="k">in</span> <span class="n">addition</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span> <span class="k">as</span>
</span><span class='line'><span class="n">illustrated</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#background&quot;</span><span class="o">&gt;</span><span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">also</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">function</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">mappings</span> <span class="p">(</span><span class="n">called</span> <span class="k">in</span> <span class="n">some</span> <span class="n">languages</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="k">static</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">functions</span><span class="p">)</span> <span class="n">and</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">constant</span><span class="p">)</span> <span class="n">value</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">mappings</span><span class="p">,</span> <span class="n">which</span> <span class="n">may</span> <span class="n">enable</span> <span class="n">certain</span> <span class="n">interesting</span>
</span><span class='line'><span class="n">coding</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">allowing</span> <span class="n">a</span> <span class="k">type</span> <span class="n">representing</span> <span class="n">a</span> <span class="n">vector</span> <span class="k">in</span> <span class="n">a</span>
</span><span class='line'><span class="n">multi</span><span class="o">-</span><span class="n">dimensional</span> <span class="n">space</span> <span class="n">to</span> <span class="n">state</span><span class="p">,</span> <span class="n">statically</span><span class="p">,</span> <span class="n">how</span> <span class="n">many</span> <span class="n">dimensions</span>
</span><span class='line'><span class="n">it</span> <span class="n">carries</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">following</span> <span class="n">are</span> <span class="n">the</span> <span class="n">specific</span> <span class="n">points</span> <span class="n">that</span> <span class="n">Niko</span> <span class="n">makes</span> <span class="k">in</span> <span class="n">his</span> <span class="n">posts</span> <span class="p">(</span><span class="n">some</span> <span class="n">of</span>
</span><span class='line'><span class="n">are</span> <span class="n">just</span> <span class="n">pointing</span> <span class="n">out</span> <span class="n">artifacts</span> <span class="n">of</span> <span class="n">current</span> <span class="n">Rust</span> <span class="n">language</span> <span class="n">syntax</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Current</span> <span class="n">Rust</span> <span class="n">syntax</span> <span class="n">focuses</span> <span class="n">on</span> <span class="n">deriving</span> <span class="n">associated</span> <span class="n">functions</span> <span class="n">from</span> <span class="n">traits</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rust</span> <span class="n">does</span> <span class="n">not</span> <span class="n">currently</span> <span class="n">offer</span> <span class="n">general</span> <span class="n">associated</span> <span class="n">items</span><span class="p">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">does</span>
</span><span class='line'><span class="n">offer</span> <span class="n">a</span> <span class="n">kind</span> <span class="n">of</span> <span class="n">associated</span> <span class="n">function</span> <span class="n">access</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">a</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">defines</span> <span class="n">a</span> <span class="n">function</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">that</span> <span class="n">returns</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Self</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">which</span> <span class="n">means</span>
</span><span class='line'><span class="n">that</span> <span class="n">implementations</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">are</span> <span class="n">obligated</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">an</span> <span class="n">implementation</span>
</span><span class='line'><span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">and</span> <span class="n">one</span> <span class="n">has</span> <span class="n">a</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">implementing</span> <span class="n">that</span> <span class="k">trait</span><span class="p">,</span> <span class="n">then</span> <span class="n">one</span> <span class="n">can</span>
</span><span class='line'><span class="n">derive</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="k">in</span> <span class="n">current</span> <span class="n">Rust</span> <span class="n">syntax</span><span class="p">,</span> <span class="n">one</span> <span class="n">does</span> <span class="n">not</span> <span class="n">write</span> <span class="n">this</span> <span class="n">derivation</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">as</span> <span class="n">something</span> <span class="n">attached</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">instead</span><span class="p">,</span> <span class="n">one</span> <span class="n">writes</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="n">and</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">responsible</span> <span class="k">for</span> <span class="n">inferring</span> <span class="n">which</span> <span class="n">implementation</span> <span class="n">of</span>
</span><span class='line'><span class="n">the</span> <span class="n">function</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">one</span> <span class="n">is</span> <span class="n">referring</span> <span class="n">to</span><span class="p">,</span> <span class="n">by</span> <span class="n">using</span> <span class="k">type</span><span class="o">-</span><span class="n">inference</span> <span class="n">on</span> <span class="n">the</span>
</span><span class='line'><span class="n">context</span> <span class="n">of</span> <span class="n">the</span> <span class="n">invocation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">(..)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">to</span> <span class="n">determine</span> <span class="n">that</span> <span class="n">the</span> <span class="k">return</span> <span class="k">type</span>
</span><span class='line'><span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">must</span> <span class="kr">be</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">and</span> <span class="n">thus</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">in</span> <span class="n">question</span> <span class="n">must</span> <span class="kr">be</span> <span class="n">the</span> <span class="n">one</span> <span class="n">that</span>
</span><span class='line'><span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">implements</span> <span class="n">to</span> <span class="n">satisfy</span> <span class="n">the</span> <span class="n">obligation</span> <span class="n">established</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;nikoenctt1&quot;</span><span class="o">&gt;</span><span class="n">Resolving</span> <span class="n">ambiguities</span> <span class="k">in</span> <span class="n">general</span> <span class="n">implies</span> <span class="n">you</span> <span class="n">need</span> <span class="n">both</span> <span class="n">the</span> <span class="k">trait</span> <span class="n">and</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">choice</span> <span class="n">of</span> <span class="n">deriving</span> <span class="n">a</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">implementation</span> <span class="n">from</span> <span class="n">the</span> <span class="k">trait</span>
</span><span class='line'><span class="n">rather</span> <span class="n">than</span> <span class="n">the</span> <span class="k">type</span> <span class="n">is</span> <span class="n">understandable</span> <span class="n">when</span> <span class="n">one</span> <span class="n">considers</span> <span class="n">that</span> <span class="n">a</span>
</span><span class='line'><span class="n">software</span> <span class="n">system</span> <span class="n">may</span> <span class="n">have</span> <span class="n">multiple</span> <span class="n">traits</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">U</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">that</span> <span class="n">all</span>
</span><span class='line'><span class="n">define</span> <span class="n">a</span> <span class="n">function</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="n">name</span> <span class="p">(</span><span class="n">say</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">and</span> <span class="n">a</span> <span class="k">type</span> <span class="n">may</span> <span class="kr">be</span>
</span><span class='line'><span class="n">specified</span> <span class="k">as</span> <span class="n">implementing</span> <span class="n">more</span> <span class="n">than</span> <span class="n">one</span> <span class="n">of</span> <span class="n">these</span> <span class="n">traits</span> <span class="k">in</span> <span class="n">a</span> <span class="n">single</span>
</span><span class='line'><span class="n">piece</span> <span class="n">of</span> <span class="n">code</span><span class="p">.</span>  <span class="p">(</span><span class="n">It</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">anti</span><span class="o">-</span><span class="n">modular</span> <span class="n">to</span> <span class="n">require</span> <span class="n">every</span> <span class="k">trait</span> <span class="n">to</span>
</span><span class='line'><span class="n">choose</span> <span class="n">globally</span> <span class="n">unique</span> <span class="n">names</span> <span class="k">for</span> <span class="n">its</span> <span class="n">set</span> <span class="n">of</span> <span class="n">associated</span> <span class="n">functions</span><span class="p">).</span>  <span class="n">So</span>
</span><span class='line'><span class="n">to</span> <span class="n">handle</span> <span class="n">this</span> <span class="n">case</span><span class="p">,</span> <span class="n">one</span> <span class="n">must</span> <span class="n">provide</span> <span class="n">some</span> <span class="n">way</span> <span class="n">to</span> <span class="n">disambiguate</span> <span class="n">which</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">being</span> <span class="n">referenced</span><span class="p">.</span>  <span class="n">Rust</span> <span class="n">did</span> <span class="n">so</span> <span class="n">by</span> <span class="n">making</span> <span class="n">the</span> <span class="k">trait</span> <span class="n">expression</span>
</span><span class='line'><span class="n">part</span> <span class="n">of</span> <span class="n">the</span> <span class="n">invocation</span> <span class="n">syntax</span><span class="p">.</span>  <span class="n">Niko</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="k">if</span> <span class="n">one</span> <span class="n">switches</span>
</span><span class='line'><span class="n">to</span> <span class="n">a</span> <span class="n">syntax</span> <span class="n">where</span> <span class="n">one</span> <span class="n">derives</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">the</span> <span class="k">type</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">then</span> <span class="n">one</span> <span class="n">must</span> <span class="n">tackle</span> <span class="n">this</span> <span class="n">problem</span> <span class="k">in</span>
</span><span class='line'><span class="n">some</span> <span class="n">manner</span><span class="p">;</span> <span class="k">in</span> <span class="n">his</span> <span class="n">first</span> <span class="n">blog</span> <span class="n">post</span><span class="p">,</span> <span class="n">he</span> <span class="n">suggests</span> <span class="n">doing</span> <span class="n">so</span> <span class="n">by</span> <span class="n">allowing</span>
</span><span class='line'><span class="n">one</span> <span class="n">to</span> <span class="n">encode</span> <span class="n">both</span> <span class="n">the</span> <span class="k">type</span> <span class="n">and</span> <span class="n">the</span> <span class="k">trait</span> <span class="k">in</span> <span class="n">the</span> <span class="n">referencing</span> <span class="n">syntax</span>
</span><span class='line'><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">or</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">U</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">dislike</span> <span class="n">this</span> <span class="n">syntax</span> <span class="n">because</span> <span class="n">I</span> <span class="n">think</span> <span class="n">it</span>
</span><span class='line'><span class="n">would</span> <span class="kr">be</span> <span class="n">confusing</span> <span class="k">for</span> <span class="n">a</span> <span class="n">reader</span> <span class="n">to</span> <span class="n">comprehend</span> <span class="n">the</span> <span class="n">distinct</span> <span class="n">roles</span> <span class="n">of</span>
</span><span class='line'><span class="n">the</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;::&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="n">path</span> <span class="n">operator</span><span class="p">,</span> <span class="n">both</span> <span class="n">when</span> <span class="n">learning</span> <span class="n">the</span> <span class="n">language</span>
</span><span class='line'><span class="n">and</span> <span class="n">when</span> <span class="n">casually</span> <span class="n">skimming</span> <span class="n">Rust</span> <span class="n">code</span> <span class="k">in</span> <span class="n">general</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Rust</span> <span class="k">type</span> <span class="n">expressions</span> <span class="k">do</span> <span class="n">not</span> <span class="n">naturally</span> <span class="n">fit</span> <span class="n">into</span> <span class="n">Rust</span> <span class="n">path</span> <span class="n">expressions</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Niko</span> <span class="n">also</span> <span class="n">points</span> <span class="n">out</span> <span class="n">that</span> <span class="n">when</span> <span class="n">one</span> <span class="n">wants</span> <span class="n">to</span> <span class="n">write</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">where</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span>
</span><span class='line'><span class="n">a</span> <span class="k">type</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">not</span> <span class="n">always</span> <span class="n">the</span> <span class="n">case</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="k">type</span> <span class="n">parameter</span><span class="p">;</span> <span class="n">it</span>
</span><span class='line'><span class="n">could</span> <span class="kr">be</span> <span class="n">a</span> <span class="n">concrete</span> <span class="k">type</span> <span class="n">known</span> <span class="n">to</span> <span class="n">the</span> <span class="n">programmer</span><span class="p">,</span> <span class="n">such</span> <span class="k">as</span> <span class="n">the</span> <span class="k">type</span> <span class="n">of</span>
</span><span class='line'><span class="n">owned</span> <span class="n">vecs</span> <span class="n">of</span> <span class="n">ints</span><span class="p">,</span> <span class="n">denoted</span> <span class="n">by</span> <span class="n">the</span> <span class="k">type</span> <span class="n">expression</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;</span><span class="err">`</span><span class="o">~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="err">`</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="n">So</span> <span class="n">it</span> <span class="n">seems</span> <span class="n">natural</span> <span class="n">to</span> <span class="n">want</span> <span class="n">to</span> <span class="n">substitute</span> <span class="n">such</span>
</span><span class='line'><span class="n">a</span> <span class="k">type</span> <span class="n">expression</span> <span class="k">for</span> <span class="p">(</span><span class="n">the</span> <span class="n">meta</span><span class="o">-</span><span class="n">variable</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="n">the</span> <span class="n">syntax</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">not</span> <span class="n">legal</span><span class="p">,</span> <span class="n">because</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span>
</span><span class='line'><span class="n">not</span> <span class="n">a</span> <span class="n">legitimate</span> <span class="n">path</span> <span class="n">component</span><span class="p">.</span>  <span class="n">Niko</span> <span class="n">describes</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">of</span>
</span><span class='line'><span class="n">work</span><span class="o">-</span><span class="n">arounds</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.</span> <span class="n">allowing</span> <span class="n">one</span> <span class="n">to</span> <span class="n">wrap</span> <span class="n">a</span> <span class="k">type</span> <span class="n">expression</span> <span class="n">that</span> <span class="n">appears</span>
</span><span class='line'><span class="k">in</span> <span class="n">a</span> <span class="n">path</span> <span class="n">expression</span> <span class="n">with</span> <span class="n">brackets</span><span class="p">,</span> <span class="n">yielding</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">~</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">All</span> <span class="n">of</span> <span class="n">the</span> <span class="n">work</span><span class="o">-</span><span class="n">arounds</span> <span class="n">presented</span> <span class="n">by</span> <span class="n">Niko</span> <span class="k">do</span> <span class="n">require</span> <span class="n">allowing</span>
</span><span class='line'><span class="n">arbitrary</span> <span class="k">type</span><span class="o">-</span><span class="n">expressions</span> <span class="k">in</span> <span class="n">some</span> <span class="n">form</span> <span class="n">to</span> <span class="n">appear</span> <span class="k">as</span> <span class="n">a</span> <span class="n">sub</span><span class="o">-</span><span class="n">expression</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="n">would</span> <span class="n">complicate</span> <span class="n">the</span> <span class="n">parser</span> <span class="k">in</span> <span class="n">the</span> <span class="n">Rust</span> <span class="n">compiler</span> <span class="p">(</span><span class="n">there</span> <span class="n">has</span> <span class="n">been</span>
</span><span class='line'><span class="n">a</span> <span class="n">slight</span> <span class="n">push</span> <span class="n">to</span> <span class="n">try</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">simplify</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">path</span> <span class="n">expression</span> <span class="n">syntax</span><span class="p">,</span> <span class="n">which</span>
</span><span class='line'><span class="n">this</span> <span class="n">would</span> <span class="n">conflict</span> <span class="n">with</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Further</span> <span class="n">syntactic</span> <span class="n">exploration</span> <span class="n">of</span> <span class="n">encoding</span> <span class="k">trait</span> <span class="n">and</span> <span class="k">type</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">his</span> <span class="n">second</span> <span class="n">blog</span> <span class="n">post</span><span class="p">,</span> <span class="n">Niko</span> <span class="n">provides</span> <span class="n">some</span> <span class="n">alternative</span> <span class="n">syntactic</span> <span class="n">forms</span>
</span><span class='line'><span class="k">for</span> <span class="n">resolution</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">::</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">as</span> <span class="n">described</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#nikoenctt1&quot;</span><span class="o">&gt;</span><span class="n">above</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="o">::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">X</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">from</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Functional</span><span class="o">-</span><span class="n">style</span> <span class="n">name</span> <span class="n">resolution</span> <span class="p">(</span><span class="n">take</span> <span class="mi">1</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span> <span class="n">here</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">added</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">list</span>
</span><span class='line'><span class="p">(</span><span class="k">if</span> <span class="n">any</span><span class="p">)</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">so</span> <span class="n">now</span> <span class="n">we</span> <span class="n">get</span> <span class="n">to</span> <span class="n">retain</span> <span class="n">syntactic</span> <span class="n">backwards</span>
</span><span class='line'><span class="n">compatibility</span><span class="p">.</span>  <span class="n">Since</span> <span class="n">Rust</span> <span class="n">allows</span> <span class="n">one</span> <span class="n">to</span> <span class="n">omit</span> <span class="n">the</span> <span class="n">explicit</span> <span class="k">type</span>
</span><span class='line'><span class="n">instantiation</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">X</span><span class="p">,</span> <span class="p">...</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">when</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">able</span> <span class="n">to</span> <span class="n">infer</span>
</span><span class='line'><span class="n">the</span> <span class="n">instantiation</span><span class="p">,</span> <span class="n">this</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">a</span> <span class="n">natural</span> <span class="n">way</span> <span class="n">to</span> <span class="k">continue</span>
</span><span class='line'><span class="n">doing</span> <span class="k">return</span><span class="o">-</span><span class="k">type</span> <span class="n">based</span> <span class="n">inference</span> <span class="n">of</span> <span class="n">the</span> <span class="n">desired</span> <span class="k">type</span><span class="p">,</span> <span class="n">the</span> <span class="n">way</span>
</span><span class='line'><span class="n">it</span> <span class="n">does</span> <span class="n">already</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">::</span><span class="n">f</span><span class="o">::&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">for</span> <span class="n">X</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">as</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">distinguishing</span> <span class="n">the</span> <span class="n">synthetic</span> <span class="n">parameter</span>
</span><span class='line'><span class="n">from</span> <span class="n">other</span> <span class="n">entries</span> <span class="n">on</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">have</span> <span class="n">already</span> <span class="n">stated</span> <span class="n">my</span> <span class="n">problems</span> <span class="n">with</span> <span class="n">the</span> <span class="n">first</span> <span class="n">option</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">the</span> <span class="n">second</span> <span class="n">option</span><span class="p">,</span> <span class="n">I</span> <span class="n">anticipate</span> <span class="n">being</span> <span class="n">personally</span> <span class="n">confused</span> <span class="n">by</span> <span class="n">the</span>
</span><span class='line'><span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">being</span> <span class="n">injected</span> <span class="n">into</span> <span class="n">the</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span>
</span><span class='line'><span class="n">I</span> <span class="n">understand</span> <span class="n">the</span> <span class="n">appeal</span> <span class="n">of</span> <span class="n">enabling</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">to</span> <span class="k">continue</span> <span class="n">doing</span>
</span><span class='line'><span class="n">heavy</span> <span class="n">lifting</span> <span class="n">and</span> <span class="n">lighten</span> <span class="n">the</span> <span class="n">programmers</span> <span class="n">syntactic</span> <span class="n">load</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.smallcultfollowing.com/babysteps/blog/2013/04/03/associated-items-continued/&quot;</span><span class="o">&gt;</span><span class="n">Niko</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span>
</span><span class='line'><span class="n">post</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">does</span> <span class="n">a</span> <span class="n">good</span> <span class="n">job</span> <span class="n">of</span> <span class="n">laying</span> <span class="n">out</span> <span class="n">some</span> <span class="n">of</span> <span class="n">the</span> <span class="n">unexpected</span>
</span><span class='line'><span class="n">interactions</span> <span class="n">of</span> <span class="n">the</span> <span class="n">synthetic</span> <span class="k">type</span> <span class="n">parameter</span> <span class="n">with</span> <span class="n">the</span> <span class="n">other</span> <span class="n">forms</span> <span class="n">of</span>
</span><span class='line'><span class="n">generic</span> <span class="k">type</span> <span class="n">parameterization</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">third</span> <span class="n">option</span> <span class="n">would</span> <span class="n">reduce</span> <span class="n">confusion</span> <span class="n">somewhat</span><span class="p">,</span> <span class="n">since</span> <span class="n">the</span>
</span><span class='line'><span class="n">synthetic</span> <span class="n">parameter</span> <span class="n">would</span> <span class="n">receive</span> <span class="n">special</span> <span class="n">attention</span> <span class="n">at</span> <span class="n">points</span> <span class="n">of</span> <span class="k">type</span>
</span><span class='line'><span class="n">instantiation</span><span class="p">,</span> <span class="n">but</span> <span class="n">I</span> <span class="n">still</span> <span class="n">think</span> <span class="n">it</span> <span class="n">is</span> <span class="n">an</span> <span class="n">abuse</span> <span class="n">of</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">list</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;thinkbinding&quot;</span><span class="o">&gt;</span><span class="n">Simpler</span> <span class="n">syntax</span><span class="o">:</span> <span class="n">What</span> <span class="n">about</span> <span class="n">binding</span><span class="o">?&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">I</span> <span class="n">set</span> <span class="n">about</span> <span class="n">trying</span> <span class="n">to</span> <span class="n">come</span> <span class="n">up</span> <span class="n">with</span> <span class="n">another</span> <span class="n">syntactic</span> <span class="n">form</span>
</span><span class='line'><span class="k">for</span> <span class="n">associated</span> <span class="n">item</span> <span class="n">access</span><span class="p">.</span>  <span class="n">My</span> <span class="n">primary</span> <span class="n">focus</span> <span class="n">initially</span> <span class="n">was</span><span class="o">:</span>
</span><span class='line'><span class="n">all</span> <span class="n">of</span> <span class="n">these</span> <span class="n">examples</span> <span class="n">would</span> <span class="kr">be</span> <span class="n">so</span> <span class="n">much</span> <span class="n">simpler</span><span class="p">,</span> <span class="n">to</span> <span class="n">my</span> <span class="n">mind</span><span class="p">,</span>
</span><span class='line'><span class="k">if</span> <span class="n">we</span> <span class="n">were</span> <span class="n">able</span> <span class="n">to</span> <span class="n">go</span> <span class="n">back</span> <span class="n">to</span> <span class="n">using</span> <span class="n">a</span> <span class="n">single</span> <span class="n">identifier</span>
</span><span class='line'><span class="k">for</span> <span class="n">the</span> <span class="n">relevant</span> <span class="n">path</span> <span class="n">component</span> <span class="k">in</span> <span class="n">the</span> <span class="n">referencing</span> <span class="n">form</span><span class="p">,</span>
</span><span class='line'><span class="n">the</span> <span class="n">way</span> <span class="n">that</span> <span class="n">C</span><span class="o">++</span> <span class="n">uses</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">How</span> <span class="n">can</span> <span class="n">Rust</span> <span class="n">make</span> <span class="n">its</span> <span class="n">own</span> <span class="n">analogous</span> <span class="o">&lt;</span><span class="n">nobr</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">::</span><span class="n">f</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">nobr</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">the</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">R</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">is</span> <span class="k">for</span> <span class="n">Rust</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Of</span> <span class="n">course</span><span class="p">,</span> <span class="n">we</span> <span class="n">have</span> <span class="n">already</span> <span class="n">covered</span> <span class="n">that</span> <span class="n">this</span> <span class="n">will</span> <span class="kr">be</span> <span class="n">ambiguous</span> <span class="k">if</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">mere</span> <span class="k">type</span> <span class="p">(</span><span class="n">and</span> <span class="n">it</span> <span class="n">is</span> <span class="n">of</span> <span class="n">course</span> <span class="n">ambiguous</span> <span class="k">if</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">just</span> <span class="n">a</span> <span class="k">trait</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">But</span> <span class="n">what</span> <span class="k">if</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">a</span> <span class="n">way</span> <span class="n">of</span> <span class="n">referring</span> <span class="n">to</span> <span class="n">the</span> <span class="k">type</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">and</span> <span class="n">the</span> <span class="k">trait</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">together</span><span class="o">:</span> <span class="n">the</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="k">trait</span><span class="p">)</span> <span class="n">pairing</span> <span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">T</span><span class="p">)</span><span class="o">?</span>  <span class="n">Clearly</span> <span class="kr">once</span> <span class="n">one</span> <span class="n">specifies</span> <span class="n">the</span>
</span><span class='line'><span class="n">pair</span><span class="p">,</span> <span class="n">then</span> <span class="n">it</span> <span class="n">is</span> <span class="n">easy</span> <span class="n">to</span> <span class="n">tell</span> <span class="n">what</span> <span class="n">items</span> <span class="n">are</span> <span class="n">associated</span> <span class="n">with</span> <span class="n">the</span> <span class="n">pair</span><span class="p">.</span>
</span><span class='line'><span class="n">Even</span> <span class="n">a</span> <span class="n">human</span> <span class="n">without</span> <span class="n">a</span> <span class="n">sophisticated</span> <span class="n">IDE</span> <span class="n">would</span> <span class="n">know</span> <span class="k">in</span> <span class="n">that</span> <span class="n">case</span> <span class="n">to</span> <span class="n">try</span>
</span><span class='line'><span class="n">invoking</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">grep</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">searching</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">impl</span> <span class="n">T</span><span class="p">.</span><span class="o">*</span> <span class="k">for</span> <span class="n">X</span><span class="p">.</span><span class="o">*&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">a</span> <span class="n">compiler</span> <span class="n">can</span> <span class="k">do</span> <span class="n">even</span> <span class="n">better</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Another</span> <span class="n">way</span> <span class="n">of</span> <span class="n">looking</span> <span class="n">at</span> <span class="n">this</span><span class="o">:</span> <span class="n">What</span> <span class="k">if</span> <span class="n">we</span> <span class="n">could</span> <span class="n">introduce</span> <span class="n">local</span> <span class="n">names</span>
</span><span class='line'><span class="k">for</span> <span class="n">the</span> <span class="k">impl</span> <span class="n">that</span> <span class="n">corresponds</span> <span class="n">to</span> <span class="n">the</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="k">trait</span><span class="p">)</span> <span class="n">pairing</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">I</span> <span class="n">started</span> <span class="n">working</span> <span class="n">on</span> <span class="n">ideas</span> <span class="n">all</span> <span class="n">centering</span> <span class="n">around</span> <span class="n">a</span> <span class="n">declaration</span>
</span><span class='line'><span class="n">form</span> <span class="n">like</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">let</span> <span class="n">R</span> <span class="o">=</span> <span class="k">trait</span> <span class="n">T</span> <span class="k">for</span> <span class="k">type</span> <span class="n">X</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">or</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">use</span> <span class="k">impl</span> <span class="n">R</span> <span class="o">=</span> <span class="n">T</span> <span class="k">for</span> <span class="n">X</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="n">other</span> <span class="n">variations</span> <span class="p">(</span><span class="n">I</span> <span class="n">think</span> <span class="n">Patrick</span> <span class="n">Walton</span> <span class="n">actually</span> <span class="n">deserves</span> <span class="n">credit</span>
</span><span class='line'><span class="k">for</span> <span class="n">that</span> <span class="n">last</span> <span class="n">one</span><span class="p">;</span> <span class="n">we</span> <span class="n">will</span> <span class="n">revisit</span> <span class="n">it</span> <span class="n">later</span><span class="p">).</span>  <span class="n">But</span> <span class="n">Niko</span> <span class="n">quickly</span> <span class="n">pointed</span>
</span><span class='line'><span class="n">the</span> <span class="n">huge</span> <span class="n">failing</span> <span class="n">of</span> <span class="n">all</span> <span class="n">of</span> <span class="n">these</span> <span class="n">declaration</span> <span class="n">forms</span><span class="o">:</span> <span class="n">a</span> <span class="n">very</span> <span class="n">common</span>
</span><span class='line'><span class="kn">use</span> <span class="n">case</span> <span class="k">for</span> <span class="n">associated</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">types</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">remember</span><span class="p">,</span> <span class="n">that</span> <span class="n">was</span> <span class="n">our</span> <span class="n">original</span> <span class="n">goal</span><span class="p">)</span>
</span><span class='line'><span class="n">is</span> <span class="k">for</span> <span class="n">function</span> <span class="n">signatures</span><span class="p">,</span> <span class="n">like</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>rust
fn distance&lt;F: Transformation>(x: Domain(F), y: Domain(F), f: F) -> DistanceType(F);</p>

<p>fn remove_edge&lt;G: IncidenceGraph + EdgeCollection>(g: &amp;mut G, e: Edge(G));
<code>``
where</code>Domain(F)<code>,</code>DistanceType(F)<code>, and</code>Edge(G)<code>are replaced
with appropriately Rust-friendly syntactic forms.  There is no *place*
there to put a declaration form</code>let &hellip;<code>or</code>use &hellip;<code>that refers to
</code>F`.  The same applies for other parameterized forms, such as structs,
enums, and traits.</p>

<p>So, back to the drawing board.</p>

<hr />

<h2><a id="insight">An Insight</a></h2>

<p>Even though my attempt to solve this problem via a declaration form had
failed, I continued to focus on the fact that associated item access
is all about the (type, trait) pairing.  So how could I surmount the
parameterized signature wall?</p>

<p>After reflecting on the parameterized signature itself, I said, &ldquo;where
is a natural place to put a binding from an identifier to a (type,
trait) pair?&rdquo;  And this reduced to &ldquo;where does the (type, trait) pair
come from?&rdquo;  This was my insight: The parameterized signature</p>

<nobr>`<X: T>`</nobr>


<p> <em>itself</em> is where the pairing is defined;
(or in the case of <nobr><code>&lt;X: T + U&gt;</code></nobr>: <em>pairings</em>).</p>

<p>My only problem was to put the identifier binding in there.  Once I
saw the pairing waiting right in the parameter list, the place for the
identifier became clear: in-between the type and the trait:</p>

<nobr>`<X: R=T>`</nobr>


<p> binds <code>R</code> to the <code>impl T for X</code>;
for multiple traits, we have <nobr><code>&lt;X: R=T + R2=U&gt;</code></nobr>,
where <code>R</code> is bound as above, and <code>R2</code> is bound to the <code>impl U for X</code>.</p>

<p>And now we can consider writing our examples like so:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">distance</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">F</span><span class="o">:</span> <span class="n">T</span><span class="o">=</span><span class="n">Transformation</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="n">T</span><span class="o">::</span><span class="n">Domain</span><span class="p">,</span> <span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">::</span><span class="n">DistanceType</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">fn</span> <span class="n">remove_edge</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">G</span><span class="o">:</span> <span class="n">IncidenceGraph</span> <span class="o">+</span> <span class="n">EC</span><span class="o">=</span><span class="n">EdgeCollection</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">g</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="k">mut</span> <span class="n">G</span><span class="p">,</span> <span class="n">e</span><span class="o">:</span> <span class="n">EC</span><span class="o">::</span><span class="n">Edge</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The other cute insight is this: the only time we need to add these
identifiers explicitly is when there are multiple trait bounds.
When there is a single trait bound <nobr><code>&lt;X:R=T&gt;</code></nobr>, the
identifier <code>X</code> is just as reasonable (or at least unambiguous) as <code>R</code>
is as a way to reference the impl.  So why not treat</p>

<nobr>`<X:T>`</nobr>


<p> as an abbreviation for <nobr><code>&lt;X:X=T&gt;</code></nobr>:
boom!  The biggest potential complaint with this extension (namely,
the notational complexity of making people pepper their code with
explicit bindings of the impls) goes away!  And our first example becomes:</p>

<pre><code class="rust">fn distance&lt;F: Transformation&gt;(x: F::Domain, y: F::Domain, f: F) -&gt; F::DistanceType;
</code></pre>

<p>(our second example remains unchanged, since <code>G</code> has two trait bounds there, and
so <code>G</code> alone cannot unambiguously denote a (type, trait) pair.</p>

<p>Note also that this binding form does not suffice on its own; in
particular, if one wants to introduce a binding for a (type,trait)
pairing that does not appear in the generic parameter bounds of the
signature.  But the latter is exactly the case that <em>is</em> handled by a
declaration form such as those <a href="#thinkbinding">proposed earlier</a>!</p>

<p>So neither solution suffices on its own, but the two together cover
many use cases of interest.</p>

<hr />

<h2><a id="proposal">The proposed syntax for associated items in Rust</a></h2>

<p>So, with that insight explained, here is my proposal for associated items:</p>

<ol>
<li><p>A trait can now declare names for things besides methods.
 In terms of the grammar that John has been working on:</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_method* RBRACE ;
</code></pre>

<p> is replaced with</p>

<pre><code class="`"> trait_decl: TRAIT ident
                (generic_decls)? (COLON trait_list)?
                LBRACE trait_item* RBRACE ;
 trait_item: trait_method | trait_constant | trait_type
 trait_type: TYPE ident (generic_decls)? SEMI
           | TYPE ident (generic_decls)? COLON boundseq SEMI ;
 trait_const: STATIC ident COLON ty SEMI ;
</code></pre></li>
<li><p>The identifier bound by a trait types is in scope of its enclosing
 trait; trait method declarations and trait const declarations
 can reference it.</p></li>
<li><p>Extend the Rust grammar to allow an optional binding of
 an identifier to a (type, trait) pair in a type parameter bound.
 In terms of the grammar:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | obsoletekind ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> bound : STATIC_LIFETIME | trait | ident = trait | obsoletekind ;
</code></pre></li>
<li><p>Extend the Rust grammar to allow a declaration binding
 an identifier to a (type, trait) pair.
 In terms of the grammar, I <em>think</em> this is close to what I want:</p>

<pre><code class="`"> view_item : attrs_vis use ;
</code></pre>

<p> is replaced with:</p>

<pre><code class="`"> view_item : attrs_vis use | USE impl ident = trait for ty ;
</code></pre>

<p> Of potential interest, we do not allow visibility attributes
 on <code>use impl R = T for X;</code>, because these definitions are always
 local shorthands and thus private to the module.  (Maybe in
 the future we will see motivation to allow the bindings to
 be exposed, but I have not yet seen a motivation for this.)</p>

<p> I am not attached to the particulars of the syntax above;
 in particular, if someone wants to throw in the <code>trait</code>
 and/or <code>type</code> keywords into the above to make the purpose
 all the more clear, I will not object.  More so if it is
 somehow <em>necessary</em> for disambiguation, but I do not
 anticipate that being the case.</p></li>
<li><p>A bound of the form <code>R=T</code> (<code>ident = ty</code>) in the context of a <code>ty_param</code>
 production <code>X : ... [] ...</code> (<code>ident COLON bound + ... + [] + ... + bound</code>)
 (where <code>[]</code> denotes the contextual hole that the <code>R=T</code> is plugged into)
 is treated as binding <code>R</code> to the code defined by the <code>impl T for X</code>.
 The scope of the binding for <code>R</code> encompasses: the rest of the boundseq
 (to the right of the <nobr><code>"R=T"</code></nobr>) and the remainder of this decl
 that follows the generic_decls within which the <nobr><code>R=T</code></nobr> bound appears.</p></li>
<li><p>This binding of <code>R</code> can shadow earlier bindings of the same identifier
 (either other impl-bindings, or module names).  It seems like this
 should be a reasonable thing to signal via a lint-warning.</p></li>
<li><p>A path identifier component can now be an <code>R</code>, binding an <code>impl T for X</code>.</p>

<p>So one can access trait items (see trait_item above) as R::item.
 Associated items can be type-parametric whenever the corresponding
 item could be type-parameteric when exported from a module.</p></li>
<li><p>A boundseq with a single bound of variant <code>ty</code> above, where ty is
 itself of the form <code>ident</code> (i.e. the <code>&lt;X:T&gt;</code> case) is implicitly
 expanded into <code>&lt;X:X=T&gt;</code>.</p></li>
</ol>


<hr />

<h2><a id="futurework">What the proposal does not cover</a></h2>

<p>There are cases of interest that are not covered by the above proposal.</p>

<p>Most obvious to me are situations where one wants to describe mutual
constraints <em>between</em> the items associated with type parameters.
(An example of this is provided by the <code>gen_orbit</code> example with
the constraint <code>DistanceType(I) = N</code>, and more generally much of the
content of the <code>requires(..)</code> clauses from EOP that I deliberately
ignored).  For the examples from EOP, C++ handles this by doing the
template instantiation blindly and applying the type checker to
code after concrete types have been substituted for the parameters;
this approach is not compatible with Rust&rsquo;s design where we want to
type-check a generic body of code in terms of the guarantees provided
by the trait-bounds, <em>not</em> delaying those checks until after
the concrete types have been plugged in.</p>

<p>Also, in the changes I proposed above to the Rust grammar (and
somewhat implicitly to its semantics), I deliberately constrained my
focus to the cases Niko described in his blog posts: types, functions,
and constants.  But one might consider further extensions, such as
allowing traits to define <em>other</em> traits.  (I found that subject hard
to wrap one&rsquo;s mind around, and I wanted to keep the focus limited for
Rust 1.0; we can leave generalizations of this approach for after Rust
1.0.)</p>

<p>Also, I&rsquo;m not sure whether there is need and/or utility in further
generalizing this topic to <a href="http://www.haskell.org/haskellwiki/GHC/Type_families#An_associated_data_type_example">associated data families</a>.  Again,
I want to limit the scope of the work to something we believe we can
accomplish for Rust 1.0.</p>

<p>What else have I missed?  Let me know, leave a comment.  (Or look
for me in the #rust irc channel.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rusty Chain Puzzle 1.]]></title>
    <link href="http://blog.pnkfx.org/blog/2013/03/26/rusty-chain-puzzle-1/"/>
    <updated>2013-03-26T10:28:00+01:00</updated>
    <id>http://blog.pnkfx.org/blog/2013/03/26/rusty-chain-puzzle-1</id>
    <content type="html"><![CDATA[<p>I have been trying to get my feet wet programming in
<a href="http://www.rust-lang.org/">Rust</a>.</p>

<p>A month and a half ago, I thought &ldquo;Maybe I will hack up an Earley
parser in a variety of languages, including Rust.&rdquo;  That sent me down
a long path of learning about how Earley parsing works; I have not yet
written up my results from that investigation, and I still have not
written the Rust version of the code.</p>

<p>Last weekend, I sat down and said, &ldquo;Let&rsquo;s try a simpler goal: A couple
simple exercies, maybe taken from Knuth&rsquo;s
<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html">TAOCP</a>&rdquo;
This was indeed a much simpler goal, but it was more difficult than
I had expected.</p>

<!-- more -->


<p>So, here is a Rust hacking puzzle that I struggled with.</p>

<p>I am representing piles of playing cards via linked structures.
Here are the data structure declarations:</p>

<pre><code class="rust">enum card_suit { clubs, diamonds, hearts, spades }
struct card { suit: card_suit,
              rank: u8, // 1..13
              next: Option&lt;~card&gt; }
</code></pre>

<p>Note that the <code>next</code> field is an (optional) <em>owned</em> pointer to the
next card in the pile.  <code>Option&lt;~card&gt;</code> will be generally used to
represent a potentially empty pile (or &ldquo;stack&rdquo;, &ldquo;deck&rdquo; or &ldquo;hand&rdquo;, as
the context dictates), while <code>~card</code> is a non-empty pile (or, when its
<code>next</code> is <code>None</code>, a single card, again as context dictates)</p>

<h2>The goal</h2>

<p>I want to write four functions: <code>place_top</code>, <code>place_bot</code>, <code>pop_top</code>,
and <code>pop_bot</code>, which respectively:</p>

<ul>
<li><p><code>place_top(stack, c)</code> pushes a card <code>c</code> onto the top of the stack,
represented by return the new top of the stack.</p></li>
<li><p><code>place_bot(stack, c)</code> places a card beneath the stack.  For an empty
stack, the placed card is returned as the top of the newly formed
stack; otherwise, the old stack top is returned (since the stack is
imperatively modified).</p></li>
<li><p><code>pop_top(stack)</code> pops the top of the stack, returning a tuple of the
popped card and the remaining, potentially empty stack.</p></li>
<li><p><code>pop_bot(stack)</code> removes the bottom of the stack (i.e. &ldquo;deals from
the bottom of the deck&rdquo;), returning a tuple of the removed card and
the new, potentially empty stack.</p></li>
</ul>


<p>In code, here are the signatures for the desired functions,
as well as one-line reminders of the behavior for each.</p>

<pre><code class="rust">// [c1, ..., cN], cX -&gt; [cX, c1, ..., cN]
fn place_top(pile: Option&lt;~card&gt;, newcard: ~card) -&gt; ~card;

// [c1, ..., cN], cX -&gt; [c1, ..., cN, cX]
fn place_bot(pile: Option&lt;~card&gt;, newcard: ~card) -&gt; ~card;

// [c1, c2, ..., cN] -&gt; (c1, [c2, ..., cN])
fn pop_top(pile: ~card) -&gt; (~card, Option&lt;~card&gt;);

// [c1, ..., cN-1, cN] -&gt; (Some(cN), [c1, ..., cN-1])
fn pop_bot(pile: ~card) -&gt; (~card, Option&lt;~card&gt;);
</code></pre>

<h2>(Some non-critical helper infrastructure follows, showing off Rust as language)</h2>

<p>Here is some example code that puts together a hand and does
a few manipulations using the above operations (as well as
some printing routines to make looking at these cards nicer
in the terminal output)</p>

<pre><code class="rust">fn make_hand() -&gt; ~card {
    let hand = ~card { suit: clubs, rank: 10, next: None };
    let hand = ~card { suit: spades, rank: 3, next: Some(hand) };
    let hand = ~card { suit: diamonds, rank: 2, next: Some(hand) };
    hand
}

fn main() {
    let hand : ~card = make_hand();
    hand.report(~"initial hand: ");
    let AceD = ~card{ suit: diamonds, rank: 1, next: None };
    AceD.report(~"place top: ");
    let hand = place_top(Some(hand), AceD);
    hand.report(~"new hand: ");
    let SixD = ~card{ suit: diamonds, rank: 6, next: None };
    SixD.report(~"place bot: ");
    let hand = place_bot(Some(hand), SixD);
    hand.report(~"new hand: ");
    let (top, rest) = pop_top(hand);
    top.report(~"popped top: ");
    let hand = rest.unwrap();
    hand.report(~"new hand: ");
    let (bot, rest) = pop_bot(hand);
    bot.report(~"popped bot: ");
    let hand = rest.unwrap();
    hand.report(~"new hand: ");
}

// Below are "just" some notation niceties that should not effect
// the semantics of the code + algorithms above.

impl ToStr for card_suit {
    fn to_str(&amp;self) -&gt; ~str {
        match self { &amp;spades   =&gt; ~"\u2664", &amp;hearts   =&gt; ~"\u2665",
                     &amp;diamonds =&gt; ~"\u2666", &amp;clubs    =&gt; ~"\u2667" } }
}

fn rank_to_str(r:u8) -&gt; ~str {
    match r {
        1     =&gt; ~"A",
        2..10 =&gt; r.to_str(),
        11    =&gt; ~"J",
        12    =&gt; ~"Q",
        13    =&gt; ~"K",
        _     =&gt; fail!()
    }
}

impl card {
    fn rank_to_str(&amp;self) -&gt; ~str { rank_to_str(self.rank) }
    fn report(&amp;self, prefix: ~str) { io::println(prefix + self.to_str()); }
}

impl ToStr for card {
    fn to_str(&amp;self) -&gt; ~str {
        let mut ret = self.rank_to_str() + self.suit.to_str();
        match &amp;self.next {
            &amp;None =&gt; (),
            &amp;Some(ref n) =&gt; ret = ret + "," + n.to_str()
        }
        ret
    }
}
</code></pre>

<p>In my terminal, I get the following output from the above <code>main</code>
function:</p>

<p>initial hand: 2&diams;,3&spades;,10&clubs;<br/>
place top: A&diams;<br/>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;<br/>
place bot: 6&diams;<br/>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;,6&diams;<br/>
popped top: A&diams;<br/>
new hand: 2&diams;,3&spades;,10&clubs;,6&diams;<br/>
popped bot: 6&diams;<br/>
new hand: 2&diams;,3&spades;,10&clubs;</p>

<p>(I will post my initial &ldquo;solution&rdquo; to the puzzle in a follow-up post;
 I wanted to share this first because I know my current solution
 is non-optimal and wanted to see what others had to offer for how
 to solve this first.)</p>
]]></content>
  </entry>
  
</feed>
