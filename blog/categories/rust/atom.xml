<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rust | The {pnk}f(eli)x Blog]]></title>
  <link href="http://blog.pnkfx.org//blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://blog.pnkfx.org//"/>
  <updated>2013-03-26T16:32:07+01:00</updated>
  <id>http://blog.pnkfx.org//</id>
  <author>
    <name><![CDATA[Felix S. Klock II]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rusty Chain Puzzle 1.]]></title>
    <link href="http://blog.pnkfx.org//blog/2013/03/26/rusty-chain-puzzle-1/"/>
    <updated>2013-03-26T10:28:00+01:00</updated>
    <id>http://blog.pnkfx.org//blog/2013/03/26/rusty-chain-puzzle-1</id>
    <content type="html"><![CDATA[<p>I have been trying to get my feet wet programming in
<a href="http://www.rust-lang.org/">Rust</a>.</p>

<p>A month and a half ago, I thought &quot;Maybe I will hack up an Earley
parser in a variety of languages, including Rust.&quot;  That sent me down
a long path of learning about how Earley parsing works; I have not yet
written up my results from that investigation, and I still have not
written the Rust version of the code.</p>

<p>Last weekend, I sat down and said, &quot;Let&#39;s try a simpler goal: A couple
simple exercies, maybe taken from Knuth&#39;s
<a href="http://www-cs-faculty.stanford.edu/%7Euno/taocp.html">TAOCP</a>&quot;
This was indeed a much simpler goal, but it was more difficult than
I had expected.</p>

<p>So, here is a Rust hacking puzzle that I struggled with.</p>

<p>I am representing piles of playing cards via linked structures.
Here are the data structure declarations:</p>
<div class="highlight"><pre><code class="rust"><span class="k">enum</span> <span class="n">card_suit</span> <span class="p">{</span> <span class="n">clubs</span><span class="p">,</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">hearts</span><span class="p">,</span> <span class="n">spades</span> <span class="p">}</span>
<span class="n">struct</span> <span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">card_suit</span><span class="p">,</span>
              <span class="n">rank</span><span class="o">:</span> <span class="k">u8</span><span class="p">,</span> <span class="c1">// 1..13</span>
              <span class="n">next</span><span class="o">:</span> <span class="n">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span> <span class="p">}</span>
</code></pre></div>
<p>Note that the <code>next</code> field is an (optional) <em>owned</em> pointer to the
next card in the pile.  <code>Option&lt;~card&gt;</code> will be generally used to
represent a potentially empty pile (or &quot;stack&quot;, &quot;deck&quot; or &quot;hand&quot;, as
the context dictates), while <code>~card</code> is a non-empty pile (or, when its
<code>next</code> is <code>None</code>, a single card, again as context dictates)</p>

<h2>The goal</h2>

<p>I want to write four functions: <code>place_top</code>, <code>place_bot</code>, <code>pop_top</code>,
and <code>pop_bot</code>, which respectively:</p>

<ul>
<li><p><code>place_top(stack, c)</code> pushes a card <code>c</code> onto the top of the stack,
represented by return the new top of the stack.</p></li>
<li><p><code>place_bot(stack, c)</code> places a card beneath the stack.  For an empty
stack, the placed card is returned as the top of the newly formed
stack; otherwise, the old stack top is returned (since the stack is
imperatively modified).</p></li>
<li><p><code>pop_top(stack)</code> pops the top of the stack, returning a tuple of the
popped card and the remaining, potentially empty stack.</p></li>
<li><p><code>pop_bot(stack)</code> removes the bottom of the stack (i.e. &quot;deals from
the bottom of the deck&quot;), returning a tuple of the removed card and
the new, potentially empty stack.</p></li>
</ul>

<p>In code, here are the signatures for the desired functions,
as well as one-line reminders of the behavior for each.</p>
<div class="highlight"><pre><code class="rust"><span class="c1">// [c1, ..., cN], cX -&gt; [cX, c1, ..., cN]</span>
<span class="k">fn</span> <span class="n">place_top</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="n">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">newcard</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span><span class="p">;</span>

<span class="c1">// [c1, ..., cN], cX -&gt; [c1, ..., cN, cX]</span>
<span class="k">fn</span> <span class="n">place_bot</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="n">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">newcard</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span><span class="p">;</span>

<span class="c1">// [c1, c2, ..., cN] -&gt; (c1, [c2, ..., cN])</span>
<span class="k">fn</span> <span class="n">pop_top</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">~</span><span class="n">card</span><span class="p">,</span> <span class="n">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">);</span>

<span class="c1">// [c1, ..., cN-1, cN] -&gt; (Some(cN), [c1, ..., cN-1])</span>
<span class="k">fn</span> <span class="n">pop_bot</span><span class="p">(</span><span class="n">pile</span><span class="o">:</span> <span class="o">~</span><span class="n">card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">~</span><span class="n">card</span><span class="p">,</span> <span class="n">Option</span><span class="o">&lt;~</span><span class="n">card</span><span class="o">&gt;</span><span class="p">);</span>
</code></pre></div>
<h2>(Some non-critical helper infrastructure follows, showing off Rust as language)</h2>

<p>Here is some example code that puts together a hand and does
a few manipulations using the above operations (as well as
some printing routines to make looking at these cards nicer
in the terminal output)</p>
<div class="highlight"><pre><code class="rust"><span class="k">fn</span> <span class="n">make_hand</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">clubs</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">10</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="n">None</span> <span class="p">};</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">spades</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="n">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">)</span> <span class="p">};</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span> <span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="n">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">)</span> <span class="p">};</span>
    <span class="n">hand</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">:</span> <span class="o">~</span><span class="n">card</span> <span class="o">=</span> <span class="n">make_hand</span><span class="p">();</span>
    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;initial hand: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">AceD</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span><span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="n">None</span> <span class="p">};</span>
    <span class="n">AceD</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;place top: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">place_top</span><span class="p">(</span><span class="n">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="n">AceD</span><span class="p">);</span>
    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">SixD</span> <span class="o">=</span> <span class="o">~</span><span class="n">card</span><span class="p">{</span> <span class="n">suit</span><span class="o">:</span> <span class="n">diamonds</span><span class="p">,</span> <span class="n">rank</span><span class="o">:</span> <span class="m">6</span><span class="p">,</span> <span class="n">next</span><span class="o">:</span> <span class="n">None</span> <span class="p">};</span>
    <span class="n">SixD</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;place bot: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">place_bot</span><span class="p">(</span><span class="n">Some</span><span class="p">(</span><span class="n">hand</span><span class="p">),</span> <span class="n">SixD</span><span class="p">);</span>
    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="p">(</span><span class="n">top</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="o">=</span> <span class="n">pop_top</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span>
    <span class="n">top</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;popped top: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">rest</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="p">(</span><span class="n">bot</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="o">=</span> <span class="n">pop_bot</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span>
    <span class="n">bot</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;popped bot: &quot;</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">hand</span> <span class="o">=</span> <span class="n">rest</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
    <span class="n">hand</span><span class="p">.</span><span class="n">report</span><span class="p">(</span><span class="o">~</span><span class="s">&quot;new hand: &quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Below are &quot;just&quot; some notation niceties that should not effect</span>
<span class="c1">// the semantics of the code + algorithms above.</span>

<span class="k">impl</span> <span class="n">ToStr</span> <span class="k">for</span> <span class="n">card_suit</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="n">to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">str</span> <span class="p">{</span>
        <span class="n">match</span> <span class="n">self</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">spades</span>   <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2664</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hearts</span>   <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2665</span><span class="s">&quot;</span><span class="p">,</span>
                     <span class="o">&amp;</span><span class="n">diamonds</span> <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2666</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clubs</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;</span><span class="se">\u2667</span><span class="s">&quot;</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="n">r</span><span class="o">:</span><span class="k">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">str</span> <span class="p">{</span>
    <span class="n">match</span> <span class="n">r</span> <span class="p">{</span>
        <span class="m">1</span>     <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;A&quot;</span><span class="p">,</span>
        <span class="m">2.</span><span class="p">.</span><span class="m">10</span> <span class="o">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">to_str</span><span class="p">(),</span>
        <span class="m">11</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;J&quot;</span><span class="p">,</span>
        <span class="m">12</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;Q&quot;</span><span class="p">,</span>
        <span class="m">13</span>    <span class="o">=&gt;</span> <span class="o">~</span><span class="s">&quot;K&quot;</span><span class="p">,</span>
        <span class="n">_</span>     <span class="o">=&gt;</span> <span class="k">fail</span><span class="o">!</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">card</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">str</span> <span class="p">{</span> <span class="n">rank_to_str</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">fn</span> <span class="n">report</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">,</span> <span class="n">prefix</span><span class="o">:</span> <span class="o">~</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="n">io</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">to_str</span><span class="p">());</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">ToStr</span> <span class="k">for</span> <span class="n">card</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="n">to_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">~</span><span class="n">str</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="k">ret</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rank_to_str</span><span class="p">()</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">to_str</span><span class="p">();</span>
        <span class="n">match</span> <span class="o">&amp;</span><span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="p">{</span>
            <span class="o">&amp;</span><span class="n">None</span> <span class="o">=&gt;</span> <span class="p">(),</span>
            <span class="o">&amp;</span><span class="n">Some</span><span class="p">(</span><span class="n">ref</span> <span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">ret</span> <span class="o">=</span> <span class="k">ret</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">n</span><span class="p">.</span><span class="n">to_str</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="k">ret</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>In my terminal, I get the following output from the above <code>main</code>
function:</p>

<p>initial hand: 2&diams;,3&spades;,10&clubs;<br>
place top: A&diams;<br>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;<br>
place bot: 6&diams;<br>
new hand: A&diams;,2&diams;,3&spades;,10&clubs;,6&diams;<br>
popped top: A&diams;<br>
new hand: 2&diams;,3&spades;,10&clubs;,6&diams;<br>
popped bot: 6&diams;<br>
new hand: 2&diams;,3&spades;,10&clubs;</p>

<p>(I will post my initial &quot;solution&quot; to the puzzle in a follow-up post;
 I wanted to share this first because I know my current solution
 is non-optimal and wanted to see what others had to offer for how
 to solve this first.)</p>
]]></content>
  </entry>
  
</feed>
