* Fib hacks
** Rust
   CLOCK: [2013-02-17 Sun 02:20]--[2013-02-17 Sun 02:31] =>  0:11
   CLOCK: [2013-02-17 Sun 01:59]--[2013-02-17 Sun 02:15] =>  0:16
   CLOCK: [2013-02-16 Sat 19:53]--[2013-02-16 Sat 20:03] =>  0:10

   * Okay, got something I'm reasonable happy with as a hacked
     up Fibonacci in Rust.  
   * Above Took about 26 minutes

   * most of that was spent either trying to remember why use
     std::... does not work out of the box, or

   * just messing with the time library (e.g. it does not support
     subtracting timespecs directly; should there be a trait for this,
     much like how there is one for Ord?  Seems like one might need
     associated-type-synonyms to get full leverage out of this.

   * So, results for Rust on Fib:

```transcript
bash -c "time rustc -o fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.441s
user	0m0.404s
sys	0m0.039s
bash -c "time ./fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.15s
fib(41):  267914296 elapsed: 1.86s
fib(42):  433494437 elapsed: 3.05s

real	0m6.094s
user	0m6.091s
sys	0m0.002s
```
** Larceny
   CLOCK: [2013-02-17 Sun 12:02]--[2013-02-17 Sun 12:05] =>  0:03
   CLOCK: [2013-02-17 Sun 04:33]--[2013-02-17 Sun 04:38] =>  0:05
   CLOCK: [2013-02-17 Sun 04:23]--[2013-02-17 Sun 04:33] =>  0:10
   CLOCK: [2013-02-17 Sun 04:14]--[2013-02-17 Sun 04:23] =>  0:00
   CLOCK: [2013-02-17 Sun 02:31]--[2013-02-17 Sun 03:27] =>  0:56

   * Wow, got way bogged down in trying to figure out the syntax for
     Larceny's format specifiers.  Crazy.

   * Then got sucked in trying to find all the ways I might
     speed up the Larceny code.
     E.g. -unsafe, (compiler-switches 'fast-unsafe), fx+
     Me, biased, no...  BUT I think I accompished the job.  :)

** C++
   CLOCK: [2013-02-17 Sun 04:04]--[2013-02-17 Sun 04:14] =>  0:00
   CLOCK: [2013-02-17 Sun 03:36]--[2013-02-17 Sun 04:04] =>  0:28

   * I cheated here and did not use actual closures.  To be fair,
     I should make new variants of Larceny and Rust benchmarks that
     do the same.  I will do that now (and charge the effort to
     the C++ eval.)

** Clojure
   CLOCK: [2013-02-17 Sun 13:37]--[2013-02-17 Sun 14:24] =>  0:51
   CLOCK: [2013-02-17 Sun 13:17]--[2013-02-17 Sun 13:32] =>  0:15

   * Okay, this is one that will be interesting.

   * For parity with Larceny's approach, I should employ AOT
     compilation.

   * But lets just get the simplest thing working first.

   * To load a file and then initiate the repl, do:
     clj -i <file.clj> -r

   * To compile a file into the current directory (so that you
     can use '.' as one of the appropriate entries to add to
     the classpath), do:

     clj -e '(do (set! *compile-path* ".") (compile (quote fib)))'

     (note that many class files are generated, which is a reason
      one might prefer to emit the compiled code into classes/
      as is the default)

   * But it does not suffice to solely put '.' or './classes/' on the
     classpath; one must also put the appropriate clojure.jar on it.
     This can be programmatically extracted from 

** Node
   CLOCK: [2013-02-17 Sun 20:53]--[2013-02-17 Sun 21:01] =>  0:08
   CLOCK: [2013-02-17 Sun 17:41]--[2013-02-17 Sun 17:52] =>  0:11
   CLOCK: [2013-02-17 Sun 15:04]--[2013-02-17 Sun 15:40] =>  0:36

   * Decided to install the microtime module (for parity with other
     runtimes that are using nanosecond-based measurement utilties)
     rather than learn how to reimplement it myself (though maybe that
     would not be so hard).

** Comparison notes
   CLOCK: [2013-02-17 Sun 21:01]--[2013-02-17 Sun 21:05] =>  0:04
   CLOCK: [2013-02-17 Sun 14:45]--[2013-02-17 Sun 14:46] =>  0:19
   CLOCK: [2013-02-17 Sun 14:24]--[2013-02-17 Sun 14:29] =>  0:05
   CLOCK: [2013-02-17 Sun 12:05]--[2013-02-17 Sun 12:06] =>  0:01
   CLOCK: [2013-02-17 Sun 03:27]--[2013-02-17 Sun 03:35] =>  0:08

   * So, the initial comparison is quite interesting, if you ask me:

```transcript
bash -c "time larceny -- -e '(compile-file \"fib.sch\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.064s
user	0m0.047s
sys	0m0.015s
bash -c "time larceny -- fib.fasl"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.99

real	0m7.587s
user	0m7.567s
sys	0m0.017s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.450s
user	0m0.417s
sys	0m0.036s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.01s
fib(40):  165580141 elapsed: 1.20s
fib(41):  267914296 elapsed: 1.92s
fib(42):  433494437 elapsed: 3.10s

real	0m6.261s
user	0m6.249s
sys	0m0.006s
```

    * Observations follow:

    * Larceny's compile time for this file blows rustc out of the
      water: 0.064s versus 0.45s.

    * The elapsed times on this benchmark put rustc in the lead.

    * I tried some of the compiler-switches to see if they would help,
      but they did not (and one of them, inline-assignment, caused
      Larceny to immediately die with a bus error).

    * Another transcript below, this time after throwing C++ into the mix
      (but it is not a true Apples to Apples comparison since both Rust
      and Larceny are using at-least-something approximating a closure,
      while C++ is just using a function pointer and code duplication.)

```transcript
bash -c "time larceny -- -e '(compile-file \"fib.sch\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.059s
user	0m0.044s
sys	0m0.013s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.99
fib(42):  433494437 elapsed: 3.0

real	0m7.585s
user	0m7.564s
sys	0m0.017s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.985s
user	0m0.433s
sys	0m0.180s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.01s
fib(40):  165580141 elapsed: 1.20s
fib(41):  267914296 elapsed: 1.95s
fib(42):  433494437 elapsed: 3.16s

real	0m6.343s
user	0m6.339s
sys	0m0.003s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.800s
user	0m0.307s
sys	0m0.278s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.36s
fib(41):  267914296 elapsed: 0.60s
fib(42):  433494437 elapsed: 0.96s

real	0m1.946s
user	0m1.944s
sys	0m0.001s
```

    * The Larceny results seem quite noisy: the elapsed time seems
      to jump up and down by a second without an immediately
      discernable reason (though garbage collection of the state
      being allocated for the time calculations seems possible)

```transcript
bash -c "time larceny -- -e '(compile-file \"fib.sch\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.070s
user	0m0.051s
sys	0m0.015s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.99

real	0m8.024s
user	0m7.992s
sys	0m0.019s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.947s
user	0m0.433s
sys	0m0.145s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.18s
fib(41):  267914296 elapsed: 1.93s
fib(42):  433494437 elapsed: 3.11s

real	0m6.259s
user	0m6.241s
sys	0m0.004s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.955s
user	0m0.306s
sys	0m0.437s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.36s
fib(41):  267914296 elapsed: 0.60s
fib(42):  433494437 elapsed: 0.97s

real	0m1.956s
user	0m1.948s
sys	0m0.007s
```

    * After putting in all of: -unsafe to runtime, 'fast-unsafe at compile time,
      *and* `<:fix:fix` and `fx-` in the fib code, I get the following:

```transcript
bash -c "time larceny -- -e '(compiler-switches (quote fast-unsafe))' -e '(compile-file \"fib.sch\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.053s
user	0m0.038s
sys	0m0.014s
bash -c "time larceny -unsafe -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 0.99
fib(41):  267914296 elapsed: 1.0
fib(42):  433494437 elapsed: 2.99

real	0m5.237s
user	0m5.216s
sys	0m0.018s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.987s
user	0m0.434s
sys	0m0.162s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.18s
fib(41):  267914296 elapsed: 1.92s
fib(42):  433494437 elapsed: 3.10s

real	0m6.230s
user	0m6.224s
sys	0m0.003s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.785s
user	0m0.290s
sys	0m0.261s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.36s
fib(41):  267914296 elapsed: 0.59s
fib(42):  433494437 elapsed: 0.95s

real	0m1.925s
user	0m1.922s
sys	0m0.002s

real	0m15.237s
user	0m14.132s
sys	0m0.469s
```

    * I think this is a good place for me to stop the investigation
      for tonight.  I have managed to prove that I can get Larceny
      competitively fast with Rust, and also that I do not necessarily
      have to lift all of its lambda expressions to defined procedures
      in order to do so.

    * (Nor did it matter for Rust either, AFAICT.  That's good news.)

    * Pumped values up to fib(43) and made separate safe/unsafe Larceny variants

```transcript
bash -c "time larceny -- -e '(compiler-switches (quote default))' -e '(compile-file \"fib.sch\" \"fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.078s
user	0m0.060s
sys	0m0.016s
bash -c "time larceny -- -e '(compiler-switches (quote fast-unsafe))' -e '(compile-file \"fib.sch\" \"unsafe-fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.066s
user	0m0.045s
sys	0m0.018s
bash -c "time larceny -unsafe -nobanner -- unsafe-fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 0.99
fib(41):  267914296 elapsed: 1.99
fib(42):  433494437 elapsed: 2.0
fib(43):  701408733 elapsed: 4.0

real	0m9.667s
user	0m9.640s
sys	0m0.024s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.0
fib(43):  701408733 elapsed: 5.99

real	0m12.423s
user	0m12.406s
sys	0m0.015s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.444s
user	0m0.413s
sys	0m0.032s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.14s
fib(41):  267914296 elapsed: 1.85s
fib(42):  433494437 elapsed: 2.99s
fib(43):  701408733 elapsed: 4.85s

real	0m10.863s
user	0m10.859s
sys	0m0.002s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.308s
user	0m0.269s
sys	0m0.038s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.52s
fib(41):  267914296 elapsed: 0.85s
fib(42):  433494437 elapsed: 1.37s
fib(43):  701408733 elapsed: 2.24s

real	0m5.017s
user	0m5.015s
sys	0m0.001s
```
    * So now that we have Clojure in the mix, how do things look:

```transcript
bash -c "time larceny -- -e '(compiler-switches (quote default))' -e '(compile-file \"fib.sch\" \"fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.058s
user	0m0.045s
sys	0m0.011s
bash -c "time larceny -- -e '(compiler-switches (quote fast-unsafe))' -e '(compile-file \"fib.sch\" \"unsafe-fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.049s
user	0m0.036s
sys	0m0.011s
bash -c "time larceny -unsafe -nobanner -- unsafe-fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 0.99
fib(41):  267914296 elapsed: 1.99
fib(42):  433494437 elapsed: 2.0
fib(43):  701408733 elapsed: 4.99

real	0m9.791s
user	0m9.774s
sys	0m0.015s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.99
fib(43):  701408733 elapsed: 5.0

real	0m12.454s
user	0m12.437s
sys	0m0.015s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.429s
user	0m0.398s
sys	0m0.034s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.15s
fib(41):  267914296 elapsed: 1.86s
fib(42):  433494437 elapsed: 3.02s
fib(43):  701408733 elapsed: 4.87s

real	0m10.942s
user	0m10.939s
sys	0m0.003s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.312s
user	0m0.271s
sys	0m0.039s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.53s
fib(41):  267914296 elapsed: 0.85s
fib(42):  433494437 elapsed: 1.38s
fib(43):  701408733 elapsed: 2.23s

real	0m5.015s
user	0m5.013s
sys	0m0.001s
mkdir classes
bash -c "time clj -e '(compile (quote fib))'"
fib

real	0m0.915s
user	0m1.537s
sys	0m0.072s
bash -c "time java -cp "/Users/pnkfelix/Dev/Homebrew/homebrew/Cellar/clojure/1.4.0/clojure-1.4.0.jar":classes fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.01s
fib(40):  165580141 elapsed: 0.40s
fib(41):  267914296 elapsed: 0.66s
fib(42):  433494437 elapsed: 1.05s
fib(43):  701408733 elapsed: 1.70s

real	0m39.296s
user	0m39.913s
sys	0m0.094s
```

    * Okay now I have added node.js as well.

```transcript
bash -c "time larceny -- -e '(compiler-switches (quote default))' -e '(compile-file \"fib.sch\" \"fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.103s
user	0m0.048s
sys	0m0.019s
bash -c "time larceny -- -e '(compiler-switches (quote fast-unsafe))' -e '(compile-file \"fib.sch\" \"unsafe-fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.049s
user	0m0.036s
sys	0m0.012s
bash -c "time larceny -unsafe -nobanner -- unsafe-fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 0.99
fib(41):  267914296 elapsed: 1.0
fib(42):  433494437 elapsed: 2.99
fib(43):  701408733 elapsed: 4.0

real	0m9.780s
user	0m9.742s
sys	0m0.019s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.0
fib(43):  701408733 elapsed: 5.99

real	0m12.493s
user	0m12.476s
sys	0m0.014s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m1.074s
user	0m0.435s
sys	0m0.184s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.14s
fib(41):  267914296 elapsed: 1.85s
fib(42):  433494437 elapsed: 3.03s
fib(43):  701408733 elapsed: 4.86s

real	0m10.937s
user	0m10.915s
sys	0m0.004s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.902s
user	0m0.315s
sys	0m0.288s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.53s
fib(41):  267914296 elapsed: 0.85s
fib(42):  433494437 elapsed: 1.38s
fib(43):  701408733 elapsed: 2.23s

real	0m5.012s
user	0m5.010s
sys	0m0.001s
mkdir classes
bash -c "time clj -e '(compile (quote fib))'"
fib

real	0m0.920s
user	0m1.550s
sys	0m0.069s
bash -c "time java -cp "/Users/pnkfelix/Dev/Homebrew/homebrew/Cellar/clojure/1.4.0/clojure-1.4.0.jar":classes fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.01s
fib(40):  165580141 elapsed: 0.40s
fib(41):  267914296 elapsed: 0.64s
fib(42):  433494437 elapsed: 1.03s
fib(43):  701408733 elapsed: 1.68s

real	0m38.667s
user	0m39.288s
sys	0m0.094s
bash -c "time node fib.js"
fib(10):         89 elapsed: 0.00
fib(20):      10946 elapsed: 0.00
fib(30):    1346269 elapsed: 0.01
fib(40):  165580141 elapsed: 1.33
fib(41):  267914296 elapsed: 2.16
fib(42):  433494437 elapsed: 3.49
fib(43):  701408733 elapsed: 5.66

real	0m12.721s
user	0m12.729s
sys	0m0.044s
```
    * So, it reamins interesting that clojure outperforms C++.

    * I am going to upgrade for fib(44) for one last run, and then
      I will move on to Earley parsing.

```transcript
bash -c "time larceny -- -e '(compiler-switches (quote default))' -e '(compile-file \"fib.sch\" \"fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.064s
user	0m0.050s
sys	0m0.013s
bash -c "time larceny -- -e '(compiler-switches (quote fast-unsafe))' -e '(compile-file \"fib.sch\" \"unsafe-fib.fasl\")' -e '(exit)'"
Larceny v0.97 "Funny in the Head" (Aug 19 2009 04:24:46, precise:Posix:unified)

real	0m0.052s
user	0m0.038s
sys	0m0.012s
bash -c "time larceny -unsafe -nobanner -- unsafe-fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 0.99
fib(41):  267914296 elapsed: 1.99
fib(42):  433494437 elapsed: 2.0
fib(43):  701408733 elapsed: 4.0
fib(44): 1134903170 elapsed: 6.99

real	0m16.774s
user	0m16.755s
sys	0m0.017s
bash -c "time larceny -nobanner -- fib.fasl"
fib(10):         89 elapsed: 0.0
fib(20):      10946 elapsed: 0.0
fib(30):    1346269 elapsed: 0.0
fib(40):  165580141 elapsed: 1.0
fib(41):  267914296 elapsed: 2.0
fib(42):  433494437 elapsed: 3.99
fib(43):  701408733 elapsed: 5.99
fib(44): 1134903170 elapsed: 9.0

real	0m23.381s
user	0m23.360s
sys	0m0.018s
bash -c "time rustc -o rust-fib fib.rs"
warning: no debug symbols in executable (-arch x86_64)

real	0m0.469s
user	0m0.432s
sys	0m0.037s
bash -c "time ./rust-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 1.19s
fib(41):  267914296 elapsed: 1.92s
fib(42):  433494437 elapsed: 3.11s
fib(43):  701408733 elapsed: 5.01s
fib(44): 1134903170 elapsed: 8.19s

real	0m19.464s
user	0m19.459s
sys	0m0.005s
bash -c "time g++ -framework CoreServices -O2 -o cxx-fib fib.cpp"

real	0m0.325s
user	0m0.282s
sys	0m0.039s
bash -c "time ./cxx-fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.00s
fib(40):  165580141 elapsed: 0.53s
fib(41):  267914296 elapsed: 0.86s
fib(42):  433494437 elapsed: 1.39s
fib(43):  701408733 elapsed: 2.27s
fib(44): 1134903170 elapsed: 3.68s

real	0m8.770s
user	0m8.765s
sys	0m0.003s
bash -c "time clj -e '(compile (quote fib))'"
fib

real	0m0.952s
user	0m1.643s
sys	0m0.072s
bash -c "time java -cp "/Users/pnkfelix/Dev/Homebrew/homebrew/Cellar/clojure/1.4.0/clojure-1.4.0.jar":classes fib"
fib(10):         89 elapsed: 0.00s
fib(20):      10946 elapsed: 0.00s
fib(30):    1346269 elapsed: 0.01s
fib(40):  165580141 elapsed: 0.40s
fib(41):  267914296 elapsed: 0.65s
fib(42):  433494437 elapsed: 1.05s
fib(43):  701408733 elapsed: 1.72s
fib(44): 1134903170 elapsed: 2.77s

real	1m7.278s
user	1m7.951s
sys	0m0.118s
bash -c "time node fib.js"
fib(10):         89 elapsed: 0.00
fib(20):      10946 elapsed: 0.00
fib(30):    1346269 elapsed: 0.01
fib(40):  165580141 elapsed: 1.36
fib(41):  267914296 elapsed: 2.21
fib(42):  433494437 elapsed: 3.58
fib(43):  701408733 elapsed: 5.77
fib(44): 1134903170 elapsed: 9.36

real	0m22.372s
user	0m22.392s
sys	0m0.080s
```

* earley hacks
** General Earley notes
   CLOCK: [2013-02-17 Sun 21:31]--[2013-02-17 Sun 21:43] =>  0:12
   CLOCK: [2013-02-17 Sun 21:31]--[2013-02-17 Sun 21:31] =>  0:00
   CLOCK: [2013-02-17 Sun 21:16]--[2013-02-17 Sun 21:26] =>  0:10

** Larceny
   CLOCK: [2013-02-19 Tue 10:42]--[2013-02-19 Tue 11:49] =>  1:07
   CLOCK: [2013-02-19 Tue 08:59]--[2013-02-19 Tue 10:34] =>  1:35
   CLOCK: [2013-02-18 Mon 11:42]--[2013-02-18 Mon 16:35] =>  4:53
   CLOCK: [2013-02-18 Mon 10:45]--[2013-02-18 Mon 10:59] =>  0:14
   CLOCK: [2013-02-18 Mon 09:21]--[2013-02-18 Mon 10:45] =>  1:24
   CLOCK: [2013-02-17 Sun 21:56]--[2013-02-17 Sun 23:57] =>  2:01
   CLOCK: [2013-02-17 Sun 21:54]--[2013-02-17 Sun 21:55] =>  0:01
   CLOCK: [2013-02-17 Sun 21:43]--[2013-02-17 Sun 21:52] =>  0:09

   * There's a lot of stuff in the Earley paper that implies
     "I like dynamic languages" -- e.g. the injection of extra values
     like `phi` or `eos` into the primitive domains of nontermanal and
     terminal.

     So far I am modelling `phi` as #t and `eos` as #\nul; but we will
     see how that goes.

     Keeping the types straight is tricky; keeping them honest in the
     doc comments is even trickier.

   * Tue: Redoing build-prefix-map to be more "obviously correct"
